package com.ericsson.dm.transform.implementation;

import java.text.Format;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Map.Entry;
import java.util.Set;
import java.util.TreeSet;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.ExecutionException;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.joda.time.DateTime;
import org.joda.time.LocalDate;

import com.ericsson.dm.Utils.CommonUtilities;
import com.ericsson.dm.inititialization.LoadSubscriberMapping;
import com.ericsson.dm.transformation.ExecuteTransformation;
import com.ericsson.jibx.beans.SubscriberXml;
import com.ericsson.jibx.beans.SubscriberXml.SchemasubscriberbalancesdumpInfo;
import com.ericsson.jibx.beans.PROFILETAGLIST.PROFILETAGINFO;

public class Offer implements Comparator<SchemasubscriberbalancesdumpInfo> {
	SubscriberXml subscriber;
	String msisdn;
	String INITIAL_ACTIVATION_DATE;
	
	Set<String> rejectAndLog;
	Set<String> onlyLog;
	Set<String> trackLog;
	int productID = 100;
	
	ProfileTagProcessing profileTag;
	public CopyOnWriteArrayList<SchemasubscriberbalancesdumpInfo> SortedBalanceInput;
	
	public Offer()
	{
		
	}
	 
	public Offer(SubscriberXml subscriber,Set<String> rejectAndLog, Set<String> onlyLog, Set<String> trackLog, String INITIAL_ACTIVATION_DATE) {
		// TODO Auto-generated constructor stub
		this.subscriber=subscriber;
		this.rejectAndLog = rejectAndLog;
		this.trackLog = trackLog;
		this.onlyLog = onlyLog;
		this.INITIAL_ACTIVATION_DATE = INITIAL_ACTIVATION_DATE;
		SortedBalanceInput = new CopyOnWriteArrayList<>();
		profileTag = new ProfileTagProcessing(subscriber);
	}
	public Map<String, List<String>> execute() {
		// TODO Auto-generated method stub
		msisdn = subscriber.getSubscriberInfoMSISDN();
		
		SortedBalanceInput.addAll(subscriber.getBalancesdumpInfoList());
		
		Collections.sort(SortedBalanceInput,new Offer());
		
		Map<String,List<String>> map = new HashMap<>();
		map.put("Offer", generateOffers());
		map.put("Pam", generatePam());
		
		SortedBalanceInput.clear();
		return map;
	}
	
	@Override
	public int compare(SchemasubscriberbalancesdumpInfo o1, SchemasubscriberbalancesdumpInfo o2) {
		int value1 = o2.getBEEXPIRY().compareTo(o1.getBEEXPIRY());
        if (value1 == 0) {
        	return o1.getBEBUCKETID().compareTo(o2.getBEBUCKETID());
        }
        return value1;
	}
	
	private List<String> generateOffers(){
		
		List<String> OfferList = new ArrayList<>();	
		
		//offer creation from Balance Mapping sheet
		OfferList.addAll(offerFromBalanceMapping());
		
		//Offfer from balance Mapping CIS-REC BT_TYPE_INDENTIFIER 
		OfferList.addAll(OfferFromCISRECBalanceMapping());
		
		//offer creation from Default_Services sheet
		OfferList.addAll(offerFromDefaultService());
				
		//offer creation from Profile_Tags sheet
		OfferList.addAll(offerFromProfileTag());
		
		//offer creation from LifeCycle sheet
		OfferList.addAll(offerFromLifeCycle());
				
		return OfferList;
	}
	
	private List<String> offerFromBalanceMapping()
	{		
		Date currDate = new Date();
		SimpleDateFormat sdfDaily = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		List<String> BalanceOfferList =new ArrayList<>();
		Set<String> CompletedGroup = new HashSet<>();
		
		Set<String> CompletedBT_ID = new HashSet<>();
		Set<String> CompletedGroupBT_ID = new HashSet<>();
		
		//System.out.println(CommonUtilities.convertDateToEpoch(LoadSubscriberMapping.CommonConfigMap.get("migration_date").toString()));
		
		for(com.ericsson.jibx.beans.SubscriberXml.SchemasubscriberbalancesdumpInfo balanceInput : SortedBalanceInput)
		{			
			String Balance_ID = balanceInput.getBALANCETYPE();
			//System.out.println("Master Balance_ID: " + Balance_ID);
			String Balance_Value = balanceInput.getBEBUCKETVALUE();
			String Balance_StartDate = balanceInput.getBEBUCKETSTARTDATE();
			String Balance_ExpiryDate = balanceInput.getBEEXPIRY();
			CompletedGroupBT_ID.clear();
			if(CompletedBT_ID.contains(balanceInput.getBEBUCKETID()))
				continue;
			/*ProfileBalancesID contains the Special BT which is part of Profile_Mapping_Sheet so loading those balances details into
			ProfileBalancesIDDetails Map.*/
			/*if(LoadSubscriberMapping.ProfileBalancesID.contains(Balance_ID))
			{
				LoadSubscriberMapping.ProfileBalancesIDDetails.put(Balance_ID,Balance_Value+"|"+ Balance_StartDate+"|"+ Balance_ExpiryDate);
			}*/
			
			if((LoadSubscriberMapping.ProductMappingIgnoreFlag.get(Balance_ID) != null) && LoadSubscriberMapping.ProductMappingIgnoreFlag.get(Balance_ID) == "Y")
			{
				onlyLog.add("INC4003:Balance_Type Ignored:MSISDN=" + msisdn + ":BALANCE_TYPE=" + Balance_ID + ":BE_BUCKET_VALUE=" + Balance_Value +  ":BE_BUCKET_ID=" + balanceInput.getBEBUCKETID() +  ":BE_EXPIRY=" + balanceInput.getBEEXPIRY() + ":ACTION=Logging");
				CompletedBT_ID.add(balanceInput.getBEBUCKETID());
				continue;
			}
			
			/*if(CompletedBT_ID.contains(Balance_ID))
			{
				if(!Balance_ExpiryDate.equals(LoadSubscriberMapping.CommonConfigMap.get("Lifetime_validity_value").toString()) && CommonUtilities.convertDateToEpoch(Balance_ExpiryDate) < CommonUtilities.convertDateToEpoch(sdfDaily.format(currDate)))
				{
					//INC4001	Balance_Type expired	MSISDN,BALANCE_TYPE,BE_BUCKET_VALUE,BE_BUCKET_ID,BE_EXPIRY
					onlyLog.add("INC4001:Balance_Type expired:MSISDN=" + msisdn + ":BALANCE_TYPE=" + Balance_ID + ":BE_BUCKET_VALUE=" + Balance_Value +  ":BE_BUCKET_ID=" + balanceInput.getBEBUCKETID() +  ":BE_EXPIRY=" + balanceInput.getBEEXPIRY() + ":ACTION=Logging");
					CompletedBT_ID.add(balanceInput.getBEBUCKETID());
				}
				continue;
			}*/	
			
			
			//Check for expiry Date, log it and proceed further
			if(!Balance_ExpiryDate.equals(LoadSubscriberMapping.CommonConfigMap.get("Lifetime_validity_value").toString()) && CommonUtilities.convertDateToEpoch(Balance_ExpiryDate) < CommonUtilities.convertDateToEpoch(LoadSubscriberMapping.CommonConfigMap.get("migration_date").toString()))
			{
				//INC4001	Balance_Type expired	MSISDN,BALANCE_TYPE,BE_BUCKET_VALUE,BE_BUCKET_ID,BE_EXPIRY
				onlyLog.add("INC4001:Balance_Type expired:MSISDN=" + msisdn + ":BALANCE_TYPE=" + Balance_ID + ":BE_BUCKET_VALUE=" + Balance_Value +  ":BE_BUCKET_ID=" + balanceInput.getBEBUCKETID() +  ":BE_EXPIRY=" + balanceInput.getBEEXPIRY() + ":ACTION=Logging");
				CompletedBT_ID.add(balanceInput.getBEBUCKETID());
			}
			else
			{
				if(LoadSubscriberMapping.BalanceEmptyBTGroupIdentifierMap.get(Balance_ID + "|") != null)
				{
					String Offer_ID = LoadSubscriberMapping.BalanceEmptyBTGroupIdentifierMap.get(Balance_ID + "|").getOfferID();
					String Symbol = LoadSubscriberMapping.BalanceEmptyBTGroupIdentifierMap.get(Balance_ID + "|").getSymbols();
					String BT_Value = LoadSubscriberMapping.BalanceEmptyBTGroupIdentifierMap.get(Balance_ID + "|").getBTValue();
					String Product_Private = LoadSubscriberMapping.BalanceEmptyBTGroupIdentifierMap.get(Balance_ID + "|").getProductPrivate();
					String Offer_Type = LoadSubscriberMapping.BalanceEmptyBTGroupIdentifierMap.get(Balance_ID + "|").getOfferType();
					boolean startFlag = LoadSubscriberMapping.BalanceEmptyBTGroupIdentifierMap.get(Balance_ID + "|").getOfferStartDate().length() > 0 ? true:false;
					boolean expiryFalg = LoadSubscriberMapping.BalanceEmptyBTGroupIdentifierMap.get(Balance_ID + "|").getOfferExpiryDate().length() > 0 ? true:false;
									
					if(!Offer_ID.isEmpty())
					{					
						if(Symbol.isEmpty() && BT_Value.isEmpty())
						{	
							BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate, Product_Private,""));
							CompletedBT_ID.add(balanceInput.getBEBUCKETID());
						}
						else
						{
							if(Symbol.equals(">=") && Integer.parseInt(Balance_Value) >= Integer.parseInt(BT_Value))
								BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,Product_Private,""));
							else if(Symbol.equals(">") && Integer.parseInt(Balance_Value) > Integer.parseInt(BT_Value))
								BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,Product_Private,""));
							else if(Symbol.equals("=") && Integer.parseInt(Balance_Value) == Integer.parseInt(BT_Value))
								BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,Product_Private,""));
							else if(Symbol.equals("or"))
							{
								//Integer.parseInt(Balance_Value) == Integer.parseInt(BT_Value)
								String[] values = BT_Value.split("#");
								
								if(Arrays.stream(values).anyMatch(Balance_Value::equals))
								{
									BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,Product_Private,""));
								}
								else
									onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + Balance_ID + ":BE_BUCKET_VALUE=" + Balance_Value + ":BE_BUCKET_ID=" + balanceInput.getBEBUCKETID() +":ACTION=Logging");
							}
							else
								onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + Balance_ID + ":BE_BUCKET_VALUE=" + Balance_Value + ":BE_BUCKET_ID=" + balanceInput.getBEBUCKETID() +":ACTION=Logging");
								//onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + Balance_ID + ":BE_BUCKET_VALUE=" + Balance_Value + ":BE_BUCKET_ID=" + balanceInput.getBEBUCKETID() +":ACTION=Logging");
							CompletedBT_ID.add(balanceInput.getBEBUCKETID());
						}
					}	
				}	
				else
				{	
					//if(Arrays.stream(LoadSubscriberMapping.ExceptionBalances).anyMatch(Balance_ID::equals))
					if(LoadSubscriberMapping.ExceptionBalances.contains(Balance_ID))
					{
						if(Balance_ID.equals("1387") || Balance_ID.equals("2112") || Balance_ID.equals("2432"))
						{
							if(LoadSubscriberMapping.SpecialBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + Balance_Value) != null)
							{
								String Offer_ID = LoadSubscriberMapping.SpecialBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + Balance_Value).getOfferID();
								String Offer_Type = LoadSubscriberMapping.SpecialBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + Balance_Value).getOfferType();
								boolean startFlag = LoadSubscriberMapping.SpecialBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + Balance_Value).getOfferStartDate().length() > 0 ? true:false;
								boolean expiryFalg = LoadSubscriberMapping.SpecialBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + Balance_Value).getOfferExpiryDate().length() > 0 ? true:false;
								if(Balance_ID.equals("2112"))
									BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,"",""));
								else
									BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, "","",""));
							}
							else
							{
								onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + Balance_ID + ":BE_BUCKET_VALUE=" + Balance_Value + ":BE_BUCKET_ID=" + balanceInput.getBEBUCKETID() +":ACTION=Logging");
							}
							CompletedBT_ID.add(balanceInput.getBEBUCKETID());
						}
						if(Balance_ID.equals("21"))
						{							
							//LoadSubscriberMapping.MainBalanceGroupingMap.forEach(action->System.out.println(action));Balance_ID + '|' + CCID + '|' + BTGroupIdentifier
							//LoadSubscriberMapping.MainBalanceGroupingList.forEach(BTGrp->
							for (String BTGrp: LoadSubscriberMapping.MainBalanceGroupingList)
							{
								if(LoadSubscriberMapping.MainBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + subscriber.getSubscriberInfoCCSACCTTYPEID() + '|' + BTGrp) != null)
								{
									String Offer_ID = LoadSubscriberMapping.MainBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + subscriber.getSubscriberInfoCCSACCTTYPEID() + '|' + BTGrp).getOfferID();
									String Symbol = LoadSubscriberMapping.MainBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + subscriber.getSubscriberInfoCCSACCTTYPEID() + '|' + BTGrp).getSymbols();
									String Offer_Type = LoadSubscriberMapping.MainBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + subscriber.getSubscriberInfoCCSACCTTYPEID() + '|' + BTGrp).getOfferType();
									boolean startFlag = LoadSubscriberMapping.MainBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + subscriber.getSubscriberInfoCCSACCTTYPEID() + '|' + BTGrp).getOfferStartDate().length() > 0 ? true:false;
									boolean expiryFalg = LoadSubscriberMapping.MainBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + subscriber.getSubscriberInfoCCSACCTTYPEID() + '|' + BTGrp).getOfferExpiryDate().length() > 0 ? true:false;
									String BT_Value = LoadSubscriberMapping.MainBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + subscriber.getSubscriberInfoCCSACCTTYPEID() + '|' + BTGrp).getBTValue();
									CompletedBT_ID.add(balanceInput.getBEBUCKETID());
									if(!Offer_ID.isEmpty())
									{
										if(Symbol.equals("<") && Double.parseDouble(Balance_Value) < Double.parseDouble(BT_Value))
										{
											CompletedGroup.add(BTGrp);
											BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,"",""));
										}
										else if(Symbol.equals(">=") && Double.parseDouble(Balance_Value) > Double.parseDouble(BT_Value))
										{
											CompletedGroup.add(BTGrp);
											BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,"",""));
										}
										else if(Symbol.equals("=") && Long.parseLong(Balance_Value) == Long.parseLong(BT_Value))
										{
											CompletedGroup.add(BTGrp);
											BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,"",""));
										}
										else if(Symbol.equals("or"))
										{
											//Integer.parseInt(Balance_Value) == Integer.parseInt(BT_Value)
											String[] values = BT_Value.split("#");											
											if(Arrays.stream(values).anyMatch(Balance_Value::equals))
											{
												CompletedGroup.add(BTGrp);
												BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,"",""));
											}
											else
												onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + Balance_ID + ":BE_BUCKET_VALUE=" + Balance_Value + ":BE_BUCKET_ID=" + balanceInput.getBEBUCKETID() +":ACTION=Logging");
										}
										else
										{
											if(Double.parseDouble(Balance_Value) > 120.024 && Double.parseDouble(Balance_Value) < 320.064)
												onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + Balance_ID + ":BE_BUCKET_VALUE=" + Balance_Value + ":BE_BUCKET_ID=" + balanceInput.getBEBUCKETID() +":ACTION=Logging");
										}
									}
								}
							}
						}						
						if(Balance_ID.equals("1219"))
						{
							if(LoadSubscriberMapping.SpecialBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + Balance_Value) != null)
							{
								String Offer_ID = LoadSubscriberMapping.SpecialBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + Balance_Value).getOfferID();
								String Offer_Type = LoadSubscriberMapping.SpecialBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + Balance_Value).getOfferType();
								boolean startFlag = LoadSubscriberMapping.SpecialBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + Balance_Value).getOfferStartDate().length() > 0 ? true:false;
								boolean expiryFalg = LoadSubscriberMapping.SpecialBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + Balance_Value).getOfferExpiryDate().length() > 0 ? true:false;
								String StartDate = subscriber.getProfiledumpInfoList().get(0).getPriceShout();
								String CurrectStartDate = "";
								
								if(!StartDate.isEmpty() && StartDate.length() == 14)
									CurrectStartDate = StartDate.substring(0,4) + "-" + StartDate.substring(4,6) + "-" + StartDate.substring(6,8) + " " + StartDate.substring(8,10) + ":" + StartDate.substring(10,12) + ":" + StartDate.substring(12,14);
								
								BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,CurrectStartDate, "","",""));
								
							}
							else
							{
								onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + Balance_ID + ":BE_BUCKET_VALUE=" + Balance_Value + ":BE_BUCKET_ID=" + balanceInput.getBEBUCKETID() +":ACTION=Logging");
							}
							CompletedBT_ID.add(balanceInput.getBEBUCKETID());
						}
						if(Balance_ID.equals("3011"))
						{
							/*3011 is special case in which BT_VALUE is "0|1|2|3|4|5|6|7|8|9|10|11" but from input i will get
							individual value, so i need to find some logic to fix this */
							
							String BTValue3011 = "";
							for(String str : LoadSubscriberMapping.BT_VALUE_3011)
							{
								String[] TempBTValue = str.split("\\|");
								if(Arrays.stream(TempBTValue).anyMatch(Balance_Value::equals)){
									BTValue3011 = str;
									break;
								}											
							}
							
							if(BTValue3011.length() > 0)
							{
								if(LoadSubscriberMapping.SpecialBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + BTValue3011) != null)
								{
									String Offer_ID = LoadSubscriberMapping.SpecialBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + BTValue3011).getOfferID();
									String Offer_Type = LoadSubscriberMapping.SpecialBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + BTValue3011).getOfferType();
									boolean startFlag = LoadSubscriberMapping.SpecialBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + BTValue3011).getOfferStartDate().length() > 0 ? true:false;
									boolean expiryFalg = LoadSubscriberMapping.SpecialBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + BTValue3011).getOfferExpiryDate().length() > 0 ? true:false;
									BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,"",""));									
								}
							}
							else
							{
								onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + Balance_ID + ":BE_BUCKET_VALUE=" + Balance_Value + ":BE_BUCKET_ID=" + balanceInput.getBEBUCKETID() +":ACTION=Logging");
							}
							CompletedBT_ID.add(balanceInput.getBEBUCKETID());
						}
						if(Balance_ID.equals("1512"))
						{
							if(LoadSubscriberMapping.SpecialBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + Balance_Value) != null)
							{
								String Offer_ID = LoadSubscriberMapping.SpecialBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + Balance_Value).getOfferID();
								String Offer_Type = LoadSubscriberMapping.SpecialBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + Balance_Value).getOfferType();
								boolean startFlag = LoadSubscriberMapping.SpecialBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + Balance_Value).getOfferStartDate().length() > 0 ? true:false;
								boolean expiryFalg = LoadSubscriberMapping.SpecialBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + Balance_Value).getOfferExpiryDate().length() > 0 ? true:false;
								BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,INITIAL_ACTIVATION_DATE, "","",""));
							}
							else
							{
								onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + Balance_ID + ":BE_BUCKET_VALUE=" + Balance_Value + ":BE_BUCKET_ID=" + balanceInput.getBEBUCKETID() +":ACTION=Logging");
							}
							CompletedBT_ID.add(balanceInput.getBEBUCKETID());
						}
						if(Balance_ID.equals("1266"))
						{
							if(Balance_Value.equals("0"))
							{
								String Offer_ID = LoadSubscriberMapping.Special1266BalanceDummy.get(Balance_ID + "|=").getOfferID();
								String Offer_Type = LoadSubscriberMapping.Special1266BalanceDummy.get(Balance_ID + "|=").getOfferType();
								boolean startFlag = LoadSubscriberMapping.Special1266BalanceDummy.get(Balance_ID + "|=").getOfferStartDate().length() > 0 ? true:false;
								boolean expiryFalg = LoadSubscriberMapping.Special1266BalanceDummy.get(Balance_ID + "|=").getOfferExpiryDate().length() > 0 ? true:false;
								BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,"",""));								
							}
							/*else if(Integer.parseInt(Balance_Value) >= 0)
							{
								String Offer_ID = LoadSubscriberMapping.Special1266BalanceDummy.get(Balance_ID + "|>=").getOfferID();
								String Offer_Type = LoadSubscriberMapping.Special1266BalanceDummy.get(Balance_ID + "|>=").getOfferType();
								boolean startFlag = LoadSubscriberMapping.Special1266BalanceDummy.get(Balance_ID + "|>=").getOfferStartDate().length() > 0 ? true:false;
								boolean expiryFalg = LoadSubscriberMapping.Special1266BalanceDummy.get(Balance_ID + "|>=").getOfferExpiryDate().length() > 0 ? true:false;
								BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,"",""));
							}*/
							CompletedBT_ID.add(balanceInput.getBEBUCKETID());
						}
						if(Balance_ID.equals("436"))
						{
							if(subscriber.getSubscriberInfoCCSACCTTYPEID().equals("255"))
							{
								String Offer_ID = LoadSubscriberMapping.Special436BalanceDummy.get(Balance_ID + ":" + subscriber.getSubscriberInfoCCSACCTTYPEID()).getOfferID();
								String RP_ID = LoadSubscriberMapping.Special436BalanceDummy.get(Balance_ID + ":" + subscriber.getSubscriberInfoCCSACCTTYPEID()).getRPID();
								String Symbol = LoadSubscriberMapping.Special436BalanceDummy.get(Balance_ID + ":" + subscriber.getSubscriberInfoCCSACCTTYPEID()).getSymbols();
								String BT_Value = LoadSubscriberMapping.Special436BalanceDummy.get(Balance_ID + ":" + subscriber.getSubscriberInfoCCSACCTTYPEID()).getBTValue();
								String Offer_Type = LoadSubscriberMapping.Special436BalanceDummy.get(Balance_ID + ":" + subscriber.getSubscriberInfoCCSACCTTYPEID()).getOfferType();
								boolean startFlag = LoadSubscriberMapping.Special436BalanceDummy.get(Balance_ID + ":" + subscriber.getSubscriberInfoCCSACCTTYPEID()).getOfferStartDate().length() > 0 ? true:false;
								boolean expiryFalg = LoadSubscriberMapping.Special436BalanceDummy.get(Balance_ID + ":" + subscriber.getSubscriberInfoCCSACCTTYPEID()).getOfferExpiryDate().length() > 0 ? true:false;
								if(!Offer_ID.isEmpty())
								{														
									if(Symbol.equals(">=") && Integer.parseInt(Balance_Value) >= Integer.parseInt(BT_Value))
										BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,"",""));
									else if(Symbol.equals(">") && Integer.parseInt(Balance_Value) > Integer.parseInt(BT_Value))
										BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,"",""));
									else if(Symbol.equals("=") && Integer.parseInt(Balance_Value) == Integer.parseInt(BT_Value))
										BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,"",""));
									else if(Symbol.equals("or"))
									{
										//Integer.parseInt(Balance_Value) == Integer.parseInt(BT_Value)
										String[] values = BT_Value.split("#");
										
										if(Arrays.stream(values).anyMatch(Balance_Value::equals))
										{
											BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,"",""));
										}
										else
											onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + Balance_ID + ":BE_BUCKET_VALUE=" + Balance_Value + ":BE_BUCKET_ID=" + balanceInput.getBEBUCKETID() +":ACTION=Logging");
									}
									else
										onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + Balance_ID + ":BE_BUCKET_VALUE=" + Balance_Value + ":BE_BUCKET_ID=" + balanceInput.getBEBUCKETID() +":ACTION=Logging");
										//onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + Balance_ID + ":BE_BUCKET_VALUE=" + Balance_Value + ":BE_BUCKET_ID=" + balanceInput.getBEBUCKETID() +":ACTION=Logging");
								}
							}
							else if(subscriber.getSubscriberInfoCCSACCTTYPEID().equals("214") || subscriber.getSubscriberInfoCCSACCTTYPEID().equals("196"))
							{
								String Offer_ID = LoadSubscriberMapping.Special436BalanceDummy.get(Balance_ID + ":" + "214|196").getOfferID();
								String RP_ID = LoadSubscriberMapping.Special436BalanceDummy.get(Balance_ID + ":" + "214|196").getRPID();
								String Symbol = LoadSubscriberMapping.Special436BalanceDummy.get(Balance_ID + ":" + "214|196").getSymbols();
								String BT_Value = LoadSubscriberMapping.Special436BalanceDummy.get(Balance_ID + ":" + "214|196").getBTValue();
								String Offer_Type = LoadSubscriberMapping.Special436BalanceDummy.get(Balance_ID + ":" + "214|196").getOfferType();
								boolean startFlag = LoadSubscriberMapping.Special436BalanceDummy.get(Balance_ID + ":" + "214|196").getOfferStartDate().length() > 0 ? true:false;
								boolean expiryFalg = LoadSubscriberMapping.Special436BalanceDummy.get(Balance_ID + ":" + "214|196").getOfferExpiryDate().length() > 0 ? true:false;
								if(!Offer_ID.isEmpty())
								{														
									if(Symbol.equals(">=") && Integer.parseInt(Balance_Value) >= Integer.parseInt(BT_Value))
										BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,"",""));
									else if(Symbol.equals(">") && Integer.parseInt(Balance_Value) > Integer.parseInt(BT_Value))
										BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,"",""));
									else if(Symbol.equals("=") && Integer.parseInt(Balance_Value) == Integer.parseInt(BT_Value))
										BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,"",""));
									else if(Symbol.equals("or"))
									{
										//Integer.parseInt(Balance_Value) == Integer.parseInt(BT_Value)
										String[] values = BT_Value.split("#");
										
										if(Arrays.stream(values).anyMatch(Balance_Value::equals))
										{
											BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,"",""));
										}
										else
											onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + Balance_ID + ":BE_BUCKET_VALUE=" + Balance_Value + ":BE_BUCKET_ID=" + balanceInput.getBEBUCKETID() +":ACTION=Logging");
									}
									else
										onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + Balance_ID + ":BE_BUCKET_VALUE=" + Balance_Value + ":BE_BUCKET_ID=" + balanceInput.getBEBUCKETID() +":ACTION=Logging");
										//onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + Balance_ID + ":BE_BUCKET_VALUE=" + Balance_Value + ":BE_BUCKET_ID=" + balanceInput.getBEBUCKETID() +":ACTION=Logging");
								}
							}
							else
							{
								String Offer_ID = LoadSubscriberMapping.Special436BalanceDummy.get(Balance_ID + ":").getOfferID();
								String RP_ID = LoadSubscriberMapping.Special436BalanceDummy.get(Balance_ID + ":").getRPID();
								String Symbol = LoadSubscriberMapping.Special436BalanceDummy.get(Balance_ID + ":").getSymbols();
								String BT_Value = LoadSubscriberMapping.Special436BalanceDummy.get(Balance_ID + ":").getBTValue();
								String Offer_Type = LoadSubscriberMapping.Special436BalanceDummy.get(Balance_ID + ":").getOfferType();
								boolean startFlag = LoadSubscriberMapping.Special436BalanceDummy.get(Balance_ID + ":").getOfferStartDate().length() > 0 ? true:false;
								boolean expiryFalg = LoadSubscriberMapping.Special436BalanceDummy.get(Balance_ID + ":").getOfferExpiryDate().length() > 0 ? true:false;
								
								if(Symbol.equals(">=") && Integer.parseInt(Balance_Value) >= Integer.parseInt(BT_Value))
									BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,"",""));
								else if(Symbol.equals(">") && Integer.parseInt(Balance_Value) > Integer.parseInt(BT_Value))
									BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,"",""));
								else if(Symbol.equals("=") && Integer.parseInt(Balance_Value) == Integer.parseInt(BT_Value))
									BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,"",""));
								else if(Symbol.equals("or"))
								{
									//Integer.parseInt(Balance_Value) == Integer.parseInt(BT_Value)
									String[] values = BT_Value.split("#");
									
									if(Arrays.stream(values).anyMatch(Balance_Value::equals))
									{
										BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,"",""));
									}
									else
										onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + Balance_ID + ":BE_BUCKET_VALUE=" + Balance_Value + ":BE_BUCKET_ID=" + balanceInput.getBEBUCKETID() +":ACTION=Logging");
								}
								else
									onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + Balance_ID + ":BE_BUCKET_VALUE=" + Balance_Value + ":BE_BUCKET_ID=" + balanceInput.getBEBUCKETID() +":ACTION=Logging");
									//onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + Balance_ID + ":BE_BUCKET_VALUE=" + Balance_Value + ":BE_BUCKET_ID=" + balanceInput.getBEBUCKETID() +":ACTION=Logging");
							}
							CompletedBT_ID.add(balanceInput.getBEBUCKETID());
						}
						if(Balance_ID.equals("25") || Balance_ID.equals("240") || Balance_ID.equals("260"))
						{
							boolean DummyDoneFlag = false;
							for(String str : LoadSubscriberMapping.ProfileTagDummy)
							{							 
								if(LoadSubscriberMapping.ProfileTagBalanceDummy.get(Balance_ID + "|" + str) != null && str.contains(Balance_ID))
								{
									String Symbol = LoadSubscriberMapping.ProfileTagBalanceDummy.get(Balance_ID + "|" + str).getSymbols();
									String BT_Value = LoadSubscriberMapping.ProfileTagBalanceDummy.get(Balance_ID + "|" + str).getBTValue();
									if(Symbol.equals(">=") && Integer.parseInt(Balance_Value) >= Integer.parseInt(BT_Value))
									{
										String PT_Name = LoadSubscriberMapping.ProfileTagBalanceDummy.get(Balance_ID + "|" + str).getPTName().split("-")[0];
										String PT_Symbol = LoadSubscriberMapping.ProfileTagBalanceDummy.get(Balance_ID + "|" + str).getPTName().split("-")[1];
										String PT_Value = LoadSubscriberMapping.ProfileTagBalanceDummy.get(Balance_ID + "|" + str).getPTName().split("-")[2];
																													
										String PT_InputValue = profileTag.GetProfileTagValue(PT_Name);
										if(PT_Symbol.equals("=") && PT_InputValue.equals(PT_Value))
										{
											String Offer_ID = LoadSubscriberMapping.ProfileTagBalanceDummy.get(Balance_ID + "|" + str).getOfferID();
											String Offer_Type = LoadSubscriberMapping.ProfileTagBalanceDummy.get(Balance_ID + "|" + str).getOfferType();
											boolean startFlag = LoadSubscriberMapping.ProfileTagBalanceDummy.get(Balance_ID + "|" + str).getOfferStartDate().length() > 0 ? true:false;
											boolean expiryFalg = LoadSubscriberMapping.ProfileTagBalanceDummy.get(Balance_ID + "|" + str).getOfferExpiryDate().length() > 0 ? true:false;
											String StartDate = LoadSubscriberMapping.ProfileTagBalanceDummy.get(Balance_ID + "|" + str).getOfferStartDate();
											String expiryDate = LoadSubscriberMapping.ProfileTagBalanceDummy.get(Balance_ID + "|" + str).getOfferExpiryDate();
											if(!expiryDate.equals("BT_Expiry_Date"))
											{
												String Date = profileTag.GetProfileTagValue("SmsExpDate");
												if(!Date.isEmpty() && Date.length() == 14)
													expiryDate = Date.substring(0,4) + "-" + Date.substring(4,6) + "-" + Date.substring(6,8) + " " + Date.substring(8,10) + ":" + Date.substring(10,12) + ":" + Date.substring(12,14);
												else
													expiryDate = Balance_ExpiryDate;
											}	
											else
											{
												expiryDate = Balance_ExpiryDate;
											}
											//System.out.println("MSISDN------- " + msisdn );
											BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, expiryDate,"",""));
											DummyDoneFlag = true;
										}									
									}
								}
							}	
							if(!DummyDoneFlag)
							{
								if(LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(Balance_ID + "|M") != null)
								{
									String Offer_ID = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(Balance_ID + "|M").getOfferID();
									String Offer_Type = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(Balance_ID + "|M").getOfferType();
									String Offer_flag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(Balance_ID + "|M").getOfferFlag();
									boolean startFlag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(Balance_ID + "|M").getOfferStartDate().length() > 0 ? true:false;
									boolean expiryFalg = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(Balance_ID + "|M").getOfferExpiryDate().length() > 0 ? true:false;
									String Symbol = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(Balance_ID + "|M").getSymbols();
									String BT_VALUE = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(Balance_ID + "|M").getBTValue();
									
									if(Offer_ID.length() > 0 && Symbol.equals(">") && Integer.parseInt(Balance_Value) > Integer.parseInt(BT_VALUE))
									{	
										BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,"",Offer_flag));
										trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + Balance_ID + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ balanceInput.getBEBUCKETID()  +":ACTION=Logging");
										continue;
									}
									if(Offer_ID.length() > 0 && Symbol.equals(">=") && Integer.parseInt(Balance_Value) >= Integer.parseInt(BT_VALUE))
									{	
										BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,"",Offer_flag));
										trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + Balance_ID + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ balanceInput.getBEBUCKETID()  +":ACTION=Logging");
										continue;
									}
									if(Offer_ID.length() > 0 && Symbol.equals("=") && Integer.parseInt(Balance_Value) == Integer.parseInt(BT_VALUE))
									{	
										BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,"",Offer_flag));
										trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + Balance_ID + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ balanceInput.getBEBUCKETID()  +":ACTION=Logging");
										continue;
									}
									else
										onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + Balance_ID + ":BE_BUCKET_VALUE=" + Balance_Value + ":BE_BUCKET_ID="+ balanceInput.getBEBUCKETID()  +":ACTION=Logging");
								}
								else
								{
									onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + Balance_ID + ":BE_BUCKET_VALUE=" + Balance_Value + ":BE_BUCKET_ID="+ balanceInput.getBEBUCKETID()  +":ACTION=Logging");
								}							
							}
							
							CompletedBT_ID.add(balanceInput.getBEBUCKETID());
						}
						if(Balance_ID.equals("1477") || Balance_ID.equals("759") || Balance_ID.equals("2072") || Balance_ID.equals("1772"))
						{
							boolean DummyDoneFlag = false;
							for(String str : LoadSubscriberMapping.ProfileTagDummy)
							{							 
								if(LoadSubscriberMapping.ProfileTagBalanceDummy.get(Balance_ID + "|" + str) != null)
								{
									String Symbol = LoadSubscriberMapping.ProfileTagBalanceDummy.get(Balance_ID + "|" + str).getSymbols();
									String BT_Value = LoadSubscriberMapping.ProfileTagBalanceDummy.get(Balance_ID + "|" + str).getBTValue();
									if(Symbol.equals(">=") && Integer.parseInt(Balance_Value) >= Integer.parseInt(BT_Value))
									{
										String PT_Name = LoadSubscriberMapping.ProfileTagBalanceDummy.get(Balance_ID + "|" + str).getPTName().split("-")[0];
										String PT_Symbol = LoadSubscriberMapping.ProfileTagBalanceDummy.get(Balance_ID + "|" + str).getPTName().split("-")[1];
										String PT_Value = LoadSubscriberMapping.ProfileTagBalanceDummy.get(Balance_ID + "|" + str).getPTName().split("-")[2];
																													
										String PT_InputValue = profileTag.GetProfileTagValue(PT_Name);
										if(PT_Symbol.equals("=") && PT_InputValue.equals(PT_Value))
										{
											String Offer_ID = LoadSubscriberMapping.ProfileTagBalanceDummy.get(Balance_ID + "|" + str).getOfferID();
											String Offer_Type = LoadSubscriberMapping.ProfileTagBalanceDummy.get(Balance_ID + "|" + str).getOfferType();
											boolean startFlag = LoadSubscriberMapping.ProfileTagBalanceDummy.get(Balance_ID + "|" + str).getOfferStartDate().length() > 0 ? true:false;
											boolean expiryFalg = LoadSubscriberMapping.ProfileTagBalanceDummy.get(Balance_ID + "|" + str).getOfferExpiryDate().length() > 0 ? true:false;
											String StartDate = LoadSubscriberMapping.ProfileTagBalanceDummy.get(Balance_ID + "|" + str).getOfferStartDate();
											String expiryDate = LoadSubscriberMapping.ProfileTagBalanceDummy.get(Balance_ID + "|" + str).getOfferExpiryDate();
											if(!expiryDate.equals("BT_Expiry_Date"))
											{
												String ExpiryPTValue = (expiryDate.split("\\.")[0]);
												String Date = profileTag.GetProfileTagValue(ExpiryPTValue);
												if(!Date.isEmpty() && Date.length() == 14)
													expiryDate = Date.substring(0,4) + "-" + Date.substring(4,6) + "-" + Date.substring(6,8) + " " + Date.substring(8,10) + ":" + Date.substring(10,12) + ":" + Date.substring(12,14);
											}	
											else
											{
												expiryDate = Balance_ExpiryDate;
											}
											DummyDoneFlag =  true;
											BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, expiryDate,"",""));
										}									
									}
								}
							}
							if(!DummyDoneFlag)
							{
								if(LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(Balance_ID + "|M") != null)
								{
									String Offer_ID = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(Balance_ID + "|M").getOfferID();
									String Offer_Type = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(Balance_ID + "|M").getOfferType();
									String Offer_flag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(Balance_ID + "|M").getOfferFlag();
									boolean startFlag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(Balance_ID + "|M").getOfferStartDate().length() > 0 ? true:false;
									boolean expiryFalg = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(Balance_ID + "|M").getOfferExpiryDate().length() > 0 ? true:false;
									String Symbol = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(Balance_ID + "|M").getSymbols();
									String BT_VALUE = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(Balance_ID + "|M").getBTValue();
									
									if(Offer_ID.length() > 0 && Symbol.equals(">") && Integer.parseInt(Balance_Value) > Integer.parseInt(BT_VALUE))
									{	
										BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,"",Offer_flag));
										trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + Balance_ID + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ balanceInput.getBEBUCKETID()  +":ACTION=Logging");
									}
									if(Offer_ID.length() > 0 && Symbol.equals(">=") && Integer.parseInt(Balance_Value) >= Integer.parseInt(BT_VALUE))
									{	
										BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,"",Offer_flag));
										trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + Balance_ID + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ balanceInput.getBEBUCKETID()  +":ACTION=Logging");
									}
									if(Offer_ID.length() > 0 && Symbol.equals("=") && Integer.parseInt(Balance_Value) == Integer.parseInt(BT_VALUE))
									{	
										BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,"",Offer_flag));
										trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + Balance_ID + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ balanceInput.getBEBUCKETID()  +":ACTION=Logging");
									}
									else
										onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + Balance_ID + ":BE_BUCKET_VALUE=" + Balance_Value + ":BE_BUCKET_ID="+ balanceInput.getBEBUCKETID()  +":ACTION=Logging");
								}
								else
								{
									onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + Balance_ID + ":BE_BUCKET_VALUE=" + Balance_Value + ":BE_BUCKET_ID="+ balanceInput.getBEBUCKETID()  +":ACTION=Logging");
								}							
							}
							CompletedBT_ID.add(balanceInput.getBEBUCKETID());
						}
						if(Balance_ID.equals("3286") || Balance_ID.equals("3231") || Balance_ID.equals("3324") || Balance_ID.equals("2928") || Balance_ID.equals("1453") || Balance_ID.equals("2017") || Balance_ID.equals("2016") || Balance_ID.equals("1760") || Balance_ID.equals("2773") || Balance_ID.equals("1244"))
						{
							String Offer_ID = LoadSubscriberMapping.SpecialBalanceDummyS.get(Balance_ID ).getOfferID();
							String Offer_Type = LoadSubscriberMapping.SpecialBalanceDummyS.get(Balance_ID).getOfferType();
							boolean startFlag = LoadSubscriberMapping.SpecialBalanceDummyS.get(Balance_ID).getOfferStartDate().length() > 0 ? true:false;
							boolean expiryFalg = LoadSubscriberMapping.SpecialBalanceDummyS.get(Balance_ID).getOfferExpiryDate().length() > 0 ? true:false;
							String BT_Value = LoadSubscriberMapping.SpecialBalanceDummyS.get(Balance_ID).getBTValue();
							String Symbol = LoadSubscriberMapping.SpecialBalanceDummyS.get(Balance_ID).getSymbols();
							if(Symbol.equals(">=") && Integer.parseInt(Balance_Value) >= Integer.parseInt(BT_Value))
							{
								for(int i = 0; i < Integer.parseInt(Balance_Value); i++)
								{
									BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,"",""));
								}								
							}
							else
								onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + Balance_ID + ":BE_BUCKET_VALUE=" + Balance_Value + ":BE_BUCKET_ID=" + balanceInput.getBEBUCKETID() +":ACTION=Logging");
							CompletedBT_ID.add(balanceInput.getBEBUCKETID());
						}
						if(Balance_ID.equals("3233") || Balance_ID.equals("3232"))
						{
							if(LoadSubscriberMapping.SpecialBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + Balance_Value) != null)
							{
								String Offer_ID = LoadSubscriberMapping.SpecialBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + Balance_Value).getOfferID();
								String Offer_Type = LoadSubscriberMapping.SpecialBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + Balance_Value).getOfferType();
								boolean startFlag = LoadSubscriberMapping.SpecialBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + Balance_Value).getOfferStartDate().length() > 0 ? true:false;
								boolean expiryFalg = LoadSubscriberMapping.SpecialBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + Balance_Value).getOfferExpiryDate().length() > 0 ? true:false;
								
								BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,"",""));
							}
							else
							{
								onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + Balance_ID + ":BE_BUCKET_VALUE=" + Balance_Value + ":BE_BUCKET_ID=" + balanceInput.getBEBUCKETID() +":ACTION=Logging");
							}
							CompletedBT_ID.add(balanceInput.getBEBUCKETID());
						}
					}
					else if(LoadSubscriberMapping.BalanceOnlySpecialAGroupSet.contains(Balance_ID))
					{	
						Map<String,Map<String,List<String>>> ASGroupOfferMap = new HashMap<>();
						ASGroupOfferMap = ComputeASpecialGroup(Balance_ID,CompletedBT_ID);
						
						Map<String,List<String>> OutputDetails = new HashMap<>();
						OutputDetails = ASGroupOfferMap.get("ASOutputDetails");
						if(OutputDetails.containsKey("Offer"))
						{											
							BalanceOfferList.addAll(OutputDetails.get("Offer"));											
							CompletedBT_ID.addAll(OutputDetails.get("CompletedBT"));
						}
					}					
					else
					{
						String GroupName = "";
						Set<String> CurrentGroupBalance = new HashSet<>();
						List<String> ValidGroupBalanceOffer = new ArrayList<>();
						Set<String> ValidGroupBT_ID = new HashSet<>();
						List<String> FinalOfferList = new ArrayList<>();
						Set<String> ExpiryDates = new TreeSet<>();
						boolean MaxDateFlag = false;
						
						//Map<String, String> CurrentGroupBalanceID = new ConcurrentHashMap<>(50, 0.75f, 30);
						boolean ExtraOfferFlag = false;
						for(Set<String> valueList : LoadSubscriberMapping.BalanceGroupingMap.values()) {					
							if(valueList.contains(Balance_ID)){
								GroupName = LoadSubscriberMapping.getKey(LoadSubscriberMapping.BalanceGroupingMap, valueList);
								if(GroupName.startsWith("D-"))
								{
									GroupName = ComputeDGroup(Balance_ID,GroupName,CompletedBT_ID);
									CurrentGroupBalance.addAll(LoadSubscriberMapping.BalanceGroupingMap.get(GroupName));
								}
								if(GroupName.startsWith("B-"))
								{
									GroupName = ComputeBGroup(Balance_ID,GroupName,CompletedBT_ID);
									CurrentGroupBalance.addAll(LoadSubscriberMapping.BalanceGroupingMap.get(GroupName));
								}
								if(GroupName.startsWith("A-"))
								{
									if(GroupName.startsWith("A-M-"))
									{
										Map<String,Map<String,List<String>>> AMOutputDetails = new HashMap<>();
										AMOutputDetails = populateAMGroupResult(Balance_ID,Balance_Value,Balance_StartDate, Balance_ExpiryDate,balanceInput.getBEBUCKETID(),CompletedBT_ID);
										
										Map<String,List<String>> OutputDetails = new HashMap<>();
										OutputDetails = AMOutputDetails.get("AMOutputDetails");
										if(OutputDetails.containsKey("Offer"))
										{											
											BalanceOfferList.addAll(OutputDetails.get("Offer"));											
											CompletedBT_ID.addAll(OutputDetails.get("CompletedBT"));
										}																				
									}
									/*if(GroupName.startsWith("A-S-"))
									{
										Map<String,Map<String,List<String>>> AMOutputDetails = new HashMap<>();
										AMOutputDetails = populateAMGroupResult(Balance_ID,Balance_Value,Balance_StartDate, Balance_ExpiryDate,balanceInput.getBEBUCKETID(),CompletedBT_ID);
										
										Map<String,List<String>> OutputDetails = new HashMap<>();
										OutputDetails = AMOutputDetails.get("AMOutputDetails");
										if(OutputDetails.containsKey("Offer"))
										{											
											BalanceOfferList.addAll(OutputDetails.get("Offer"));											
											CompletedBT_ID.addAll(OutputDetails.get("CompletedBT"));
										}																				
									}*/
									else
									{
										GroupName = ComputeAGroup(Balance_ID,GroupName,CompletedBT_ID);
										CurrentGroupBalance.addAll(LoadSubscriberMapping.BalanceGroupingMap.get(GroupName));
									}
								}
								if(GroupName.startsWith("C-"))
								{
									GroupName = ComputeCGroup(Balance_ID,GroupName,CompletedBT_ID);
									CurrentGroupBalance.addAll(LoadSubscriberMapping.BalanceGroupingMap.get(GroupName));
								}
								if(GroupName.startsWith("F-"))
								{
									GroupName = ComputeFGroup(Balance_ID,GroupName,CompletedBT_ID);
									CurrentGroupBalance.addAll(LoadSubscriberMapping.BalanceGroupingMap.get(GroupName));
								}
								break;																
							}
						}
						
						//if(!CompletedGroup.contains(GroupName))
						{
							//System.out.println(Balance_ID + "----" +GroupName);						
							if(CurrentGroupBalance.size() > 0)
							{
								String FinalGroupName = GroupName;
								//System.out.println(FinalGroupName);	
								for(String id : CurrentGroupBalance)
								{
									//System.out.println(id);
									for(com.ericsson.jibx.beans.SubscriberXml.SchemasubscriberbalancesdumpInfo TempbalanceInput :  SortedBalanceInput){
										String TempBalance_ID = TempbalanceInput.getBALANCETYPE();
										String TempBalance_Name = TempbalanceInput.getBALANCETYPENAME();
										String TempBalance_Value = TempbalanceInput.getBEBUCKETVALUE();
										String TempBalance_StartDate = TempbalanceInput.getBEBUCKETSTARTDATE();
										String TempBalance_ExpiryDate = TempbalanceInput.getBEEXPIRY();
										//CurrentGroupBalanceID.put(TempBalance_ID + "," + TempBalance_Value + "," + TempBalance_ExpiryDate, TempbalanceInput.getBEBUCKETID());
										
										if(CompletedBT_ID.contains(TempbalanceInput.getBEBUCKETID()))
											continue;
										
										if(id.equals(TempBalance_ID))
										{
											if(LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(id + "|" + FinalGroupName) != null)
											{
												if(!TempBalance_ExpiryDate.equals(LoadSubscriberMapping.CommonConfigMap.get("Lifetime_validity_value").toString()) && CommonUtilities.convertDateToEpoch(TempBalance_ExpiryDate) < CommonUtilities.convertDateToEpoch(LoadSubscriberMapping.CommonConfigMap.get("migration_date").toString()))
												{													
													onlyLog.add("INC4001:Balance_Type expired:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TempBalance_ID + ":BE_BUCKET_VALUE=" + TempBalance_Value +  ":BE_BUCKET_ID=" + TempbalanceInput.getBEBUCKETID() +  ":BE_EXPIRY=" + TempbalanceInput.getBEEXPIRY() + ":ACTION=Logging");
													CompletedBT_ID.add(TempbalanceInput.getBEBUCKETID());
													continue;
												}
												String Offer_ID = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + FinalGroupName).getOfferID();
												String Symbol = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + FinalGroupName).getSymbols();
												String BT_Value = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + FinalGroupName).getBTValue();
												String Product_Private = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + FinalGroupName).getProductPrivate();
												String Offer_Flag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + FinalGroupName).getOfferFlag();
												String Offer_Type = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + FinalGroupName).getOfferType();
												String BT_Type = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + FinalGroupName).getBTTYPE();
												boolean startFlag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + FinalGroupName).getOfferStartDate().length() > 0 ? true:false;
												boolean expiryFalg = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + FinalGroupName).getOfferExpiryDate().length() > 0 ? true:false;
												String ExtraOffer = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + FinalGroupName).getAddOffer();
												if(LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + FinalGroupName).getOfferExpiryDate().equals("Max_Expiry_Date"))
													MaxDateFlag = true;													
												
												//ExpiryDates.add((CommonUtilities.convertDateToEpoch(TempBalance_ExpiryDate)));
												ExpiryDates.add(((TempBalance_ExpiryDate)));
												if(!ExtraOffer.isEmpty())
												{
													ExtraOfferFlag = true;
												}
												else
												{
													ExtraOffer = "";
												}
												
												if(Offer_Flag.isEmpty())
												{
													Offer_Flag = LoadSubscriberMapping.CommonConfigMap.get("default_NULL");
												}
												CompletedBT_ID.add(TempbalanceInput.getBEBUCKETID());
												CompletedGroupBT_ID.add(TempbalanceInput.getBEBUCKETID());
												if(Symbol.equals(">=") && Integer.parseInt(TempBalance_Value) >= Integer.parseInt(BT_Value))
												{
													CompletedGroup.add(FinalGroupName);
													ValidGroupBalanceOffer.add(BT_Type + ";" + TempBalance_Name + ";" + TempBalance_ID + ";" + TempBalance_Value +"|" + Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + TempBalance_StartDate + ";" + TempBalance_ExpiryDate  + ";" + Product_Private + ";" + Offer_Flag + ";" + ExtraOffer + ";" + TempbalanceInput.getBEBUCKETID());
													ValidGroupBT_ID.add(TempBalance_ID);
													if(!Offer_ID.isEmpty())
														FinalOfferList.add(BT_Type + ";" + TempBalance_Name + ";" + TempBalance_ID + ";" + TempBalance_Value +"|" + Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + TempBalance_StartDate + ";" + TempBalance_ExpiryDate  + ";" + Product_Private + ";" + Offer_Flag + ";" + ExtraOffer + ";" + TempbalanceInput.getBEBUCKETID());
													break;
												}
												else if(Symbol.equals(">") && Integer.parseInt(TempBalance_Value) > Integer.parseInt(BT_Value))
												{
													CompletedGroup.add(FinalGroupName);
													ValidGroupBalanceOffer.add(BT_Type + ";" +TempBalance_Name + ";" + TempBalance_ID + ";" + TempBalance_Value + "|" + Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + TempBalance_StartDate + ";" + TempBalance_ExpiryDate  + ";" + Product_Private + ";" + Offer_Flag + ";" + ExtraOffer + ";" + TempbalanceInput.getBEBUCKETID());
													ValidGroupBT_ID.add(TempBalance_ID);
													if(!Offer_ID.isEmpty())
														FinalOfferList.add(BT_Type + ";" + TempBalance_Name + ";" + TempBalance_ID + ";" + TempBalance_Value +"|" + Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + TempBalance_StartDate + ";" + TempBalance_ExpiryDate  + ";" + Product_Private + ";" + Offer_Flag + ";" + ExtraOffer + ";" + TempbalanceInput.getBEBUCKETID());
													break;
												}
												else if(Symbol.equals("=") && Integer.parseInt(TempBalance_Value) == Integer.parseInt(BT_Value))
												{
													CompletedGroup.add(FinalGroupName);
													ValidGroupBalanceOffer.add(BT_Type + ";" +TempBalance_Name + ";" + TempBalance_ID + ";" + TempBalance_Value + "|" + Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + TempBalance_StartDate + ";" + TempBalance_ExpiryDate  + ";" + Product_Private + ";" + Offer_Flag + ";" + ExtraOffer + ";" + TempbalanceInput.getBEBUCKETID());
													ValidGroupBT_ID.add(TempBalance_ID);
													if(!Offer_ID.isEmpty())
														FinalOfferList.add(BT_Type + ";" + TempBalance_Name + ";" + TempBalance_ID + ";" + TempBalance_Value +"|" + Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + TempBalance_StartDate + ";" + TempBalance_ExpiryDate  + ";" + Product_Private + ";" + Offer_Flag + ";" + ExtraOffer + ";" + TempbalanceInput.getBEBUCKETID());
													break;
												}
												else if(Symbol.equals("or"))
												{
													//Integer.parseInt(Balance_Value) == Integer.parseInt(BT_Value)
													String[] values = BT_Value.split("#");											
													if(Arrays.stream(values).anyMatch(TempBalance_Value::equals))
													{
														CompletedGroup.add(FinalGroupName);
														ValidGroupBalanceOffer.add(BT_Type + ";" +TempBalance_Name + ";" + TempBalance_ID + ";" + TempBalance_Value + "|" + Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + TempBalance_StartDate + ";" + TempBalance_ExpiryDate  + ";" + Product_Private + ";" + Offer_Flag + ";" + ExtraOffer + ";" + TempbalanceInput.getBEBUCKETID());
														ValidGroupBT_ID.add(TempBalance_ID);
														if(!Offer_ID.isEmpty())
															FinalOfferList.add(BT_Type + ";" + TempBalance_Name + ";" + TempBalance_ID + ";" + TempBalance_Value +"|" + Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + TempBalance_StartDate + ";" + TempBalance_ExpiryDate  + ";" + Product_Private + ";" + Offer_Flag + ";" + ExtraOffer + ";" + TempbalanceInput.getBEBUCKETID());
														break;
													}
													else
													{
														onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TempBalance_ID + ":BE_BUCKET_VALUE=" + TempBalance_Value + ":BE_BUCKET_ID=" + TempbalanceInput.getBEBUCKETID() +":ACTION=Logging");
													}														
												}
												else
												{
													//CompletedBT_ID.add(TempbalanceInput.getBEBUCKETID());
													onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TempBalance_ID + ":BE_BUCKET_VALUE=" + TempBalance_Value + ":BE_BUCKET_ID=" + TempbalanceInput.getBEBUCKETID() +":ACTION=Logging");
												}
													
											}
											/*else
											{
												//System.out.println("Discarded Logs: " + id);
												onlyLog.add("INC4004:Balance_Type lookup failed in Product_Mapping:MSISDN=" + msisdn + ":BALANCE_TYPE_ID=" + TempBalance_ID + ":BE_BUCKET_VALUE=" + TempBalance_Value + ":ACTION=Logging");
											}*/
										}
									}
								}
								
								if(FinalGroupName.startsWith("A-") && ValidGroupBalanceOffer.size() != 0)
								{
									if(ValidGroupBalanceOffer.size() == CurrentGroupBalance.size())
									{
										String TargetOffer =  ValidGroupBalanceOffer.stream().filter(item->item.startsWith("P")).collect(Collectors.toList()).get(0).split("\\|")[1];
										// Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + Balance_StartDate + ";" + Balance_ExpiryDate  + ";" + Product_Private
										ExtraOfferFlag = false;
										if(MaxDateFlag)
										{
											String ExpiryDate = ExpiryDates.stream().reduce((first, second) -> second).orElse(null);
											BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
													Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], ExpiryDate,TargetOffer.split(";")[6],TargetOffer.split(";")[7]));
										}										
										else
											BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
													Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],TargetOffer.split(";")[7]));
									
										//CompletedBT_ID.addAll(CurrentGroupBalance);									
									}
									else
									{
										//if(LoadSubscriberMapping.UniqueBalanceOnlyAMGroupMap.stream().allMatch(t -> ValidGroupBT_ID.stream().anyMatch(t::contains))) {
										if(LoadSubscriberMapping.UniqueBalanceOnlyAMGroupMap.containsAll(ValidGroupBT_ID)) 
										{
											String EXPIRY_DATE = ""; 						     //ValidGroupBalanceOffer.stream().filter(item->item.startsWith("X")).collect(Collectors.toList()).get(0).split("\\|")[1].split(";")[5];
											List<String> BT_BUCKET_ID_LIST = new ArrayList<>();  //ValidGroupBalanceOffer.stream().filter(item->item.startsWith("X")).collect(Collectors.toList()).get(0).split("\\|")[1].split(";")[9];
										
											for(String item : ValidGroupBalanceOffer)
											{
												EXPIRY_DATE = item.split("\\|")[1].split(";")[5];
												BT_BUCKET_ID_LIST.add(item.split("\\|")[1].split(";")[9]);
											}
											
											BT_BUCKET_ID_LIST.forEach(item->CompletedBT_ID.remove(item));
											
											Map<String,String> AMGroupBTs = new HashMap<>();
											for(com.ericsson.jibx.beans.SubscriberXml.SchemasubscriberbalancesdumpInfo TempbalanceInput :  SortedBalanceInput){
												String TempBalance_ID = TempbalanceInput.getBALANCETYPE();
												String TempBalance_Value = TempbalanceInput.getBEBUCKETVALUE();
												String TempBalance_ExpiryDate = TempbalanceInput.getBEEXPIRY();
												//CurrentGroupBalanceID.put(TempBalance_ID + "," + TempBalance_Value + "," + TempBalance_ExpiryDate, TempbalanceInput.getBEBUCKETID());
												
												if(CompletedBT_ID.contains(TempbalanceInput.getBEBUCKETID()))
													continue;
												if(TempBalance_ExpiryDate.equals(EXPIRY_DATE) && LoadSubscriberMapping.UniqueBalanceOnlyAMGroupMap.contains(TempBalance_ID))
												{
													AMGroupBTs.put(TempbalanceInput.getBEBUCKETID(), TempBalance_ID + "|" + TempBalance_Value);
												}
											}
											
											
											Map<String,List<String>> AMGroupOfferMap = ComputeAMGroup(AMGroupBTs, CompletedBT_ID);
											
											//Now Populate the MGroup
											if(AMGroupOfferMap.size() != 0)
											{
												for(Entry<String, List<String>> item : AMGroupOfferMap.entrySet())
												{
													String AMGroupName = item.getKey().split("\\|")[0];
													List<String> UniqueBTID = Arrays.asList(item.getKey().split("\\|")[1].split(",")); 
													List<String> ValidAMGroupBalanceOffer = item.getValue();
													
													int i = 1;
													Set<String> CompletedAMBT = new HashSet<>();
													for(String Str : ValidAMGroupBalanceOffer)
													{
														String SourceOffer = Str.split("\\|")[0];
														String TargetOffer = Str.split("\\|")[1];
														if(i <= UniqueBTID.size() && UniqueBTID.contains(SourceOffer.split(";")[2]) && !CompletedAMBT.contains(SourceOffer.split(";")[2]))
														{
															i++;
															if(TargetOffer.split(";")[0].length() != 0)
																BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
																		Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],TargetOffer.split(";")[7]));
															CompletedAMBT.add(SourceOffer.split(";")[2]);
															CompletedBT_ID.add(TargetOffer.split(";")[9]);	
														}
														else
														{
															if(LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(SourceOffer.split(";")[2] + "|M") != null)
															{
																String Offer_ID = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(SourceOffer.split(";")[2] + "|M").getOfferID();
																String Offer_Type = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(SourceOffer.split(";")[2] + "|M").getOfferType();
																String Offer_flag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(SourceOffer.split(";")[2] + "|M").getOfferFlag();
																boolean startFlag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(SourceOffer.split(";")[2] + "|M").getOfferStartDate().length() > 0 ? true:false;
																boolean expiryFalg = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(SourceOffer.split(";")[2] + "|M").getOfferExpiryDate().length() > 0 ? true:false;
																String Symbol = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(SourceOffer.split(";")[2] + "|M").getSymbols();
																String BT_VALUE = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(SourceOffer.split(";")[2] + "|M").getBTValue();
																
																if(Symbol.equals(">") && Integer.parseInt(SourceOffer.split(";")[3]) > Integer.parseInt(BT_VALUE))
																{
																	BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,TargetOffer.split(";")[4], TargetOffer.split(";")[5],"",Offer_flag));
																	trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + SourceOffer.split(";")[2] + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ TargetOffer.split(";")[9]  +":ACTION=Logging");
																}
																if(Symbol.equals(">=") && Integer.parseInt(SourceOffer.split(";")[3]) >= Integer.parseInt(BT_VALUE))
																{
																	BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,TargetOffer.split(";")[4], TargetOffer.split(";")[5],"",Offer_flag));
																	trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + SourceOffer.split(";")[2] + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ TargetOffer.split(";")[9]  +":ACTION=Logging");
																}
																if(Symbol.equals("=") && Integer.parseInt(SourceOffer.split(";")[3]) == Integer.parseInt(BT_VALUE))
																{
																	BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,TargetOffer.split(";")[4], TargetOffer.split(";")[5],"",Offer_flag));
																	trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + SourceOffer.split(";")[2] + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ TargetOffer.split(";")[9]  +":ACTION=Logging");
																}
																else
																	//onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(TargetOffer.split(";")[2] + "," + TargetOffer.split(";")[3] + "," + SourceOffer.split(";")[5])  +":ACTION=Logging");
																	onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + SourceOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + SourceOffer.split(";")[3] + ":BE_BUCKET_ID="+ TargetOffer.split(";")[9]  +":ACTION=Logging");
															}
															CompletedBT_ID.add(TargetOffer.split(";")[9]);
														}
													}													
												}
											}
											else
											{										
												for(String Str : ValidGroupBalanceOffer)
												{
													String TargetOffer = Str.split("\\|")[0];
													String SourceOffer = Str.split("\\|")[1];
													if(LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M") != null)
													{
														String Offer_ID = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferID();
														String Offer_Type = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferType();
														String Offer_flag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferFlag();
														boolean startFlag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferStartDate().length() > 0 ? true:false;
														boolean expiryFalg = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferExpiryDate().length() > 0 ? true:false;
														String Symbol = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getSymbols();
														String BT_VALUE = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getBTValue();
														
														if(Symbol.equals(">") && Integer.parseInt(TargetOffer.split(";")[3]) > Integer.parseInt(BT_VALUE))
														{
															BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,SourceOffer.split(";")[4], SourceOffer.split(";")[5],"",Offer_flag));
															trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
														}
														if(Symbol.equals(">=") && Integer.parseInt(TargetOffer.split(";")[3]) >= Integer.parseInt(BT_VALUE))
														{
															BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,SourceOffer.split(";")[4], SourceOffer.split(";")[5],"",Offer_flag));
															trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
														}
														if(Symbol.equals("=") && Integer.parseInt(TargetOffer.split(";")[3]) == Integer.parseInt(BT_VALUE))
														{
															BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,SourceOffer.split(";")[4], SourceOffer.split(";")[5],"",Offer_flag));
															trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
														}
														else
															//onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(TargetOffer.split(";")[2] + "," + TargetOffer.split(";")[3] + "," + SourceOffer.split(";")[5])  +":ACTION=Logging");
															onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
													}
													else
													{
														//onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(TargetOffer.split(";")[2] + "," + TargetOffer.split(";")[3] + "," + SourceOffer.split(";")[5])  +":ACTION=Logging");
														onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
													}
													CompletedBT_ID.add(SourceOffer.split(";")[9]);
												}
											}
										}
										else
										{
											if(LoadSubscriberMapping.BalanceAVGroupLookup.get(FinalGroupName) != null)
											{
												//ValidGroupBalanceOffer.stream().filter(item->item.startsWith("P")).count()
												if(ValidGroupBalanceOffer.size() >= 2 && ValidGroupBalanceOffer.stream().filter(item->item.startsWith("P")).count() >=1 && ValidGroupBalanceOffer.stream().filter(item->item.startsWith("V")).count() >=1){
													String TargetOffer =  ValidGroupBalanceOffer.stream().filter(item->item.startsWith("P")).collect(Collectors.toList()).get(0).split("\\|")[1];
													
													BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
															Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],TargetOffer.split(";")[7]));
													
												}
												//else if(ValidGroupBalanceOffer.size() >= 2 &&  ValidGroupBalanceOffer.stream().filter(item->item.startsWith("V")).count() >=1){
												else if(ValidGroupBalanceOffer.size() >= 2 ){
													for(String Str : ValidGroupBalanceOffer)
													{
														String TargetOffer = Str.split("\\|")[0];
														String SourceOffer = Str.split("\\|")[1];
														if(LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M") != null)
														{
															String Offer_ID = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferID();
															String Offer_Type = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferType();
															String Offer_flag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferFlag();
															boolean startFlag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferStartDate().length() > 0 ? true:false;
															boolean expiryFalg = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferExpiryDate().length() > 0 ? true:false;
															String Symbol = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getSymbols();
															String BT_VALUE = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getBTValue();
															
															if(Symbol.equals(">") && Integer.parseInt(TargetOffer.split(";")[3]) > Integer.parseInt(BT_VALUE))
															{
																BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,SourceOffer.split(";")[4], SourceOffer.split(";")[5],"",Offer_flag));
																trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
															}
															if(Symbol.equals(">=") && Integer.parseInt(TargetOffer.split(";")[3]) >= Integer.parseInt(BT_VALUE))
															{
																BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,SourceOffer.split(";")[4], SourceOffer.split(";")[5],"",Offer_flag));
																trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
															}
															if(Symbol.equals("=") && Integer.parseInt(TargetOffer.split(";")[3]) == Integer.parseInt(BT_VALUE))
															{
																BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,SourceOffer.split(";")[4], SourceOffer.split(";")[5],"",Offer_flag));
																trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
															}
															else
																//onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(TargetOffer.split(";")[2] + "," + TargetOffer.split(";")[3] + "," + SourceOffer.split(";")[5])  +":ACTION=Logging");
																onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
														}
														else
														{
															//onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(TargetOffer.split(";")[2] + "," + TargetOffer.split(";")[3] + "," + SourceOffer.split(";")[5])  +":ACTION=Logging");
															onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
														}
													}										
												}
												else if(ValidGroupBalanceOffer.size() == 1)
												{
													//BT_Type + ";" +TempBalance_Name + ";" + TempBalance_ID + ";" + TempBalance_Value + "|" + Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + TempBalance_StartDate + ";" + TempBalance_ExpiryDate  + ";" + Product_Private
													if(ValidGroupBalanceOffer.stream().filter(item->item.startsWith("P")).count() == 1 ){
														String TargetOffer =  ValidGroupBalanceOffer.stream().filter(item->item.startsWith("P")).collect(Collectors.toList()).get(0).split("\\|")[1];
														String SourceOffer = ValidGroupBalanceOffer.get(0).split("\\|")[1];
														onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
													}												
													if((ValidGroupBalanceOffer.stream().filter(item->item.startsWith("V")).count() == 1)){
														String TargetOffer =  ValidGroupBalanceOffer.get(0).split("\\|")[0];
														String SourceOffer = ValidGroupBalanceOffer.get(0).split("\\|")[1];
														if(LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M") != null)
														{
															String Offer_ID = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferID();
															String Offer_Type = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferType();
															String Offer_flag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferFlag();
															boolean startFlag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferStartDate().length() > 0 ? true:false;
															boolean expiryFalg = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferExpiryDate().length() > 0 ? true:false;
															String Symbol = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getSymbols();
															String BT_VALUE = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getBTValue();
															
															if(Symbol.equals(">") && Integer.parseInt(TargetOffer.split(";")[3]) > Integer.parseInt(BT_VALUE))
															{	
																BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,SourceOffer.split(";")[4], SourceOffer.split(";")[5],"",Offer_flag));
																trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
															}
															if(Symbol.equals(">=") && Integer.parseInt(TargetOffer.split(";")[3]) >= Integer.parseInt(BT_VALUE))
															{	
																BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,SourceOffer.split(";")[4], SourceOffer.split(";")[5],"",Offer_flag));
																trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
															}
															if(Symbol.equals("=") && Integer.parseInt(TargetOffer.split(";")[3]) == Integer.parseInt(BT_VALUE))
															{	
																BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,SourceOffer.split(";")[4], SourceOffer.split(";")[5],"",Offer_flag));
																trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
															}
															else
																//onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(TargetOffer.split(";")[2] + "," + TargetOffer.split(";")[3] + "," + SourceOffer.split(";")[5])  +":ACTION=Logging");
																onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
														}
														else
														{
															//onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(TargetOffer.split(";")[2] + "," + TargetOffer.split(";")[3] + "," + SourceOffer.split(";")[5])  +":ACTION=Logging");
															onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
														}
													}
													if((ValidGroupBalanceOffer.stream().filter(item->item.startsWith("M")).count() == 1)){
														String TargetOffer =  ValidGroupBalanceOffer.get(0).split("\\|")[0];
														String SourceOffer = ValidGroupBalanceOffer.get(0).split("\\|")[1];
														if(LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M") != null)
														{
															String Offer_ID = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferID();
															String Offer_Type = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferType();
															String Offer_flag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferFlag();
															boolean startFlag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferStartDate().length() > 0 ? true:false;
															boolean expiryFalg = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferExpiryDate().length() > 0 ? true:false;
															String Symbol = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getSymbols();
															String BT_VALUE = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getBTValue();
															
															if(Symbol.equals(">") && Integer.parseInt(TargetOffer.split(";")[3]) > Integer.parseInt(BT_VALUE))
															{	
																BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,SourceOffer.split(";")[4], SourceOffer.split(";")[5],"",Offer_flag));
																trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
															}
															else
																//onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(TargetOffer.split(";")[2] + "," + TargetOffer.split(";")[3] + "," + SourceOffer.split(";")[5])  +":ACTION=Logging");
																onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
														}
														else
														{
															//onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(TargetOffer.split(";")[2] + "," + TargetOffer.split(";")[3] + "," + SourceOffer.split(";")[5])  +":ACTION=Logging");
															onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
														}
													}
													//CompletedBT_ID.addAll(CurrentGroupBalance);
												}
											}
											else
											{
												//ValidGroupBalanceOffer.stream().filter(item->item.startsWith("P")).count()
												if(ValidGroupBalanceOffer.size() >= 2 && ValidGroupBalanceOffer.stream().filter(item->item.startsWith("P")).count() >=1 && ValidGroupBalanceOffer.stream().filter(item->item.startsWith("M")).count() >=1){
													String TargetOffer =  ValidGroupBalanceOffer.stream().filter(item->item.startsWith("P")).collect(Collectors.toList()).get(0).split("\\|")[1];
													
													BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
															Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],TargetOffer.split(";")[7]));
													
												}
												else if(ValidGroupBalanceOffer.size() >= 2 &&  ValidGroupBalanceOffer.stream().filter(item->item.startsWith("M")).count() >=1){
												
													for(String Str : ValidGroupBalanceOffer)
													{
														String TargetOffer = Str.split("\\|")[0];
														String SourceOffer = Str.split("\\|")[1];
														if(LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M") != null)
														{
															String Offer_ID = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferID();
															String Offer_Type = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferType();
															String Offer_flag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferFlag();
															boolean startFlag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferStartDate().length() > 0 ? true:false;
															boolean expiryFalg = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferExpiryDate().length() > 0 ? true:false;
															String Symbol = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getSymbols();
															String BT_VALUE = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getBTValue();
															
															if(Symbol.equals(">") && Integer.parseInt(TargetOffer.split(";")[3]) > Integer.parseInt(BT_VALUE))
															{
																BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,SourceOffer.split(";")[4], SourceOffer.split(";")[5],"",Offer_flag));
																trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
															}
															if(Symbol.equals(">=") && Integer.parseInt(TargetOffer.split(";")[3]) >= Integer.parseInt(BT_VALUE))
															{
																BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,SourceOffer.split(";")[4], SourceOffer.split(";")[5],"",Offer_flag));
																trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
															}
															if(Symbol.equals("=") && Integer.parseInt(TargetOffer.split(";")[3]) == Integer.parseInt(BT_VALUE))
															{
																BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,SourceOffer.split(";")[4], SourceOffer.split(";")[5],"",Offer_flag));
																trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
															}
															else
																//onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(TargetOffer.split(";")[2] + "," + TargetOffer.split(";")[3] + "," + SourceOffer.split(";")[5])  +":ACTION=Logging");
																onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
														}
														else
														{
															//onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(TargetOffer.split(";")[2] + "," + TargetOffer.split(";")[3] + "," + SourceOffer.split(";")[5])  +":ACTION=Logging");
															onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
														}
													}										
												}
												else if(ValidGroupBalanceOffer.size() == 1)
												{
													//BT_Type + ";" +TempBalance_Name + ";" + TempBalance_ID + ";" + TempBalance_Value + "|" + Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + TempBalance_StartDate + ";" + TempBalance_ExpiryDate  + ";" + Product_Private
													if(ValidGroupBalanceOffer.stream().filter(item->item.startsWith("P")).count() == 1 ){
														String TargetOffer =  ValidGroupBalanceOffer.stream().filter(item->item.startsWith("P")).collect(Collectors.toList()).get(0).split("\\|")[1];
														// Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + Balance_StartDate + ";" + Balance_ExpiryDate  + ";" + Product_Private
														BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
																Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],TargetOffer.split(";")[7]));
													}
													if(ValidGroupBalanceOffer.stream().filter(item->item.startsWith("M")).count() == 1){
														String TargetOffer =  ValidGroupBalanceOffer.get(0).split("\\|")[0];
														String SourceOffer = ValidGroupBalanceOffer.get(0).split("\\|")[1];
														if(LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M") != null)
														{
															String Offer_ID = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferID();
															String Offer_Type = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferType();
															String Offer_flag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferFlag();
															boolean startFlag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferStartDate().length() > 0 ? true:false;
															boolean expiryFalg = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferExpiryDate().length() > 0 ? true:false;
															String Symbol = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getSymbols();
															String BT_VALUE = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getBTValue();
															
															if(Symbol.equals(">") && Integer.parseInt(TargetOffer.split(";")[3]) > Integer.parseInt(BT_VALUE))
															{	
																BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,SourceOffer.split(";")[4], SourceOffer.split(";")[5],"",Offer_flag));
																trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
															}
															if(Symbol.equals(">=") && Integer.parseInt(TargetOffer.split(";")[3]) >= Integer.parseInt(BT_VALUE))
															{
																BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,SourceOffer.split(";")[4], SourceOffer.split(";")[5],"",Offer_flag));
																trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
															}
															if(Symbol.equals("=") && Integer.parseInt(TargetOffer.split(";")[3]) == Integer.parseInt(BT_VALUE))
															{
																BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,SourceOffer.split(";")[4], SourceOffer.split(";")[5],"",Offer_flag));
																trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
															}
															else
																//onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(TargetOffer.split(";")[2] + "," + TargetOffer.split(";")[3] + "," + SourceOffer.split(";")[5])  +":ACTION=Logging");
																onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
														}
														else
														{
															//onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(TargetOffer.split(";")[2] + "," + TargetOffer.split(";")[3] + "," + SourceOffer.split(";")[5])  +":ACTION=Logging");
															onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
														}
													}
													//CompletedBT_ID.addAll(CurrentGroupBalance);
												}
											}										
										}
									}						
								}
								if(FinalGroupName.startsWith("B-") && ValidGroupBalanceOffer.size() != 0)
								{
									if(ValidGroupBalanceOffer.size() == CurrentGroupBalance.size())
									{
										String TargetOffer =  ValidGroupBalanceOffer.stream().filter(item->item.startsWith("C")).collect(Collectors.toList()).get(0).split("\\|")[1];
										// Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + Balance_StartDate + ";" + Balance_ExpiryDate  + ";" + Product_Private
										ExtraOfferFlag = false;
										if(MaxDateFlag)
										{
											String ExpiryDate = ExpiryDates.stream().reduce((first, second) -> second).orElse(null);
											BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
													Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], ExpiryDate,TargetOffer.split(";")[6],TargetOffer.split(";")[7]));
										}										
										else
											BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
												Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],TargetOffer.split(";")[7]));
										
										//CompletedBT_ID.addAll(CurrentGroupBalance);
									}
									else
									{
										for(String Str : ValidGroupBalanceOffer)
										{
											String TargetOffer = Str.split("\\|")[0];
											String SourceOffer = Str.split("\\|")[1]; 
											//onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(TargetOffer.split(";")[2] + "," + TargetOffer.split(";")[3] + "," + SourceOffer.split(";")[5]) +":ACTION=Logging");
											onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
										}							
									}
								}
								
								if(FinalGroupName.startsWith("C-") && ValidGroupBalanceOffer.size() != 0)
								{
									if(ValidGroupBalanceOffer.size() == CurrentGroupBalance.size())
									{	
										ExtraOfferFlag = false;
										String TargetOffer =  ValidGroupBalanceOffer.stream().filter(item->item.startsWith("P")).collect(Collectors.toList()).get(0).split("\\|")[1];
										if(MaxDateFlag)
										{
											String ExpiryDate = ExpiryDates.stream().reduce((first, second) -> second).orElse(null);
											BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
													Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], ExpiryDate,TargetOffer.split(";")[6],TargetOffer.split(";")[7]));
										}										
										else
											BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
												Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],TargetOffer.split(";")[7]));
										//CompletedBT_ID.addAll(CurrentGroupBalance);
									}	
									else
									{
										//ValidGroupBalanceOffer.stream().filter(item->item.startsWith("P")).count()
										if(ValidGroupBalanceOffer.size() >= 2 && ValidGroupBalanceOffer.stream().filter(item->item.startsWith("P")).count() >=1 && ValidGroupBalanceOffer.stream().filter(item->item.startsWith("M")).count() >=1){
											String TargetOffer =  ValidGroupBalanceOffer.stream().filter(item->item.startsWith("P")).collect(Collectors.toList()).get(0).split("\\|")[1];
											// Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + Balance_StartDate + ";" + Balance_ExpiryDate  + ";" + Product_Private
											
											BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
													Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],TargetOffer.split(";")[7]));
											
											/*ValidGroupBalanceOffer.forEach(item->{
												CompletedBT_ID.add(item.split("\\|")[0].split(";")[2]);
											});*/
										}
										else if(ValidGroupBalanceOffer.size() >= 2 &&  ValidGroupBalanceOffer.stream().filter(item->item.startsWith("M")).count() >=1){
										
											for(String Str : ValidGroupBalanceOffer)
											{
												String TargetOffer =  Str.split("\\|")[0];
												String SourceOffer = Str.split("\\|")[1];
												if(LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M") != null)
												{
													String Offer_ID = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferID();
													String Offer_Type = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferType();
													boolean startFlag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferStartDate().length() > 0 ? true:false;
													boolean expiryFalg = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferExpiryDate().length() > 0 ? true:false;
													String Offer_flag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferFlag();
													String Symbol = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getSymbols();
													String BT_VALUE = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getBTValue();
													
													if(Symbol.equals(">") && Integer.parseInt(TargetOffer.split(";")[3]) > Integer.parseInt(BT_VALUE))
													{
														BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,SourceOffer.split(";")[4], SourceOffer.split(";")[5],"",Offer_flag));
														trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
													}
													if(Symbol.equals(">=") && Integer.parseInt(TargetOffer.split(";")[3]) >= Integer.parseInt(BT_VALUE))
													{
														BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,SourceOffer.split(";")[4], SourceOffer.split(";")[5],"",Offer_flag));
														trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
													}
													if(Symbol.equals("=") && Integer.parseInt(TargetOffer.split(";")[3]) == Integer.parseInt(BT_VALUE))
													{
														BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,SourceOffer.split(";")[4], SourceOffer.split(";")[5],"",Offer_flag));
														trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
													}
													else
														//onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(TargetOffer.split(";")[2] + "," + TargetOffer.split(";")[3] + "," + SourceOffer.split(";")[5])  +":ACTION=Logging");
														onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
												}
												else
												{
													//onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(TargetOffer.split(";")[2] + "," + TargetOffer.split(";")[3] + "," + SourceOffer.split(";")[5])  +":ACTION=Logging");
													onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
												}
											}										
										}
										else if(ValidGroupBalanceOffer.size() == 1)
										{
											//BT_Type + ";" +TempBalance_Name + ";" + TempBalance_ID + ";" + TempBalance_Value + "|" + Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + TempBalance_StartDate + ";" + TempBalance_ExpiryDate  + ";" + Product_Private
											if(ValidGroupBalanceOffer.stream().filter(item->item.startsWith("P")).count() == 1 ){
												String TargetOffer =  ValidGroupBalanceOffer.get(0).split("\\|")[0];
												String SourceOffer =  ValidGroupBalanceOffer.get(0).split("\\|")[1];
												//onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(TargetOffer.split(";")[2] + "," + TargetOffer.split(";")[3] + "," + SourceOffer.split(";")[5])  +":ACTION=Logging");
												onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
											}
											if(ValidGroupBalanceOffer.stream().filter(item->item.startsWith("M")).count() == 1){
												String TargetOffer =  ValidGroupBalanceOffer.get(0).split("\\|")[0];
												String SourceOffer =  ValidGroupBalanceOffer.get(0).split("\\|")[1];
												if(LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M") != null)
												{
													String Offer_ID = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferID();
													String Offer_Type = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferType();
													boolean startFlag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferStartDate().length() > 0 ? true:false;
													boolean expiryFalg = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferExpiryDate().length() > 0 ? true:false;
													String Offer_flag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferFlag();
													String Symbol = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getSymbols();
													String BT_VALUE = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getBTValue();
													
													if(Symbol.equals(">") && Integer.parseInt(TargetOffer.split(";")[3]) > Integer.parseInt(BT_VALUE))
													{
														BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,SourceOffer.split(";")[4], SourceOffer.split(";")[5],"",Offer_flag));
														trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
													}
													if(Symbol.equals(">=") && Integer.parseInt(TargetOffer.split(";")[3]) >= Integer.parseInt(BT_VALUE))
													{
														BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,SourceOffer.split(";")[4], SourceOffer.split(";")[5],"",Offer_flag));
														trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
													}
													if(Symbol.equals("=") && Integer.parseInt(TargetOffer.split(";")[3]) == Integer.parseInt(BT_VALUE))
													{
														BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,SourceOffer.split(";")[4], SourceOffer.split(";")[5],"",Offer_flag));
														trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
													}
													else
														//onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(TargetOffer.split(";")[2] + "," + TargetOffer.split(";")[3] + "," + SourceOffer.split(";")[5])  +":ACTION=Logging");
														onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
												}
												else
												{													
													//onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(TargetOffer.split(";")[2] + "," + TargetOffer.split(";")[3] + "," + SourceOffer.split(";")[5])  +":ACTION=Logging");
													onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
												}
											}										
										}
										//CompletedBT_ID.addAll(CurrentGroupBalance);
									}								
								}
								if(FinalGroupName.startsWith("D-") && ValidGroupBalanceOffer.size() != 0)
								{
									if(ValidGroupBalanceOffer.size() == CurrentGroupBalance.size())
									{		
										ExtraOfferFlag = false;
										String TargetOffer =  ValidGroupBalanceOffer.stream().filter(item->item.startsWith("C")).collect(Collectors.toList()).get(0).split("\\|")[1];
										if(MaxDateFlag)
										{
											String ExpiryDate = ExpiryDates.stream().reduce((first, second) -> second).orElse(null);
											BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
													Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], ExpiryDate,TargetOffer.split(";")[6],TargetOffer.split(";")[7]));
										}										
										else
											BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
												Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],TargetOffer.split(";")[7]));
										//CompletedBT_ID.addAll(CurrentGroupBalance);
									}	
									else
									{
										for(String Str : ValidGroupBalanceOffer)
										{
											String TargetOffer =  Str.split("\\|")[0];
											String SourceOffer =  Str.split("\\|")[1];
											if(LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M") != null)
											{
												String Offer_ID = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferID();
												String Offer_Type = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferType();
												String Offer_flag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferFlag();
												boolean startFlag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferStartDate().length() > 0 ? true:false;
												boolean expiryFalg = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferExpiryDate().length() > 0 ? true:false;
												String Symbol = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getSymbols();
												String BT_VALUE = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getBTValue();
												
												if(Symbol.equals(">") && Integer.parseInt(TargetOffer.split(";")[3]) > Integer.parseInt(BT_VALUE))
												{
													BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,SourceOffer.split(";")[4], SourceOffer.split(";")[5],"",Offer_flag));
													trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
												}
												if(Symbol.equals(">=") && Integer.parseInt(TargetOffer.split(";")[3]) >= Integer.parseInt(BT_VALUE))
												{
													BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,SourceOffer.split(";")[4], SourceOffer.split(";")[5],"",Offer_flag));
													trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
												}
												if(Symbol.equals("=") && Integer.parseInt(TargetOffer.split(";")[3]) == Integer.parseInt(BT_VALUE))
												{
													BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,SourceOffer.split(";")[4], SourceOffer.split(";")[5],"",Offer_flag));
													trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
												}
												else
													//onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(TargetOffer.split(";")[2] + "," + TargetOffer.split(";")[3] + "," + SourceOffer.split(";")[5])  +":ACTION=Logging");
													onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
											}
											else
											{												
												//onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(TargetOffer.split(";")[2] + "," + TargetOffer.split(";")[3] + "," + SourceOffer.split(";")[5])  +":ACTION=Logging");
												onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
											}
										}		
									}
								}
								if(FinalGroupName.startsWith("F-") && ValidGroupBalanceOffer.size() != 0)
								{
									if(ValidGroupBalanceOffer.size() == CurrentGroupBalance.size())
									{	
										ExtraOfferFlag = false;
										//the reason for putting code in catch is some group doesn't have P so in that group check for M 
										//BT_Type + ";" +TempBalance_Name + ";" + TempBalance_ID + ";" + TempBalance_Value + "|" + Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + TempBalance_StartDate + ";" + TempBalance_ExpiryDate  + ";" + Product_Private + ";" + Offer_Flag + ";" + ExtraOffer
										for(String OfferValue : FinalOfferList)
										{
											String OfferId = OfferValue.split("\\|",-1)[1].split(";",-1)[0];
											if(!OfferId.isEmpty())
											{
												String TargetOffer = OfferValue.split("\\|",-1)[1];
												if(OfferValue.split("\\|",-1)[0].split(";",-1)[0].equals("S"))
												{													
													for(int i = 0; i < Integer.parseInt(OfferValue.split("\\|",-1)[0].split(";",-1)[3]); i++)
													{
														if(MaxDateFlag)
														{
															String ExpiryDate = ExpiryDates.stream().reduce((first, second) -> second).orElse(null);
															BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
																	Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], ExpiryDate,TargetOffer.split(";")[6],TargetOffer.split(";")[7]));
														}										
														else
															BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
																Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],TargetOffer.split(";")[7]));
														//CompletedBT_ID.addAll(CurrentGroupBalance);
													}
												}
												else
												{
													BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
															Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],TargetOffer.split(";")[7]));
												}
											}
										}										
									}
									else
									{
										String MPresent = ValidGroupBalanceOffer.stream().filter(item->item.startsWith("M")).findFirst().orElse(null);
										if(MPresent != null)
										{
											if(ValidGroupBalanceOffer.size() == 1 && FinalOfferList.size() == 0)
											{
												String GroupLastChar = FinalGroupName.substring(FinalGroupName.lastIndexOf('-')+1,FinalGroupName.length());
												String MasterGroupName = FinalGroupName.replace(GroupLastChar, "M");
												String BT_ID = MPresent.split("\\|")[0].split(";")[2];
												String SourceBT_Value = MPresent.split("\\|")[0].split(";")[3];
												String BT_StartDate  = MPresent.split("\\|")[1].split(";")[4];
												String BT_ExpiryDate  = MPresent.split("\\|")[1].split(";")[5];
												String BucketID = MPresent.split("\\|")[1].split(";")[9];
												if(LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(BT_ID + "|" + MasterGroupName) != null)
												{
													String Offer_ID = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(BT_ID + "|" + MasterGroupName).getOfferID();
													String Offer_Type = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(BT_ID + "|" + MasterGroupName).getOfferType();
													String Offer_flag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(BT_ID + "|" + MasterGroupName).getOfferFlag();
													boolean startFlag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(BT_ID + "|" + MasterGroupName).getOfferStartDate().length() > 0 ? true:false;
													boolean expiryFalg = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(BT_ID + "|" + MasterGroupName).getOfferExpiryDate().length() > 0 ? true:false;
													String Symbol = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(BT_ID + "|" + MasterGroupName).getSymbols();
													String BT_VALUE = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(BT_ID + "|" + MasterGroupName).getBTValue();
													String BT_Type = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(BT_ID + "|" + MasterGroupName).getBTTYPE();
													boolean bCreateOffer = false;
													if(Symbol.equals(">=") && Integer.parseInt(SourceBT_Value) >= Integer.parseInt(BT_VALUE))
														bCreateOffer = true;
													else if(Symbol.equals(">") && Integer.parseInt(SourceBT_Value) > Integer.parseInt(BT_VALUE))
														bCreateOffer = true;
													else if(Symbol.equals("=") && Integer.parseInt(SourceBT_Value) == Integer.parseInt(BT_VALUE))
														bCreateOffer = true;
													else
													{
														//onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + BT_ID + ":BE_BUCKET_VALUE=" + SourceBT_Value + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(BT_ID + "," + SourceBT_Value + "," + BT_ExpiryDate)  +":ACTION=Logging");
														onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + BT_ID + ":BE_BUCKET_VALUE=" + SourceBT_Value + ":BE_BUCKET_ID="+ BucketID  +":ACTION=Logging");
														break;
													}
													if(BT_Type.equals("M") && bCreateOffer)
													{														
														BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,BT_StartDate, BT_ExpiryDate,"",Offer_flag));
														trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + BT_ID + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ BucketID  +":ACTION=Logging");
													}
													else if(BT_Type.equals("S") && bCreateOffer)
													{
														for(int i = 0; i < Integer.parseInt(SourceBT_Value); i++)
														{
															BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,BT_StartDate, BT_ExpiryDate,"",Offer_flag));
															trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + BT_ID + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ BucketID  +":ACTION=Logging");
														}
													}
												}
												else
												{												
													//onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + BT_ID + ":BE_BUCKET_VALUE=" + SourceBT_Value + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(BT_ID + "," + SourceBT_Value + "," + BT_ExpiryDate)  +":ACTION=Logging");
													onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + BT_ID + ":BE_BUCKET_VALUE=" + SourceBT_Value + ":BE_BUCKET_ID="+ BucketID  +":ACTION=Logging");
												}												
											}
											else
											{
												String PCPresent = ValidGroupBalanceOffer.stream().filter(item->item.startsWith("P")).findFirst().orElse(null);
												if(PCPresent == null)
												{
													String GroupLastChar = FinalGroupName.substring(FinalGroupName.lastIndexOf('-')+1,FinalGroupName.length());
													String MasterGroupName = FinalGroupName.replace(GroupLastChar, "M");
													for(String OfferValue : ValidGroupBalanceOffer)
													{
														String BT_ID = OfferValue.split("\\|")[0].split(";")[2];
														String SourceBT_Value = OfferValue.split("\\|")[0].split(";")[3];
														String BT_StartDate  = OfferValue.split("\\|")[1].split(";")[4];
														String BT_ExpiryDate  = OfferValue.split("\\|")[1].split(";")[5];
														String BucketID = OfferValue.split("\\|")[1].split(";")[9];
														if(LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(BT_ID + "|" + MasterGroupName) != null)
														{
															String Offer_ID = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(BT_ID + "|" + MasterGroupName).getOfferID();
															String Offer_Type = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(BT_ID + "|" + MasterGroupName).getOfferType();
															String Offer_flag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(BT_ID + "|" + MasterGroupName).getOfferFlag();
															boolean startFlag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(BT_ID + "|" + MasterGroupName).getOfferStartDate().length() > 0 ? true:false;
															boolean expiryFalg = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(BT_ID + "|" + MasterGroupName).getOfferExpiryDate().length() > 0 ? true:false;
															String Symbol = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(BT_ID + "|" + MasterGroupName).getSymbols();
															String BT_VALUE = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(BT_ID + "|" + MasterGroupName).getBTValue();
															String BT_Type = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(BT_ID + "|" + MasterGroupName).getBTTYPE();
															boolean bCreateOffer = false;
															if(Symbol.equals(">=") && Integer.parseInt(SourceBT_Value) >= Integer.parseInt(BT_VALUE))
																bCreateOffer = true;
															else if(Symbol.equals(">") && Integer.parseInt(SourceBT_Value) > Integer.parseInt(BT_VALUE))
																bCreateOffer = true;
															else if(Symbol.equals("=") && Integer.parseInt(SourceBT_Value) == Integer.parseInt(BT_VALUE))
																bCreateOffer = true;
															else
															{
																//onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + BT_ID + ":BE_BUCKET_VALUE=" + SourceBT_Value + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(BT_ID + "," + SourceBT_Value + "," + BT_ExpiryDate)  +":ACTION=Logging");
																onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + BT_ID + ":BE_BUCKET_VALUE=" + SourceBT_Value + ":BE_BUCKET_ID="+ BucketID  +":ACTION=Logging");
																break;
															}
															if(BT_Type.equals("M") && bCreateOffer)
															{														
																BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,BT_StartDate, BT_ExpiryDate,"",Offer_flag));
																trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + BT_ID + ":OFFER_ID=" + Offer_ID +  ":BE_BUCKET_ID="+ BucketID  +":ACTION=Logging");
															}
															else if(BT_Type.equals("S") && bCreateOffer)
															{
																for(int i = 0; i < Integer.parseInt(SourceBT_Value); i++)
																{
																	BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,BT_StartDate, BT_ExpiryDate,"",Offer_flag));
																	trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + BT_ID + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ BucketID  +":ACTION=Logging");
																}
															}
														}
														else
														{												
															//onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + BT_ID + ":BE_BUCKET_VALUE=" + SourceBT_Value + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(BT_ID + "," + SourceBT_Value + "," + BT_ExpiryDate)  +":ACTION=Logging");
															onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + BT_ID + ":BE_BUCKET_VALUE=" + SourceBT_Value + ":BE_BUCKET_ID="+ BucketID  +":ACTION=Logging");
														}
													}
												}
												else
												{												
													for(String OfferValue : FinalOfferList)
													{
														String OfferId = OfferValue.split("\\|",-1)[1].split(";",-1)[0];
														if(!OfferId.isEmpty())
														{
															String TargetOffer = OfferValue.split("\\|",-1)[1];
															if(OfferValue.split("\\|",-1)[0].split(";",-1)[0].equals("S"))
															{													
																for(int i = 0; i < Integer.parseInt(OfferValue.split("\\|",-1)[0].split(";",-1)[3]); i++)
																{
																	BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
																			Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],TargetOffer.split(";")[7]));
																	//CompletedBT_ID.addAll(CurrentGroupBalance);
																}
															}
															else
															{
																BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
																		Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],TargetOffer.split(";")[7]));
															}
														}
													}	
												}
											}											
										}
										else
										{
											for(String OfferValue : FinalOfferList)
											{												
												//String TargetOffer = OfferValue.split("\\|",-1)[0];
												//String SourceOffer = OfferValue.split("\\|",-1)[1];
												String GroupLastChar = FinalGroupName.substring(FinalGroupName.lastIndexOf('-')+1,FinalGroupName.length());
												String MasterGroupName = FinalGroupName.replace(GroupLastChar, "M");
												
												
												String BT_ID = OfferValue.split("\\|")[0].split(";")[2];
												String SourceBT_Value = OfferValue.split("\\|")[0].split(";")[3];
												String BT_StartDate  = OfferValue.split("\\|")[1].split(";")[4];
												String BT_ExpiryDate  = OfferValue.split("\\|")[1].split(";")[5];
												String BucketID = OfferValue.split("\\|")[1].split(";")[9];
												if(LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(BT_ID + "|" + MasterGroupName) != null)
												{
													String Offer_ID = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(BT_ID + "|" + MasterGroupName).getOfferID();
													String Offer_Type = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(BT_ID + "|" + MasterGroupName).getOfferType();
													String Offer_flag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(BT_ID + "|" + MasterGroupName).getOfferFlag();
													boolean startFlag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(BT_ID + "|" + MasterGroupName).getOfferStartDate().length() > 0 ? true:false;
													boolean expiryFalg = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(BT_ID + "|" + MasterGroupName).getOfferExpiryDate().length() > 0 ? true:false;
													String Symbol = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(BT_ID + "|" + MasterGroupName).getSymbols();
													String BT_VALUE = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(BT_ID + "|" + MasterGroupName).getBTValue();
													String BT_Type = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(BT_ID + "|" + MasterGroupName).getBTTYPE();
													boolean bCreateOffer = false;
													if(Symbol.equals(">=") && Integer.parseInt(SourceBT_Value) >= Integer.parseInt(BT_VALUE))
														bCreateOffer = true;
													else if(Symbol.equals(">") && Integer.parseInt(SourceBT_Value) > Integer.parseInt(BT_VALUE))
														bCreateOffer = true;
													else if(Symbol.equals("=") && Integer.parseInt(SourceBT_Value) == Integer.parseInt(BT_VALUE))
														bCreateOffer = true;
													else
													{
														//onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + BT_ID + ":BE_BUCKET_VALUE=" + SourceBT_Value + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(BT_ID + "," + SourceBT_Value + "," + BT_ExpiryDate)  +":ACTION=Logging");
														onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + BT_ID + ":BE_BUCKET_VALUE=" + SourceBT_Value + ":BE_BUCKET_ID="+ BucketID  +":ACTION=Logging");
														break;
													}
													if(bCreateOffer)
													{
														for(int i = 0; i < Integer.parseInt(SourceBT_Value); i++)
														{
															BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,BT_StartDate, BT_ExpiryDate,"",Offer_flag));
															trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + BT_ID + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ BucketID  +":ACTION=Logging");
														}
													}
												}
												//onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ SourceOffer.split(";")[0]  +":ACTION=Logging");
											}
										}
									}
								}
								
								if(ExtraOfferFlag)
								{	
									ExtraOfferFlag = false;
									for(String s: ValidGroupBalanceOffer)
									{
										if(s.split("\\|")[1].split(";").length > 8)
										{
											String AddedOffer= s.split("\\|")[1].split(";")[8];
											if(!AddedOffer.isEmpty())
											{
												String[] ListofAddedOffer;
												if(AddedOffer.contains(":"))
													ListofAddedOffer = AddedOffer.split(":")[0].split("\\|");
												else
													ListofAddedOffer = AddedOffer.split("\\|");
												
												for(int i = 0; i<ListofAddedOffer.length; i++)
												{
													if(ListofAddedOffer[i].length() > 1)
													{
														String[] OfferValues = ListofAddedOffer[i].split("-");
														//String offer_ID,String Offer_Type, boolean startFlag, boolean expiryFlag, 
														//String Balance_StartDate, String Balance_ExpiryDate, String Product_Private, String flag)
														String Timer = OfferValues[0];
														String Product_Private = OfferValues[1];
														String Offer_ID = OfferValues[2];
														String Start_Date = "";
														String End_Date = "";
														if(OfferValues[3].equals("MIGDATE"))
															Start_Date = sdfDaily.format(currDate);
														
														if(OfferValues[4].startsWith("MIGDATE"))
														{
															int hours2Add = Integer.parseInt(OfferValues[4].replace("MIGDATE+", ""));
															Date NewDate = new Date(currDate.getTime() + hours2Add *3600*1000);
															End_Date = sdfDaily.format(NewDate);
														}														
														BalanceOfferList.add(PopulateOffer(Offer_ID,Timer,true,true ,Start_Date, End_Date,"",""));
													}											 
												}
											}
										}
									}
									ExtraOfferFlag = false;
								}
								
							//need to put code till here
							}
							else
							{
								CompletedBT_ID.add(balanceInput.getBEBUCKETID());
								onlyLog.add("INC4002:Balance_Type lookup failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + Balance_ID + ":BE_BUCKET_VALUE=" + Balance_Value + ":BE_BUCKET_ID=" + balanceInput.getBEBUCKETID() +":ACTION=Logging");
							}						
						}
					}				
				}
			}
		}		
		//CompletedBT_ID.forEach((k->System.out.println(k)));
		
		//return BalanceOfferList.stream().distinct().collect(Collectors.toList());
		return BalanceOfferList;
	}
	
	private List<String> OfferFromCISRECBalanceMapping()
	{
		Date currDate = new Date();
		SimpleDateFormat sdfDaily = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		List<String> BalanceOfferList =new ArrayList<>();
		Set<String> CompletedGroup = new HashSet<>();
		
		Set<String> CompletedBT_ID = new HashSet<>();
		Set<String> CompletedGroupBT_ID = new HashSet<>();
		
		//System.out.println(CommonUtilities.convertDateToEpoch(LoadSubscriberMapping.CommonConfigMap.get("migration_date").toString()));
		
		for(com.ericsson.jibx.beans.SubscriberXml.SchemasubscriberbalancesdumpInfo balanceInput : SortedBalanceInput)
		{			
			String Balance_ID = balanceInput.getBALANCETYPE();
			//System.out.println("Master Balance_ID: " + Balance_ID);
			String Balance_Value = balanceInput.getBEBUCKETVALUE();
			String Balance_StartDate = balanceInput.getBEBUCKETSTARTDATE();
			String Balance_ExpiryDate = balanceInput.getBEEXPIRY();
			CompletedGroupBT_ID.clear();
			if(CompletedBT_ID.contains(balanceInput.getBEBUCKETID()))
				continue;
			
			if((LoadSubscriberMapping.ProductMappingIgnoreFlag.get(Balance_ID) != null) && LoadSubscriberMapping.ProductMappingIgnoreFlag.get(Balance_ID) == "Y")
			{
				//onlyLog.add("INC4003:Balance_Type Ignored:MSISDN=" + msisdn + ":BALANCE_TYPE=" + Balance_ID + ":BE_BUCKET_VALUE=" + Balance_Value +  ":BE_BUCKET_ID=" + balanceInput.getBEBUCKETID() +  ":BE_EXPIRY=" + balanceInput.getBEEXPIRY() + ":ACTION=Logging");
				CompletedBT_ID.add(balanceInput.getBEBUCKETID());
				continue;
			}
			//Check for expiry Date, log it and proceed further
			if(!Balance_ExpiryDate.equals(LoadSubscriberMapping.CommonConfigMap.get("Lifetime_validity_value").toString()) && CommonUtilities.convertDateToEpoch(Balance_ExpiryDate) < CommonUtilities.convertDateToEpoch(LoadSubscriberMapping.CommonConfigMap.get("migration_date").toString()))
			{
				//INC4001	Balance_Type expired	MSISDN,BALANCE_TYPE,BE_BUCKET_VALUE,BE_BUCKET_ID,BE_EXPIRY
				//onlyLog.add("INC4001:Balance_Type expired:MSISDN=" + msisdn + ":BALANCE_TYPE=" + Balance_ID + ":BE_BUCKET_VALUE=" + Balance_Value +  ":BE_BUCKET_ID=" + balanceInput.getBEBUCKETID() +  ":BE_EXPIRY=" + balanceInput.getBEEXPIRY() + ":ACTION=Logging");
				CompletedBT_ID.add(balanceInput.getBEBUCKETID());
			}
			else
			{
				if(LoadSubscriberMapping.SpecialCISRECBalance.get(Balance_ID) != null)
				{
					String Offer_ID = LoadSubscriberMapping.SpecialCISRECBalance.get(Balance_ID).getOfferID();
					String Symbol = LoadSubscriberMapping.SpecialCISRECBalance.get(Balance_ID).getSymbols();
					String BT_Value = LoadSubscriberMapping.SpecialCISRECBalance.get(Balance_ID).getBTValue();
					String Product_Private = LoadSubscriberMapping.SpecialCISRECBalance.get(Balance_ID).getProductPrivate();
					String Offer_Type = LoadSubscriberMapping.SpecialCISRECBalance.get(Balance_ID).getOfferType();
					boolean startFlag = LoadSubscriberMapping.SpecialCISRECBalance.get(Balance_ID).getOfferStartDate().length() > 0 ? true:false;
					boolean expiryFalg = LoadSubscriberMapping.SpecialCISRECBalance.get(Balance_ID).getOfferExpiryDate().length() > 0 ? true:false;
									
					if(!Offer_ID.isEmpty())
					{					
					
						if(Symbol.equals(">=") && Integer.parseInt(Balance_Value) >= Integer.parseInt(BT_Value))
							BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,Product_Private,""));
						else if(Symbol.equals(">") && Integer.parseInt(Balance_Value) > Integer.parseInt(BT_Value))
							BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,Product_Private,""));
						else if(Symbol.equals("=") && Integer.parseInt(Balance_Value) == Integer.parseInt(BT_Value))
							BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,Product_Private,""));
						else if(Symbol.equals("or"))
						{
							//Integer.parseInt(Balance_Value) == Integer.parseInt(BT_Value)
							String[] values = BT_Value.split("#");
							
							if(Arrays.stream(values).anyMatch(Balance_Value::equals))
							{
								BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,Product_Private,""));
							}
						}
							//onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + Balance_ID + ":BE_BUCKET_VALUE=" + Balance_Value + ":BE_BUCKET_ID=" + balanceInput.getBEBUCKETID() +":ACTION=Logging");
						CompletedBT_ID.add(balanceInput.getBEBUCKETID());
					
					}
				}
			}
		}
		return BalanceOfferList;
	}
	
	private List<String> offerFromLifeCycle()
	{
		List<String> LifeCycleOfferList = new ArrayList<>();
		
		String serviceClass = subscriber.getSubscriberInfoSERVICESTATE();
		String INITIAL_ACTIVATION_DATE_FLAG;
				
		if(INITIAL_ACTIVATION_DATE.length() == 0)
			INITIAL_ACTIVATION_DATE_FLAG = "Y";
		else
			INITIAL_ACTIVATION_DATE_FLAG = "N";
		
		String Offer_ID = "", Offer_Type = "";
				
		if( serviceClass.equals("S") && INITIAL_ACTIVATION_DATE_FLAG == "N")
		{
			Offer_ID = LoadSubscriberMapping.LifeCycleMap.get(serviceClass+"|"+INITIAL_ACTIVATION_DATE_FLAG +"|N").split(",")[11];
			Offer_Type = LoadSubscriberMapping.LifeCycleMap.get(serviceClass+"|"+INITIAL_ACTIVATION_DATE_FLAG +"|N").split(",")[12];
		}
		
		if( serviceClass.equals("F") && INITIAL_ACTIVATION_DATE_FLAG == "N")
		{
			Offer_ID = LoadSubscriberMapping.LifeCycleMap.get(serviceClass+"|"+INITIAL_ACTIVATION_DATE_FLAG +"|N").split(",")[11];
			Offer_Type = LoadSubscriberMapping.LifeCycleMap.get(serviceClass+"|"+INITIAL_ACTIVATION_DATE_FLAG +"|N").split(",")[12];
		}
		
		if( serviceClass.equals("D") && INITIAL_ACTIVATION_DATE_FLAG == "N")
		{
			Offer_ID = LoadSubscriberMapping.LifeCycleMap.get(serviceClass+"|"+INITIAL_ACTIVATION_DATE_FLAG +"|N").split(",")[11];
			Offer_Type = LoadSubscriberMapping.LifeCycleMap.get(serviceClass+"|"+INITIAL_ACTIVATION_DATE_FLAG +"|N").split(",")[12];
		}
		
		if(Offer_ID.length() > 0)
		{
			StringBuffer sb = new StringBuffer();
			sb.append(msisdn).append(",");
			sb.append(Offer_ID).append(",");
			sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_NULL")).append(",");
			sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_NULL")).append(",");
			sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_NULL")).append(",");
			sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_NULL")).append(",");
			sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_NULL")).append(",");
			sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_NULL")).append(",");
			sb.append("toBePopulated");
			
			LifeCycleOfferList.add(sb.toString());
			sb =null;
		}
		
		return LifeCycleOfferList;
	}
	
	private List<String> offerFromProfileTag()
	{
		List<String> ProfileTagOfferList = new ArrayList<>();
		Date currDate = new Date();
		SimpleDateFormat sdfDaily = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		
		if(subscriber.getProfiledumpInfoList().size() == 0)
			return ProfileTagOfferList;
		
		for(String itr : LoadSubscriberMapping.Profile_Tags_Mapping.keySet())
		{
			PROFILETAGINFO profileMappingValue = LoadSubscriberMapping.Profile_Tags_Mapping.get(itr);
			String Symbol = profileMappingValue.getSymbols1();
			String TargetValue = profileMappingValue.getProfileTagValue();
			String IgnoreFlag =  profileMappingValue.getIgnoreFlag();
			if(IgnoreFlag.equals("N"))
			{
				if(itr.equals("CVMCounter") && subscriber.getProfiledumpInfoList().get(0).getCVMCounter().length() != 0)
				{
					if(Symbol.equals(">") &&  Long.parseLong(subscriber.getProfiledumpInfoList().get(0).getCVMCounter()) > Long.parseLong(TargetValue))
					{	
						String EndDate = subscriber.getProfiledumpInfoList().get(0).getLastChangeDateExpiry();
						String CurrectStartDate = "";
						if(!EndDate.isEmpty() && EndDate.length() == 14)
							CurrectStartDate = EndDate.substring(0,4) + "-" + EndDate.substring(4,6) + "-" + EndDate.substring(6,8) + " " + EndDate.substring(8,10) + ":" + EndDate.substring(10,12) + ":" + EndDate.substring(12,14);
						ProfileTagOfferList.add(populateProfileOffer(profileMappingValue.getOfferId(),"",CurrectStartDate));
					}
				}
				if(itr.equals("TopXCountr1"))
				{
					if(Symbol.equals("=") && TargetValue.equals(subscriber.getProfiledumpInfoList().get(0).getTopXCountr1()))
					{
						ProfileTagOfferList.add(populateProfileOffer(profileMappingValue.getOfferId(),"",""));
					}
				}
				if(itr.equals("TopXCountr2"))
				{
					if(Symbol.equals("=") && TargetValue.equals(subscriber.getProfiledumpInfoList().get(0).getTopXCountr2()))
					{
						ProfileTagOfferList.add(populateProfileOffer(profileMappingValue.getOfferId(),"",""));
					}
				}
				if(itr.equals("TopXCountr3"))
				{
					if(Symbol.equals("=") && TargetValue.equals(subscriber.getProfiledumpInfoList().get(0).getTopXCountr3()))
					{
						ProfileTagOfferList.add(populateProfileOffer(profileMappingValue.getOfferId(),"",""));
					}
				}
				if(itr.equals("TopXCountr4"))
				{
					if(Symbol.equals("=") && TargetValue.equals(subscriber.getProfiledumpInfoList().get(0).getTopXCountr4()))
					{
						ProfileTagOfferList.add(populateProfileOffer(profileMappingValue.getOfferId(),"",""));
					}
				}
				if(itr.equals("Prepaid"))
				{
					if(Symbol.equals("=") && TargetValue.equals(subscriber.getProfiledumpInfoList().get(0).getPrepaid()))
					{
						ProfileTagOfferList.add(populateProfileOffer(profileMappingValue.getOfferId(),"",""));
					}
				}
				if(itr.equals("entBsnssCrclActv"))
				{			   
					if(Symbol.equals("=") && TargetValue.equals(subscriber.getProfiledumpInfoList().get(0).getEntBsnssCrclActv()))
					{
						ProfileTagOfferList.add(populateProfileOffer(profileMappingValue.getOfferId(),"",""));
					}
				}
				if(itr.equals("Plan"))
				{			   
					if(Symbol.equals("=") && TargetValue.equals(subscriber.getProfiledumpInfoList().get(0).getPlan()))
					{
						ProfileTagOfferList.add(populateProfileOffer(profileMappingValue.getOfferId(),"",""));
					}
				}
				if(itr.equals("IDD2Act"))
				{			   
					if(Symbol.equals("=") && TargetValue.equals(subscriber.getProfiledumpInfoList().get(0).getIDD2Act()))
					{
						ProfileTagOfferList.add(populateProfileOffer(profileMappingValue.getOfferId(),"",""));
					}
				}
				if(itr.equals("IDDCutRateAct"))
				{			   
					if(Symbol.equals("=") && TargetValue.equals(subscriber.getProfiledumpInfoList().get(0).getIDDCutRateAct()))
					{			
						//YYYYMMDDHRMMSS to yyyy-MM-dd HH:mm:ss
						String StartDate = subscriber.getProfiledumpInfoList().get(0).getIDDCutRateActDate();
						String CurrectStartDate = "";
						if(!StartDate.isEmpty() && StartDate.length() == 14)
							CurrectStartDate = StartDate.substring(0,4) + "-" + StartDate.substring(4,6) + "-" + StartDate.substring(6,8) + " " + StartDate.substring(8,10) + ":" + StartDate.substring(10,12) + ":" + StartDate.substring(12,14);
						ProfileTagOfferList.add(populateProfileOffer(profileMappingValue.getOfferId(),CurrectStartDate,profileMappingValue.getOfferEnd()));						
					}
				}
				if(itr.equals("EmiratiPlan"))
				{			   
					if(Symbol.equals("=") && TargetValue.equals(subscriber.getProfiledumpInfoList().get(0).getEmiratiPlan()))
					{
						ProfileTagOfferList.add(populateProfileOffer(profileMappingValue.getOfferId(),"",""));
					}
				}
				if(itr.equals("Absher"))
				{			   
					if(Symbol.equals("=") && TargetValue.equals(subscriber.getProfiledumpInfoList().get(0).getAbsher()))
					{
						ProfileTagOfferList.add(populateProfileOffer(profileMappingValue.getOfferId(),"",""));
					}
				}
				//Added code for PA12, need to uncomment when profile tag is present.
				
				if(itr.equals("Bespoke"))
				{
					if(Symbol.equals("=") && TargetValue.equals(subscriber.getProfiledumpInfoList().get(0).getBespoke()))
					{
						ProfileTagOfferList.add(populateProfileOffer(profileMappingValue.getOfferId(),"",""));
					}
				}
				if(itr.equals("MBBGraceAct"))
				{
					if(Symbol.equals("=") && TargetValue.equals(subscriber.getProfiledumpInfoList().get(0).getMBBGraceAct()))
					{
						String EndDate = subscriber.getProfiledumpInfoList().get(0).getMBBGraceEnd();
						String CurrectEndDate = "";
						if(!EndDate.isEmpty() && EndDate.length() == 14)
							CurrectEndDate = EndDate.substring(0,4) + "-" + EndDate.substring(4,6) + "-" + EndDate.substring(6,8) + " " + EndDate.substring(8,10) + ":" + EndDate.substring(10,12) + ":" + EndDate.substring(12,14);
						ProfileTagOfferList.add(populateProfileOffer(profileMappingValue.getOfferId(),"",CurrectEndDate));
					}
				}
				if(itr.equals("TP_Social_Deact_Conf"))
				{
					if(Symbol.equals("=") && TargetValue.equals(subscriber.getProfiledumpInfoList().get(0).getTPSocialDeactConf()))
					{
						ProfileTagOfferList.add(populateProfileOffer(profileMappingValue.getOfferId(),"",""));
					}
				}
				if(itr.equals("DataGraceAct"))
				{
					if(Symbol.equals("=") && TargetValue.equals(subscriber.getProfiledumpInfoList().get(0).getDataGraceAct()))
					{
						ProfileTagOfferList.add(populateProfileOffer(profileMappingValue.getOfferId(),"",""));
					}
				}
				
				/*if(itr.equals("PAYGMet"))
				{			   
					if(Symbol.equals("=") && TargetValue.equals(subscriber.getProfiledumpInfoList().get(0).getPAYGMet()))
					{
						String BalanceID = profileMappingValue.getBTPERIODICCHARGEID();
						String Symbol2 =  profileMappingValue.getSymbols2();
						if(LoadSubscriberMapping.ProfileBalancesIDDetails.containsKey(BalanceID))
						{
							String BT_Value = LoadSubscriberMapping.ProfileBalancesIDDetails.get(BalanceID).split("\\|")[0];
							String StartDate_Value = LoadSubscriberMapping.ProfileBalancesIDDetails.get(BalanceID).split("\\|")[1];
							String EndDate_Value = LoadSubscriberMapping.ProfileBalancesIDDetails.get(BalanceID).split("\\|")[2];
							
							String referenceBalanceID = profileMappingValue.getPCBTValue();
							if(Symbol2.equals(">=") && Integer.parseInt(BT_Value) >= Integer.parseInt(referenceBalanceID))
								ProfileTagOfferList.add(populateProfileOffer(profileMappingValue.getOfferId(),StartDate_Value,EndDate_Value));
						}						
					}
				}
				if(itr.equals("SmsBndl1Recur"))
				{			   
					if(Symbol.equals("=") && (TargetValue.equals("F") || TargetValue.equals("T")))
					{
						String BalanceID = profileMappingValue.getBTPERIODICCHARGEID();
						String Symbol2 =  profileMappingValue.getSymbols2();
						if(LoadSubscriberMapping.ProfileBalancesIDDetails.containsKey(BalanceID))
						{
							String BT_Value = LoadSubscriberMapping.ProfileBalancesIDDetails.get(BalanceID).split("\\|")[0];
							String StartDate_Value = LoadSubscriberMapping.ProfileBalancesIDDetails.get(BalanceID).split("\\|")[1];
							String EndDate_Value = "";
							if(TargetValue.equals("T"))
							{
								String Date = subscriber.getProfiledumpInfoList().get(0).getSmsExpDate();
								if(!Date.isEmpty() && Date.length() == 14)
									EndDate_Value = Date.substring(0,4) + "-" + Date.substring(4,6) + "-" + Date.substring(6,8) + " " + Date.substring(8,10) + ":" + Date.substring(10,12) + ":" + Date.substring(12,14);
							}
							else
								EndDate_Value = LoadSubscriberMapping.ProfileBalancesIDDetails.get(BalanceID).split("\\|")[2];
							if(Symbol2.equals(">=") && Integer.parseInt(BalanceID) >= Integer.parseInt(BT_Value))
								ProfileTagOfferList.add(populateProfileOffer(profileMappingValue.getOfferId(),StartDate_Value,EndDate_Value));
						}						
					}
				}
				if(itr.equals("SmsBndl2Recur"))
				{			   
					if(Symbol.equals("=") && (TargetValue.equals("F") || TargetValue.equals("T")))
					{
						String BalanceID = profileMappingValue.getBTPERIODICCHARGEID();
						String Symbol2 =  profileMappingValue.getSymbols2();
						if(LoadSubscriberMapping.ProfileBalancesIDDetails.containsKey(BalanceID))
						{
							String BT_Value = LoadSubscriberMapping.ProfileBalancesIDDetails.get(BalanceID).split("\\|")[0];
							String StartDate_Value = LoadSubscriberMapping.ProfileBalancesIDDetails.get(BalanceID).split("\\|")[1];
							String EndDate_Value = "";
							if(TargetValue.equals("T"))
							{
								String Date = subscriber.getProfiledumpInfoList().get(0).getSmsExpDate();
								if(!Date.isEmpty() && Date.length() == 14)
									EndDate_Value = Date.substring(0,4) + "-" + Date.substring(4,6) + "-" + Date.substring(6,8) + " " + Date.substring(8,10) + ":" + Date.substring(10,12) + ":" + Date.substring(12,14);
							}
							else
								EndDate_Value = LoadSubscriberMapping.ProfileBalancesIDDetails.get(BalanceID).split("\\|")[2];
							if(Symbol2.equals(">=") && Integer.parseInt(BalanceID) >= Integer.parseInt(BT_Value))
								ProfileTagOfferList.add(populateProfileOffer(profileMappingValue.getOfferId(),StartDate_Value,EndDate_Value));
						}						
					}
				}*/
			}
			else
			{
				onlyLog.add("INC6002:Profile_Tags Mapping Ignored:MSISDN=" + msisdn + ":Profile_Tag_Name_NAME=" + itr + ":Profile_Tag_Value=:ACTION=Logging");
				continue;
			}
		}
		
		List<String> CurrentGroup = new ArrayList<>();
		boolean AGroupCompleted = false;
		boolean BGroupCompleted =  false;
		for(String itr : LoadSubscriberMapping.Profile_Tags_MappingWithGroup.keySet())
		{
			PROFILETAGINFO profileMappingValue = LoadSubscriberMapping.Profile_Tags_MappingWithGroup.get(itr);
			String Symbol = profileMappingValue.getSymbols1();
			String TargetName = profileMappingValue.getProfileTagName();
			String TargetValue = profileMappingValue.getProfileTagValue();
			String IgnoreFlag =  profileMappingValue.getIgnoreFlag();
			String GroupName = itr.split(",")[1];
						
			if(IgnoreFlag.equals("N"))
			{
								
				//***************logic for Dummy1, dummy2 and Dummy3
				
				if(TargetName.equals("CVM") && subscriber.getProfiledumpInfoList().get(0).getCVM().length() !=0)					
				{
					if(Symbol.equals("=") && Integer.parseInt(TargetValue) == Integer.parseInt(subscriber.getProfiledumpInfoList().get(0).getCVM()))
					{	
						ProfileTagOfferList.add(populateProfileOffer(profileMappingValue.getOfferId(),"",""));
					}
				}
					
				if(TargetName.equals("BlckBrryBundle") && subscriber.getProfiledumpInfoList().get(0).getBlckBrryBundle().length() !=0)					
				{
					if(Symbol.equals("=") && Integer.parseInt(TargetValue) == Integer.parseInt(subscriber.getProfiledumpInfoList().get(0).getBlckBrryBundle()))
					{	
						ProfileTagOfferList.add(populateProfileOffer(profileMappingValue.getOfferId(),"",""));
					}
				}
				if(TargetName.equals("NewPPBundle") && subscriber.getProfiledumpInfoList().get(0).getNewPPBundle().length() !=0)					
				{
					if(Symbol.equals("=") && TargetValue.equals(subscriber.getProfiledumpInfoList().get(0).getNewPPBundle()))
					{	
						ProfileTagOfferList.add(populateProfileOffer(profileMappingValue.getOfferId(),"",""));
					}
				}
				
				if(TargetName.equals("BstrVNNRecur") && TargetValue.equals(subscriber.getProfiledumpInfoList().get(0).getBstrVNNRecur()))
				{
					if(!subscriber.getProfiledumpInfoList().get(0).getBstrVceNatNumTree().isEmpty())
					{
						String BstrVceNat = subscriber.getProfiledumpInfoList().get(0).getBstrVceNatNumExp();
						String BstrVceNatDate="";
						if(!BstrVceNat.isEmpty() && BstrVceNat.length() == 14)
							BstrVceNatDate = BstrVceNat.substring(0,4) + "-" + BstrVceNat.substring(4,6) + "-" + BstrVceNat.substring(6,8) + " " + BstrVceNat.substring(8,10) + ":" + BstrVceNat.substring(10,12) + ":" + BstrVceNat.substring(12,14);
						
						if(CommonUtilities.convertDateToEpoch(BstrVceNatDate) < CommonUtilities.convertDateToEpoch(sdfDaily.format(currDate)))
						{
							onlyLog.add("INC6003:National Me and Mine product Expired:MSISDN=" + msisdn + ":PROFILE_TAG_NAME=" + "BstrVceIntNumTree" + ":PROFILE_TAG_VALUE=" + BstrVceNat +":ACTION=Logging");
						}
						else
						{
							if(profileMappingValue.getPTGroupIdentifier().startsWith("DUMMY_1"))
							{
								String StartDate = subscriber.getProfiledumpInfoList().get(0).getBstrVNNConfirmDate();
								String CurrectStartDate = "";
								if(!StartDate.isEmpty() && StartDate.length() == 14)
									CurrectStartDate = StartDate.substring(0,4) + "-" + StartDate.substring(4,6) + "-" + StartDate.substring(6,8) + " " + StartDate.substring(8,10) + ":" + StartDate.substring(10,12) + ":" + StartDate.substring(12,14);
								String EndDate = subscriber.getProfiledumpInfoList().get(0).getBstrVceNatNumExp();
								
								String CurrectEndDate = "";
								if(!EndDate.isEmpty())
									CurrectEndDate = EndDate.substring(0,4) + "-" + EndDate.substring(4,6) + "-" + EndDate.substring(6,8) + " " + EndDate.substring(8,10) + ":" + EndDate.substring(10,12) + ":" + EndDate.substring(12,14);
								
								ProfileTagOfferList.add(populateProfileOffer(profileMappingValue.getOfferId(),CurrectStartDate,CurrectEndDate));
							}
						}
					}
				}
		
				if(TargetName.equals("BstrVINRecur") && TargetValue.equals(subscriber.getProfiledumpInfoList().get(0).getBstrVINRecur()))
				{
					if(!subscriber.getProfiledumpInfoList().get(0).getBstrVceIntNumTree().isEmpty())
					{
						String BstrVceInt = subscriber.getProfiledumpInfoList().get(0).getBstrVceIntNumExp();
						String BstrVceIntDate = "";
						if(!BstrVceInt.isEmpty() && BstrVceInt.length() == 14)
							BstrVceIntDate = BstrVceInt.substring(0,4) + "-" + BstrVceInt.substring(4,6) + "-" + BstrVceInt.substring(6,8) + " " + BstrVceInt.substring(8,10) + ":" + BstrVceInt.substring(10,12) + ":" + BstrVceInt.substring(12,14);
						
						if(CommonUtilities.convertDateToEpoch(BstrVceIntDate) < CommonUtilities.convertDateToEpoch(sdfDaily.format(currDate)))
						{
							onlyLog.add("INC6004:International Me and Mine product Expired:MSISDN=" + msisdn + ":PROFILE_TAG_NAME=" + "BstrVceIntNumTree" + ":PROFILE_TAG_VALUE=" + BstrVceInt +":ACTION=Logging");
						}
						else
						{
							if(profileMappingValue.getPTGroupIdentifier().startsWith("DUMMY_2"))
							{
								String StartDate = subscriber.getProfiledumpInfoList().get(0).getBstrVINConfirmDate();
								String CurrectStartDate = "";
								if(!StartDate.isEmpty())
									CurrectStartDate = StartDate.substring(0,4) + "-" + StartDate.substring(4,6) + "-" + StartDate.substring(6,8) + " " + StartDate.substring(8,10) + ":" + StartDate.substring(10,12) + ":" + StartDate.substring(12,14);
								
								String EndDate = subscriber.getProfiledumpInfoList().get(0).getBstrVceIntNumExp();
								String CurrectEndDate = "";
								if(!EndDate.isEmpty() && EndDate.length() == 14)
									CurrectEndDate = EndDate.substring(0,4) + "-" + EndDate.substring(4,6) + "-" + EndDate.substring(6,8) + " " + EndDate.substring(8,10) + ":" + EndDate.substring(10,12) + ":" + EndDate.substring(12,14);
								
								ProfileTagOfferList.add(populateProfileOffer(profileMappingValue.getOfferId(),CurrectStartDate,CurrectEndDate));
							}					
						}
					}
				}
				
				//for Dummy_3
				
				if(TargetName.equals("ManRenDateLess1Y") && TargetValue.equals(subscriber.getProfiledumpInfoList().get(0).getManRenDateLess1Y()))
				{
					if(!subscriber.getProfiledumpInfoList().get(0).getManRenDateLess1Y().isEmpty())
					{
						String ManRen = subscriber.getProfiledumpInfoList().get(0).getManRenDateLess1Y();
						String ManRenDate = "";
						if(!ManRen.isEmpty() && ManRen.length() == 14)
							ManRenDate = ManRen.substring(0,4) + "-" + ManRen.substring(4,6) + "-" + ManRen.substring(6,8) + " " + ManRen.substring(8,10) + ":" + ManRen.substring(10,12) + ":" + ManRen.substring(12,14);
						
						if(CommonUtilities.convertDateToEpoch(ManRenDate) < CommonUtilities.convertDateToEpoch(sdfDaily.format(currDate)))
						{
							onlyLog.add("INC6004:International Me and Mine product Expired:MSISDN=" + msisdn + ":PROFILE_TAG_NAME=" + "BstrVceIntNumTree" + ":PROFILE_TAG_VALUE=" + ManRenDate +":ACTION=Logging");
						}
						else
						{
							if(profileMappingValue.getPTGroupIdentifier().startsWith("DUMMY_3"))
							{
								String StartDate = subscriber.getProfiledumpInfoList().get(0).getBstrVINConfirmDate();
								String CurrectStartDate = "";
								if(!StartDate.isEmpty())
									CurrectStartDate = StartDate.substring(0,4) + "-" + StartDate.substring(4,6) + "-" + StartDate.substring(6,8) + " " + StartDate.substring(8,10) + ":" + StartDate.substring(10,12) + ":" + StartDate.substring(12,14);
								
								String EndDate = subscriber.getProfiledumpInfoList().get(0).getBstrVceIntNumExp();
								String CurrectEndDate = "";
								if(!EndDate.isEmpty() && EndDate.length() == 14)
									CurrectEndDate = EndDate.substring(0,4) + "-" + EndDate.substring(4,6) + "-" + EndDate.substring(6,8) + " " + EndDate.substring(8,10) + ":" + EndDate.substring(10,12) + ":" + EndDate.substring(12,14);
								
								ProfileTagOfferList.add(populateProfileOffer(profileMappingValue.getOfferId(),CurrectStartDate,CurrectEndDate));
							}					
						}
					}
				}
				
				//**************C1 and D1
										
				if(TargetName.equals("BstrVceNatNumAct") && TargetValue.equals(subscriber.getProfiledumpInfoList().get(0).getBstrVceNatNumAct()))
				{
					if(!subscriber.getProfiledumpInfoList().get(0).getBstrVceNatNumTree().isEmpty())
					{
						String BstrVceNat = subscriber.getProfiledumpInfoList().get(0).getBstrVceNatNumExp();
						String BstrVceNatDate = "";
						if(!BstrVceNat.isEmpty() && BstrVceNat.length() == 14)
							BstrVceNatDate = BstrVceNat.substring(0,4) + "-" + BstrVceNat.substring(4,6) + "-" + BstrVceNat.substring(6,8) + " " + BstrVceNat.substring(8,10) + ":" + BstrVceNat.substring(10,12) + ":" + BstrVceNat.substring(12,14);
						
						if(CommonUtilities.convertDateToEpoch(BstrVceNatDate) < CommonUtilities.convertDateToEpoch(sdfDaily.format(currDate)))
						{
							onlyLog.add("INC6003:National Me and Mine product Expired:MSISDN=" + msisdn + ":PROFILE_TAG_NAME=" + "BstrVceIntNumTree" + ":PROFILE_TAG_VALUE=" + BstrVceNat +":ACTION=Logging");
						}
						else
						{
								String SecondTagName ="";
								Set<String> valueList = LoadSubscriberMapping.ProfileGroupingMap.get(GroupName);					
								for(String Tag : valueList)
								if(!Tag.equals(TargetName)){
									SecondTagName = Tag; 
									break;
								}
								for(String itr2 : LoadSubscriberMapping.Profile_Tags_MappingWithGroup.keySet())
								{
									PROFILETAGINFO SecondprofileMappingValue = LoadSubscriberMapping.Profile_Tags_MappingWithGroup.get(itr2);
									String SecondTargetName = SecondprofileMappingValue.getProfileTagName();
									String SecondTargetValue = SecondprofileMappingValue.getProfileTagValue();
									
									if(SecondTagName.equals(SecondTargetName) && SecondTargetValue.equals(subscriber.getProfiledumpInfoList().get(0).getBstrVNNRecur()))
									{
										String StartDate = subscriber.getProfiledumpInfoList().get(0).getBstrVNNConfirmDate();
										String CurrectStartDate = "";
										if(!StartDate.isEmpty() && StartDate.length() == 14)
											CurrectStartDate = StartDate.substring(0,4) + "-" + StartDate.substring(4,6) + "-" + StartDate.substring(6,8) + " " + StartDate.substring(8,10) + ":" + StartDate.substring(10,12) + ":" + StartDate.substring(12,14);
										
										String EndDate = subscriber.getProfiledumpInfoList().get(0).getBstrVceNatNumExp();
										String CurrectEndDate = "";
										if(!EndDate.isEmpty() && EndDate.length() == 14)
											CurrectEndDate = EndDate.substring(0,4) + "-" + EndDate.substring(4,6) + "-" + EndDate.substring(6,8) + " " + EndDate.substring(8,10) + ":" + EndDate.substring(10,12) + ":" + EndDate.substring(12,14);
										
										ProfileTagOfferList.add(populateProfileOffer(profileMappingValue.getOfferId(),CurrectStartDate,CurrectEndDate));
										break;
									}
								}
							}
						}
					}
			
					if(TargetName.equals("BstrVceIntNumAct") && TargetValue.equals(subscriber.getProfiledumpInfoList().get(0).getBstrVceIntNumAct()))
					{
						if(!subscriber.getProfiledumpInfoList().get(0).getBstrVceIntNumTree().isEmpty())
						{
							String BstrVceInt = subscriber.getProfiledumpInfoList().get(0).getBstrVceIntNumExp();
							String BstrVceIntDate = "";
							if(!BstrVceInt.isEmpty() && BstrVceInt.length() == 14)
								BstrVceIntDate = BstrVceInt.substring(0,4) + "-" + BstrVceInt.substring(4,6) + "-" + BstrVceInt.substring(6,8) + " " + BstrVceInt.substring(8,10) + ":" + BstrVceInt.substring(10,12) + ":" + BstrVceInt.substring(12,14);
							
							if(CommonUtilities.convertDateToEpoch(BstrVceIntDate) < CommonUtilities.convertDateToEpoch(sdfDaily.format(currDate)))
							{
								onlyLog.add("INC6004:International Me and Mine product Expired:MSISDN=" + msisdn + ":PROFILE_TAG_NAME=" + "BstrVceIntNumTree" + ":PROFILE_TAG_VALUE=" + BstrVceInt +":ACTION=Logging");
							}
							else
							{
								String SecondTagName ="";
								Set<String> valueList = LoadSubscriberMapping.ProfileGroupingMap.get(GroupName);					
								for(String Tag : valueList)
								if(!Tag.equals(TargetName)){
									SecondTagName = Tag; 
									break;
								}
								for(String itr2 : LoadSubscriberMapping.Profile_Tags_MappingWithGroup.keySet())
								{
									PROFILETAGINFO SecondprofileMappingValue = LoadSubscriberMapping.Profile_Tags_MappingWithGroup.get(itr2);
									String SecondTargetName = SecondprofileMappingValue.getProfileTagName();
									String SecondTargetValue = SecondprofileMappingValue.getProfileTagValue();
									
									if(SecondTagName.equals(SecondTargetName) && SecondTargetValue.equals(subscriber.getProfiledumpInfoList().get(0).getBstrVINRecur()))
									{
										String StartDate = subscriber.getProfiledumpInfoList().get(0).getBstrVINConfirmDate();
										String CurrectStartDate = "";
										if(!StartDate.isEmpty() && StartDate.length() == 14)
											CurrectStartDate = StartDate.substring(0,4) + "-" + StartDate.substring(4,6) + "-" + StartDate.substring(6,8) + " " + StartDate.substring(8,10) + ":" + StartDate.substring(10,12) + ":" + StartDate.substring(12,14);
										String EndDate = subscriber.getProfiledumpInfoList().get(0).getBstrVceIntNumExp();
										String CurrectEndDate = "";
										if(!EndDate.isEmpty() && EndDate.length() == 14)
											CurrectEndDate = EndDate.substring(0,4) + "-" + EndDate.substring(4,6) + "-" + EndDate.substring(6,8) + " " + EndDate.substring(8,10) + ":" + EndDate.substring(10,12) + ":" + EndDate.substring(12,14);
										
										ProfileTagOfferList.add(populateProfileOffer(profileMappingValue.getOfferId(),CurrectStartDate,CurrectEndDate));
										break;
									}
								}
							}
						}
					}
					
					
					
					
					
					
					
					
					/*//******Logic for Group A1 to A4
					if(!AGroupCompleted && TargetName.equals("BusMobPayg50") && TargetValue.equals(subscriber.getProfiledumpInfoList().get(0).getBusMobPayg50()))
					{
						String SecondTagName ="";
						Set<String> valueList = LoadSubscriberMapping.ProfileGroupingMap.get(GroupName);					
						for(String Tag : valueList)
							if(!Tag.equals(TargetName)){
								SecondTagName = Tag; 
								break;
						}
						for(String itr2 : LoadSubscriberMapping.Profile_Tags_MappingWithGroup.keySet())
						{
							PROFILETAGINFO SecondprofileMappingValue = LoadSubscriberMapping.Profile_Tags_MappingWithGroup.get(itr2);
							String SecondTargetName = SecondprofileMappingValue.getProfileTagName();
							String SecondTargetValue = SecondprofileMappingValue.getProfileTagValue();
							String SecondBalanceID = SecondprofileMappingValue.getBTPERIODICCHARGEID();
							if(SecondTagName.equals(SecondTargetName) && SecondTargetValue.equals(subscriber.getProfiledumpInfoList().get(0).getBusMobTopUp()))
							{
								//if(LoadSubscriberMapping.ProfileSpecialGroup.get("BusMobTopUp" + "," + subscriber.getProfiledumpInfoList().get(0).getBusMobTopUp()) != null)
								if(LoadSubscriberMapping.ProfileBalancesIDDetails.containsKey(SecondBalanceID))
								{
									String BT_Value = LoadSubscriberMapping.ProfileBalancesIDDetails.get(SecondBalanceID).split("\\|")[0];
									String Symbol2 = SecondprofileMappingValue.getSymbols2();
									String BT_Reference_Value = SecondprofileMappingValue.getPCBTValue();
									if(Symbol2.equals("or"))
									{
										//Integer.parseInt(Balance_Value) == Integer.parseInt(BT_Value)
										String[] values = BT_Reference_Value.split(",");											
										if(Arrays.stream(values).anyMatch(BT_Value::equals))
										{
											ProfileTagOfferList.add(populateProfileOffer(SecondprofileMappingValue.getOfferId(),"",""));
											CurrentGroup.add(GroupName);
											AGroupCompleted = true;
											break;
										}
										else
										{
											onlyLog.add("INC6001:Profile_Tags Mapping lookup Failed:MSISDN=" + msisdn + ":PROFILE_TAG_NAME=" + SecondBalanceID + ":PROFILE_TAG_VALUE=" + BT_Value +":ACTION=Logging");
										}
									}
								}
							}	
						}
					}*/
					//******Logic for Group B5 to B7
					/*if(!BGroupCompleted && TargetName.equals("CVM") && TargetValue.equals(subscriber.getProfiledumpInfoList().get(0).getCVM()))
					{
						String SecondTagName = "CVMCounter";
						String ThirdTagName = "IDDCutRateAct";
						Set<String> valueList = LoadSubscriberMapping.ProfileGroupingMap.get(GroupName);					
						for(String Tag : valueList)
							if(!Tag.equals(TargetName)){
								SecondTagName = Tag; 
								if(!Tag.equals(SecondTagName))
									ThirdTagName = Tag;
							}
						for(String itr2 : LoadSubscriberMapping.Profile_Tags_MappingWithGroup.keySet())
						{
							PROFILETAGINFO SecondprofileMappingValue = LoadSubscriberMapping.Profile_Tags_MappingWithGroup.get(itr2);
							String SecondTargetName = SecondprofileMappingValue.getProfileTagName();
							String SecondTargetValue = SecondprofileMappingValue.getProfileTagValue();
							String SecondSymbol = SecondprofileMappingValue.getSymbols1();
							if(BGroupCompleted)
								break;
							if(!BGroupCompleted && SecondTagName.equals(SecondTargetName))
							{
								if(subscriber.getProfiledumpInfoList().get(0).getCVMCounter().length() != 0)
								{
									if(SecondSymbol.equals(">") && Integer.parseInt(subscriber.getProfiledumpInfoList().get(0).getCVMCounter()) > Integer.parseInt(SecondTargetValue))
									{
										for(String itr3 : LoadSubscriberMapping.Profile_Tags_MappingWithGroup.keySet())
										{
											PROFILETAGINFO ThirdprofileMappingValue = LoadSubscriberMapping.Profile_Tags_MappingWithGroup.get(itr3);
											String ThirdTargetName = ThirdprofileMappingValue.getProfileTagName();
											String ThirdTargetValue = ThirdprofileMappingValue.getProfileTagValue();
											
											if(subscriber.getProfiledumpInfoList().get(0).getIDDCutRateAct().length() != 0)
											{
												if(ThirdTagName.equals(ThirdTargetName) && ThirdTargetValue.equals(subscriber.getProfiledumpInfoList().get(0).getIDDCutRateAct()))
												{
													ProfileTagOfferList.add(populateProfileOffer(SecondprofileMappingValue.getOfferId(),"",""));
													ProfileTagOfferList.add(populateProfileOffer(profileMappingValue.getOfferId(),"",""));
													ProfileTagOfferList.add(populateProfileOffer(ThirdprofileMappingValue.getOfferId(),"",""));
													CurrentGroup.add(GroupName);
													BGroupCompleted = true;
													break;
												}
												else
												{
													onlyLog.add("INC6001:Profile_Tags Mapping lookup Failed:MSISDN=" + msisdn + ":PROFILE_TAG_NAME=" + ThirdTargetName + ":PROFILE_TAG_VALUE=" + subscriber.getProfiledumpInfoList().get(0).getIDDCutRateAct() +":ACTION=Logging");
												}
											}
										}
									}
									else
									{
										onlyLog.add("INC6001:Profile_Tags Mapping lookup Failed:MSISDN=" + msisdn + ":PROFILE_TAG_NAME=" + "CVMCounter" + ":PROFILE_TAG_VALUE=" + subscriber.getProfiledumpInfoList().get(0).getCVMCounter() +":ACTION=Logging");
									}
								}
							}
						}
					}*/
					
					//Add code here
			}
			else
			{
				//log for ignore
			}
		}
		return ProfileTagOfferList;
	}
	
	private String populateProfileOffer(String offerId,String Offer_start,String Offer_end) {
		StringBuffer sb = new StringBuffer();
		
		sb.append(msisdn).append(",");
		sb.append(offerId).append(",");
		if(Offer_start.length() > 1)
			sb.append(CommonUtilities.convertDateToTimerOfferDate(Offer_start)[0].toString()).append(",");
		else
			sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_NULL")).append(",");
		if(Offer_end.length() > 1)
			sb.append(CommonUtilities.convertDateToTimerOfferDate(Offer_end)[0].toString()).append(",");
		else
			sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_NULL")).append(",");
		
		if(Offer_start.length() > 1)
			sb.append(CommonUtilities.convertDateToTimerOfferDate(Offer_start)[1].toString()).append(",");
		else
			sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_NULL")).append(",");
		if(Offer_end.length() > 1)
			sb.append(CommonUtilities.convertDateToTimerOfferDate(Offer_end)[1].toString()).append(",");
		else
			sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_NULL")).append(",");
		
		//sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_NULL")).append(",");
		//sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_NULL")).append(",");
		sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_NULL")).append(",");
		sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_NULL")).append(",");
		sb.append("toBePopulated");
		
		return sb.toString();
	}
	
	private List<String> offerFromDefaultService()
	{
		List<String> defaultOfferList = new ArrayList<>();
		
		LoadSubscriberMapping.DefaultServicesMap.forEach((k,v)->{
			//System.out.println("Item : " + k + " Count : " + v);
			
			if (v.split(",",-1)[1].trim().equals("N"))
			{
				//System.out.println(v);
				if (v.split(",",-1)[6] != "" && v.split(",",-1)[6].length() != 0)
				{
					String Offer_ID = v.split(",",-1)[6];
					String Offer_Type = v.split(",",-1)[7];
					String Rule_ID = v.split(",",-1)[8];
					
					
					if(subscriber.getUsmsdumpInfoList().get(0).getLASTRECHARGEDATE().length() > 0)
					{
						StringBuffer sb = new StringBuffer();
						sb.append(msisdn).append(",");
						sb.append(Offer_ID).append(",");
						if(Rule_ID.equals("1"))
						{
							sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_NULL")).append(",");
						}
						else
						{
							String LAST_Recharge_Date = subscriber.getUsmsdumpInfoList().get(0).getLASTRECHARGEDATE(); 
							if(LAST_Recharge_Date.isEmpty())
								sb.append("").append(",");
							else
								sb.append(CommonUtilities.convertDateToTimerOfferDate(LAST_Recharge_Date)[0].toString()).append(",");
						}
						sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_NULL")).append(",");
						if(Rule_ID.equals("1"))
						{
							sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_NULL")).append(",");
						}
						else
						{
							String LAST_Recharge_Date = subscriber.getUsmsdumpInfoList().get(0).getLASTRECHARGEDATE(); 
							if(LAST_Recharge_Date.isEmpty())
								sb.append("").append(",");
							else
								sb.append(CommonUtilities.convertDateToTimerOfferDate(LAST_Recharge_Date)[1].toString()).append(",");
						}
						sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_NULL")).append(",");
						sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_NULL")).append(",");
						sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_NULL")).append(",");
						sb.append("toBePopulated");
						defaultOfferList.add(sb.toString());
						
						sb = null;
					}
					
				}
			}			
		});
		
		return defaultOfferList;
	}
	
	/******Code to PAM creation****************/
	
	private List<String> generatePam(){
		List<String> PAM = new ArrayList<>();
		
		PAM.addAll(PAMFromDefaultService(msisdn));
		PAM.addAll(PAMFromProductMapping(msisdn));
		
		return PAM;
	}
	
	private Collection<? extends String> PAMFromProductMapping(String msisdn) {
		List<String> defaultPAMList = new ArrayList<>();
		Set<String> CompletedGroupBT_ID = new HashSet<>();	
		Set<String> CompletedBT_ID = new HashSet<>();
		
		//System.out.println(CommonUtilities.convertDateToEpoch(LoadSubscriberMapping.CommonConfigMap.get("migration_date").toString()));
		
		for(com.ericsson.jibx.beans.SubscriberXml.SchemasubscriberbalancesdumpInfo balanceInput : SortedBalanceInput)
		{			
			String Balance_ID = balanceInput.getBALANCETYPE();
			String Balance_ExpiryDate = balanceInput.getBEEXPIRY();
			CompletedGroupBT_ID.clear();
			if(CompletedBT_ID.contains(balanceInput.getBEBUCKETID()))
				continue;
			if((LoadSubscriberMapping.ProductMappingIgnoreFlag.get(Balance_ID) != null) && LoadSubscriberMapping.ProductMappingIgnoreFlag.get(Balance_ID) == "Y")
				continue;
			
			if(!Balance_ExpiryDate.equals(LoadSubscriberMapping.CommonConfigMap.get("Lifetime_validity_value").toString()) && CommonUtilities.convertDateToEpoch(Balance_ExpiryDate) < CommonUtilities.convertDateToEpoch(LoadSubscriberMapping.CommonConfigMap.get("migration_date").toString()))
			{
				continue;
			}
			else
			{
				if(LoadSubscriberMapping.BalanceEmptyBTGroupIdentifierMap.get(Balance_ID + "|") != null)
				{
					//no Action needed in case of PAM
				}	
				else
				{						
					if(LoadSubscriberMapping.ExceptionBalances.contains(Balance_ID))
					{			
						//no Action needed in case of PAM
					}
					else
					{
						String GroupName = "";
						Set<String> CurrentGroupBalance = new HashSet<>();
						List<String> ValidGroupBalanceOffer = new ArrayList<>();
						Set<String> ValidGroupBT_ID = new HashSet<>();
						Map<String, String> CurrentGroupBalanceID = new ConcurrentHashMap<>(50, 0.75f, 30);
						boolean ExtraPAMFlag = false;
						for(Set<String> valueList : LoadSubscriberMapping.BalanceGroupingMap.values()) {					
							if(valueList.contains(Balance_ID)){
								GroupName = LoadSubscriberMapping.getKey(LoadSubscriberMapping.BalanceGroupingMap, valueList);
								if(GroupName.startsWith("D-"))
								{
									GroupName = ComputeDGroup(Balance_ID,GroupName,CompletedBT_ID);
									CurrentGroupBalance.addAll(LoadSubscriberMapping.BalanceGroupingMap.get(GroupName));
								}
								if(GroupName.startsWith("B-"))
								{
									GroupName = ComputeBGroup(Balance_ID,GroupName,CompletedBT_ID);
									CurrentGroupBalance.addAll(LoadSubscriberMapping.BalanceGroupingMap.get(GroupName));
								}
								if(GroupName.startsWith("A-"))
								{
									if(GroupName.startsWith("A-M-"))
									{
										Map<String,Map<String,List<String>>> AMOutputDetails = new HashMap<>();
										AMOutputDetails = populateAMGroupResult(Balance_ID, balanceInput.getBEBUCKETVALUE(),balanceInput.getBEBUCKETSTARTDATE(), Balance_ExpiryDate,balanceInput.getBEBUCKETID(),CompletedBT_ID);
										
										Map<String,List<String>> OutputDetails = new HashMap<>();
										OutputDetails = AMOutputDetails.get("AMOutputDetails");
										if(OutputDetails.containsKey("Offer"))
										{											
											//BalanceOfferList.addAll(OutputDetails.get("Offer"));											
											CompletedBT_ID.addAll(OutputDetails.get("CompletedBT"));
										}
																				
									}
									else
									{
										GroupName = ComputeAGroup(Balance_ID,GroupName,CompletedBT_ID);
										CurrentGroupBalance.addAll(LoadSubscriberMapping.BalanceGroupingMap.get(GroupName));
									}
								}
								if(GroupName.startsWith("C-"))
								{
									GroupName = ComputeCGroup(Balance_ID,GroupName,CompletedBT_ID);
									CurrentGroupBalance.addAll(LoadSubscriberMapping.BalanceGroupingMap.get(GroupName));
								}
								if(GroupName.startsWith("F-"))
								{
									GroupName = ComputeFGroup(Balance_ID,GroupName,CompletedBT_ID);
									CurrentGroupBalance.addAll(LoadSubscriberMapping.BalanceGroupingMap.get(GroupName));
								}
								break;
							}
						}
						
						//if(!CompletedGroup.contains(GroupName))
						{
							//System.out.println(Balance_ID + "----" +GroupName);						
							if(CurrentGroupBalance.size() > 0)
							{
								String FinalGroupName = GroupName;
								//System.out.println(FinalGroupName);	
								for(String id : CurrentGroupBalance)
								{
									//System.out.println(id);
									for(com.ericsson.jibx.beans.SubscriberXml.SchemasubscriberbalancesdumpInfo TempbalanceInput :  SortedBalanceInput){
										String TempBalance_ID = TempbalanceInput.getBALANCETYPE();
										String TempBalance_Name = TempbalanceInput.getBALANCETYPENAME();
										String TempBalance_Value = TempbalanceInput.getBEBUCKETVALUE();
										String TempBalance_StartDate = TempbalanceInput.getBEBUCKETSTARTDATE();
										String TempBalance_ExpiryDate = TempbalanceInput.getBEEXPIRY();
										CurrentGroupBalanceID.put(TempBalance_ID + "," + TempBalance_Value, TempbalanceInput.getBEBUCKETID());
										
										if(CompletedBT_ID.contains(TempbalanceInput.getBEBUCKETID()))
											continue;
										if(id.equals(TempBalance_ID))
										{
											if(LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(id + "|" + FinalGroupName) != null)
											{
												if(!TempBalance_ExpiryDate.equals(LoadSubscriberMapping.CommonConfigMap.get("Lifetime_validity_value").toString()) && CommonUtilities.convertDateToEpoch(TempBalance_ExpiryDate) < CommonUtilities.convertDateToEpoch(LoadSubscriberMapping.CommonConfigMap.get("migration_date").toString()))
												{													
													continue;
												}
												String Offer_ID = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + FinalGroupName).getOfferID();
												String Symbol = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + FinalGroupName).getSymbols();
												String BT_Value = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + FinalGroupName).getBTValue();
												String Product_Private = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + FinalGroupName).getProductPrivate();
												String Offer_Flag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + FinalGroupName).getOfferFlag();
												String Offer_Type = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + FinalGroupName).getOfferType();
												String BT_Type = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + FinalGroupName).getBTTYPE();
												boolean startFlag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + FinalGroupName).getOfferStartDate().length() > 0 ? true:false;
												boolean expiryFalg = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + FinalGroupName).getOfferExpiryDate().length() > 0 ? true:false;
												String ExtraPAM = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + FinalGroupName).getAddPAM();
												if(ExtraPAM.isEmpty())
												{
													ExtraPAM = "";
												}
												else
												{
													ExtraPAMFlag = true;
												}
												
												CompletedBT_ID.add(TempbalanceInput.getBEBUCKETID());
												CompletedGroupBT_ID.add(TempbalanceInput.getBEBUCKETID());
												if(Symbol.equals(">=") && Integer.parseInt(TempBalance_Value) >= Integer.parseInt(BT_Value))
												{
													ValidGroupBalanceOffer.add(BT_Type + ";" + TempBalance_Name + ";" + TempBalance_ID + ";" + TempBalance_Value +"|" + Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + TempBalance_StartDate + ";" + TempBalance_ExpiryDate  + ";" + Product_Private + ";" + Offer_Flag + ";" + ExtraPAM + ";" + TempbalanceInput.getBEBUCKETID());
													ValidGroupBT_ID.add(TempBalance_ID);
													break;
												}
												else if(Symbol.equals(">") && Integer.parseInt(TempBalance_Value) > Integer.parseInt(BT_Value))
												{
													ValidGroupBalanceOffer.add(BT_Type + ";" +TempBalance_Name + ";" + TempBalance_ID + ";" + TempBalance_Value + "|" + Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + TempBalance_StartDate + ";" + TempBalance_ExpiryDate  + ";" + Product_Private + ";" + Offer_Flag + ";" + ExtraPAM + ";" + TempbalanceInput.getBEBUCKETID());
													ValidGroupBT_ID.add(TempBalance_ID);
													break;
												}
												else if(Symbol.equals("=") && Integer.parseInt(TempBalance_Value) == Integer.parseInt(BT_Value))
												{
													ValidGroupBalanceOffer.add(BT_Type + ";" +TempBalance_Name + ";" + TempBalance_ID + ";" + TempBalance_Value + "|" + Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + TempBalance_StartDate + ";" + TempBalance_ExpiryDate  + ";" + Product_Private + ";" + Offer_Flag + ";" + ExtraPAM + ";" + TempbalanceInput.getBEBUCKETID());
													ValidGroupBT_ID.add(TempBalance_ID);
													break;
												}
												else if(Symbol.equals("or"))
												{
													//Integer.parseInt(Balance_Value) == Integer.parseInt(BT_Value)
													String[] values = BT_Value.split("#");											
													if(Arrays.stream(values).anyMatch(TempBalance_Value::equals))
													{
														ValidGroupBT_ID.add(TempBalance_ID);
														ValidGroupBalanceOffer.add(BT_Type + ";" +TempBalance_Name + ";" + TempBalance_ID + ";" + TempBalance_Value + "|" + Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + TempBalance_StartDate + ";" + TempBalance_ExpiryDate  + ";" + Product_Private + ";" + Offer_Flag + ";" + ExtraPAM + ";" + TempbalanceInput.getBEBUCKETID());
														break;
													}																										
												}	
											}
											/*else
											{
												//System.out.println("Discarded Logs: " + id);
												onlyLog.add("INC4004:Balance_Type lookup failed in Product_Mapping:MSISDN=" + msisdn + ":BALANCE_TYPE_ID=" + TempBalance_ID + ":BE_BUCKET_VALUE=" + TempBalance_Value + ":ACTION=Logging");
											}*/
										}
									}
								}
								if(ExtraPAMFlag && FinalGroupName.startsWith("A-"))
								{
									ExtraPAMFlag = false;
									if(ValidGroupBalanceOffer.size() == CurrentGroupBalance.size())
									{
										String TargetPAM =  ValidGroupBalanceOffer.stream().filter(item->item.startsWith("P")).collect(Collectors.toList()).get(0).split("\\|")[1];
										// Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + Balance_StartDate + ";" + Balance_ExpiryDate  + ";" + Product_Private
										String SourcePAM =  ValidGroupBalanceOffer.stream().filter(item->item.startsWith("P")).collect(Collectors.toList()).get(0).split("\\|")[0];
										if(TargetPAM.split(";")[8].length() > 0)
										{
											String AddedPAM= TargetPAM.split(";")[8];
											if(!AddedPAM.isEmpty())
											{
												String ExpiryDay = TargetPAM.split(";")[5].split(" ")[0].split("-")[2];
												if(LoadSubscriberMapping.PAMMap.containsKey(ExpiryDay))
												{
													String PAMValue = LoadSubscriberMapping.PAMMap.get(ExpiryDay).split(";")[0];
													if(PAMValue.equals(AddedPAM))
													{
														Format formatter = new SimpleDateFormat("MMM");
													    String MonthName = formatter.format(new Date());
													    
													    LocalDate currentDate = LocalDate.now();
													    int doy = currentDate.getYear();
													    
													    Calendar c = Calendar.getInstance();
												        Date date = c.getTime();
												        SimpleDateFormat dfDate = new SimpleDateFormat("yyyy-MM-dd");
												        String CurrentDate = dfDate.format(date);
													    
													    String Pam_Period = "";
													    if(LoadSubscriberMapping.PAMMap.get(ExpiryDay).split(";")[3].equals("DAILY"))
													    	Pam_Period = "Daily_" + String.valueOf(CurrentDate);
													    else 
													    	Pam_Period = "Monthly_" + String.valueOf(doy) + "_" + MonthName; 
													    
													    Long Last_Evaluation_Date = CommonUtilities.getCurrentPamPeriodInDays("Monthly");
														
														if(LoadSubscriberMapping.PAMMap.get(ExpiryDay).split(";")[3].equals("DAILY"))
															Last_Evaluation_Date = CommonUtilities.getCurrentPamPeriodInDays("Daily");
														else
															Last_Evaluation_Date =CommonUtilities.getCurrentPamPeriodInDays("Monthly");
														
													    StringBuffer sb = new StringBuffer();
														
														sb.append(msisdn).append(",");
														sb.append(LoadSubscriberMapping.PAMMap.get(ExpiryDay).split(";")[1]).append(",");
														sb.append(LoadSubscriberMapping.PAMMap.get(ExpiryDay).split(";")[0]).append(",");
														sb.append(LoadSubscriberMapping.PAMMap.get(ExpiryDay).split(";")[2]).append(",");
														sb.append(Pam_Period).append(",");
														sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_ZERO")).append(",");
														sb.append(Last_Evaluation_Date).append(",");
														sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_ZERO"));
														
														defaultPAMList.add(sb.toString());
													}
													else
													{
														//onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(TargetOffer.split(";")[2] + "," + TargetOffer.split(";")[3])  +":ACTION=Logging");
														onlyLog.add("INC4008:BillCycle PC expiry not matching with PAM:MSISDN=" + msisdn + ":BALANCE_TYPE=" + SourcePAM.split(";")[2] + ":BE_BUCKET_VALUE=" + SourcePAM.split(";")[3] + ":BE_EXPIRY="+ TargetPAM.split(";")[5] +":ACTION=Logging");
													}
												}												
											}
										}										
									}									
									else
									{
										
										//ValidGroupBalanceOffer.stream().filter(item->item.startsWith("P")).count()
										if(ValidGroupBalanceOffer.size() >= 2 && ValidGroupBalanceOffer.stream().filter(item->item.startsWith("P")).count() >=1 && ValidGroupBalanceOffer.stream().filter(item->item.startsWith("M")).count() >=1){
											String TargetPAM =  ValidGroupBalanceOffer.stream().filter(item->item.startsWith("P")).collect(Collectors.toList()).get(0).split("\\|")[1];
											// Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + Balance_StartDate + ";" + Balance_ExpiryDate  + ";" + Product_Private
											String SourcePAM =  ValidGroupBalanceOffer.stream().filter(item->item.startsWith("P")).collect(Collectors.toList()).get(0).split("\\|")[0];
											
											if(TargetPAM.split(";")[8].length() > 0)
											{
												String AddedPAM= TargetPAM.split(";")[8];
												if(!AddedPAM.isEmpty())
												{
													String ExpiryDay = TargetPAM.split(";")[5].split(" ")[0].split("-")[2];
													if(LoadSubscriberMapping.PAMMap.containsKey(ExpiryDay))
													{
														String PAMValue = LoadSubscriberMapping.PAMMap.get(ExpiryDay).split(";")[0];
														if(PAMValue.equals(AddedPAM))
														{
															Format formatter = new SimpleDateFormat("MMM");
														    String MonthName = formatter.format(new Date());
														    
														    LocalDate currentDate = LocalDate.now();
														    int doy = currentDate.getYear();

														    Calendar c = Calendar.getInstance();
													        Date date = c.getTime();
													        SimpleDateFormat dfDate = new SimpleDateFormat("yyyy-MM-dd");
													        String CurrentDate = dfDate.format(date);
														    
														    String Pam_Period = "";
														    if(LoadSubscriberMapping.PAMMap.get(ExpiryDay).split(";")[3].equals("DAILY"))
														    	Pam_Period = "Daily_" + String.valueOf(CurrentDate);
														    else 
														    	Pam_Period = "Monthly_" + String.valueOf(doy) + "_" + MonthName; 
														    
														    Long Last_Evaluation_Date = CommonUtilities.getCurrentPamPeriodInDays("Monthly");
															
															if(LoadSubscriberMapping.PAMMap.get(ExpiryDay).split(";")[3].equals("DAILY"))
																Last_Evaluation_Date = CommonUtilities.getCurrentPamPeriodInDays("Daily");
															else
																Last_Evaluation_Date =CommonUtilities.getCurrentPamPeriodInDays("Monthly");
															
														    
														    StringBuffer sb = new StringBuffer();
															
															sb.append(msisdn).append(",");
															sb.append(LoadSubscriberMapping.PAMMap.get(ExpiryDay).split(";")[1]).append(",");
															sb.append(LoadSubscriberMapping.PAMMap.get(ExpiryDay).split(";")[0]).append(",");
															sb.append(LoadSubscriberMapping.PAMMap.get(ExpiryDay).split(";")[2]).append(",");
															sb.append(Pam_Period).append(",");
															sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_ZERO")).append(",");
															sb.append(Last_Evaluation_Date).append(",");
															sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_ZERO"));
															
															defaultPAMList.add(sb.toString());
														}
														else
														{
															//onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(TargetOffer.split(";")[2] + "," + TargetOffer.split(";")[3])  +":ACTION=Logging");
															onlyLog.add("INC4008:BillCycle PC expiry not matching with PAM:MSISDN=" + msisdn + ":BALANCE_TYPE=" + SourcePAM.split(";")[2] + ":BE_BUCKET_VALUE=" + SourcePAM.split(";")[3] + ":BE_EXPIRY="+ TargetPAM.split(";")[5] +":ACTION=Logging");
														}
													}	
												}
											}				
										}										
										else if(ValidGroupBalanceOffer.size() == 1)
										{
											//BT_Type + ";" +TempBalance_Name + ";" + TempBalance_ID + ";" + TempBalance_Value + "|" + Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + TempBalance_StartDate + ";" + TempBalance_ExpiryDate  + ";" + Product_Private
											if(ValidGroupBalanceOffer.stream().filter(item->item.startsWith("P")).count() == 1 ){
												String TargetPAM =  ValidGroupBalanceOffer.stream().filter(item->item.startsWith("P")).collect(Collectors.toList()).get(0).split("\\|")[1];
												String SourcePAM =  ValidGroupBalanceOffer.stream().filter(item->item.startsWith("P")).collect(Collectors.toList()).get(0).split("\\|")[0];
												
												if(TargetPAM.split(";")[8].length() > 0)
												{
													String AddedPAM= TargetPAM.split(";")[8];
													if(!AddedPAM.isEmpty())
													{
														String ExpiryDay = TargetPAM.split(";")[5].split(" ")[0].split("-")[2];
														if(LoadSubscriberMapping.PAMMap.containsKey(ExpiryDay))
														{
															String PAMValue = LoadSubscriberMapping.PAMMap.get(ExpiryDay).split(";")[0];
															if(PAMValue.equals(AddedPAM))
															{
																Format formatter = new SimpleDateFormat("MMM");
															    String MonthName = formatter.format(new Date());
															    
															    LocalDate currentDate = LocalDate.now();
															    int doy = currentDate.getYear();
															    

															    Calendar c = Calendar.getInstance();
														        Date date = c.getTime();
														        SimpleDateFormat dfDate = new SimpleDateFormat("yyyy-MM-dd");
														        String CurrentDate = dfDate.format(date);
															    
															    String Pam_Period = "";
															    if(LoadSubscriberMapping.PAMMap.get(ExpiryDay).split(";")[3].equals("DAILY"))
															    	Pam_Period = "Daily_" + String.valueOf(CurrentDate);
															    else 
															    	Pam_Period = "Monthly_" + String.valueOf(doy) + "_" + MonthName; 
															    
															    Long Last_Evaluation_Date = CommonUtilities.getCurrentPamPeriodInDays("Monthly");
																
																if(LoadSubscriberMapping.PAMMap.get(ExpiryDay).split(";")[3].equals("DAILY"))
																	Last_Evaluation_Date = CommonUtilities.getCurrentPamPeriodInDays("Daily");
																else
																	Last_Evaluation_Date =CommonUtilities.getCurrentPamPeriodInDays("Monthly");
																
															    
															    StringBuffer sb = new StringBuffer();
																
																sb.append(msisdn).append(",");
																sb.append(LoadSubscriberMapping.PAMMap.get(ExpiryDay).split(";")[1]).append(",");
																sb.append(LoadSubscriberMapping.PAMMap.get(ExpiryDay).split(";")[0]).append(",");
																sb.append(LoadSubscriberMapping.PAMMap.get(ExpiryDay).split(";")[2]).append(",");
																sb.append(Pam_Period).append(",");
																sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_ZERO")).append(",");
																sb.append(Last_Evaluation_Date).append(",");
																sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_ZERO"));
																
																defaultPAMList.add(sb.toString());
															}
															else
															{
																//onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(TargetOffer.split(";")[2] + "," + TargetOffer.split(";")[3])  +":ACTION=Logging");
																onlyLog.add("INC4008:BillCycle PC expiry not matching with PAM:MSISDN=" + msisdn + ":BALANCE_TYPE=" + SourcePAM.split(";")[2] + ":BE_BUCKET_VALUE=" + SourcePAM.split(";")[3] + ":BE_EXPIRY="+ TargetPAM.split(";")[5] +":ACTION=Logging");
															}
														}
													}
												}
											}
										}
									}								
								}
								else
								{
									//this else is only to handle the M and S group
									//if(LoadSubscriberMapping.UniqueBalanceOnlyAMGroupMap.stream().allMatch(t -> ValidGroupBT_ID.stream().anyMatch(t::contains))) {
									if(LoadSubscriberMapping.UniqueBalanceOnlyAMGroupMap.containsAll(ValidGroupBT_ID)) 
									{
										String EXPIRY_DATE = ""; 						     //ValidGroupBalanceOffer.stream().filter(item->item.startsWith("X")).collect(Collectors.toList()).get(0).split("\\|")[1].split(";")[5];
										List<String> BT_BUCKET_ID_LIST = new ArrayList<>();  //ValidGroupBalanceOffer.stream().filter(item->item.startsWith("X")).collect(Collectors.toList()).get(0).split("\\|")[1].split(";")[9];
									
										for(String item : ValidGroupBalanceOffer)
										{
											EXPIRY_DATE = item.split("\\|")[1].split(";")[5];
											BT_BUCKET_ID_LIST.add(item.split("\\|")[1].split(";")[9]);
										}
										
										BT_BUCKET_ID_LIST.forEach(item->CompletedBT_ID.remove(item));
										
										Map<String,String> AMGroupBTs = new HashMap<>();
										for(com.ericsson.jibx.beans.SubscriberXml.SchemasubscriberbalancesdumpInfo TempbalanceInput :  SortedBalanceInput){
											String TempBalance_ID = TempbalanceInput.getBALANCETYPE();
											String TempBalance_Value = TempbalanceInput.getBEBUCKETVALUE();
											String TempBalance_ExpiryDate = TempbalanceInput.getBEEXPIRY();
											//CurrentGroupBalanceID.put(TempBalance_ID + "," + TempBalance_Value + "," + TempBalance_ExpiryDate, TempbalanceInput.getBEBUCKETID());
											
											if(CompletedBT_ID.contains(TempbalanceInput.getBEBUCKETID()))
												continue;
											if(TempBalance_ExpiryDate.equals(EXPIRY_DATE) && LoadSubscriberMapping.UniqueBalanceOnlyAMGroupMap.contains(TempBalance_ID))
											{
												AMGroupBTs.put(TempbalanceInput.getBEBUCKETID(), TempBalance_ID + "|" + TempBalance_Value);
											}
										}
										
										
										Map<String,List<String>> AMGroupOfferMap = ComputeAMGroup(AMGroupBTs, CompletedBT_ID);
										
										//Now Populate the MGroup
										if(AMGroupOfferMap.size() != 0)
										{
											for(Entry<String, List<String>> item : AMGroupOfferMap.entrySet())
											{
												String AMGroupName = item.getKey().split("\\|")[0];
												List<String> UniqueBTID = Arrays.asList(item.getKey().split("\\|")[1].split(",")); 
												List<String> ValidAMGroupBalanceOffer = item.getValue();
												
												int i = 1;
												Set<String> CompletedAMBT = new HashSet<>();
												for(String Str : ValidAMGroupBalanceOffer)
												{
													String SourceOffer = Str.split("\\|")[0];
													String TargetOffer = Str.split("\\|")[1];
													CompletedBT_ID.add(TargetOffer.split(";")[9]);
													
												}													
											}
										}
										else
										{										
											for(String Str : ValidGroupBalanceOffer)
											{
												String TargetOffer = Str.split("\\|")[0];
												String SourceOffer = Str.split("\\|")[1];
												
												CompletedBT_ID.add(SourceOffer.split(";")[9]);
											}
										}
									}
								}														
							//need to put code till here
							}
							else
							{
								CompletedBT_ID.add(balanceInput.getBEBUCKETID());								
							}						
						}
					}				
				}
			}
		}
		return defaultPAMList;
	}

	private List<String> PAMFromDefaultService(String msisdn)
	{
		List<String> defaultPAMList = new ArrayList<>();
		
		/*for (String string : LoadSubscriberMapping.DefaultServicesMap.keySet()) 
		{
			
		}*/			
		LoadSubscriberMapping.DefaultServicesMap.forEach((k,v)->{
			//System.out.println("Item : " + k + " Count : " + v);
			//PAM_Class_ID	PAM_Service_ID	Schedule_ID	Priority
			//14	15	16	17

			if (v.split(",",-1)[1].trim().equals("N"))
			{
				//System.out.println(v);
				if (v.split(",",-1)[16] != "" && v.split(",",-1)[16].length() != 0)
				{
					String Pam_Class_ID = v.split(",",-1)[16];
					String Pam_Service_ID = v.split(",",-1)[17];
					String Schedule_ID = v.split(",",-1)[18];
					String Priority = v.split(",",-1)[19];
					String Current_PAM_Period = v.split(",",-1)[20];
					Format formatter = new SimpleDateFormat("MMM");
				    String MonthName = formatter.format(new Date());
				    			    
				    LocalDate currentDate = LocalDate.now();
				    int doy = currentDate.getYear();
				    
				    Calendar c = Calendar.getInstance();
			        Date date = c.getTime();
			        SimpleDateFormat dfDate = new SimpleDateFormat("yyyy-MM-dd");
			        String CurrentDate = dfDate.format(date);
				    
				    String Pam_Period = "";
				    
				    if(Current_PAM_Period.toUpperCase().equals("DAILY"))
				    	Pam_Period = "Daily_" + String.valueOf(CurrentDate);
				    else 
				    	Pam_Period = "Monthly_" + String.valueOf(doy) + "_" + MonthName; 
					
					
					
					Long Last_Evaluation_Date ;
					
					if(Current_PAM_Period.toUpperCase().equals("DAILY"))
					{
						Last_Evaluation_Date = CommonUtilities.getCurrentPamPeriodInDays("Daily");
					}
					else
					{
						Last_Evaluation_Date =CommonUtilities.getCurrentPamPeriodInDays("Monthly");
					}
					
					StringBuffer sb = new StringBuffer();
					
					sb.append(msisdn).append(",");
					sb.append(Pam_Service_ID).append(",");
					sb.append(Pam_Class_ID).append(",");
					sb.append(Schedule_ID).append(",");
					sb.append(Pam_Period).append(",");
					sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_ZERO")).append(",");
					sb.append(Last_Evaluation_Date).append(",");
					sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_ZERO"));
					
					defaultPAMList.add(sb.toString());
					
					sb = null;
				}
			}			
		});
		
		return defaultPAMList.stream().distinct().collect(Collectors.toList());
	}
	
		
	/******Code to formulate and prepareGroups from product mapping sheet********************/	
	
	private Map<String,Map<String,List<String>>> populateAMGroupResult(String balance_ID,String balance_Value,String START_DATE, String EXPIRY_DATE, String bebucketid, Set<String> CompletedBT_ID) 
	{
		List<String> BalanceOfferList = new ArrayList<>();
		List<String> AMCompleted_ID = new ArrayList<>();
		Map<String,Map<String,List<String>>> GroupOfferMap = new HashMap<>();
		
		Map<String,String> AMGroupBTs = new HashMap<>();
		for(com.ericsson.jibx.beans.SubscriberXml.SchemasubscriberbalancesdumpInfo TempbalanceInput :  SortedBalanceInput){
			String TempBalance_ID = TempbalanceInput.getBALANCETYPE();
			String TempBalance_Value = TempbalanceInput.getBEBUCKETVALUE();
			String TempBalance_ExpiryDate = TempbalanceInput.getBEEXPIRY();
			//CurrentGroupBalanceID.put(TempBalance_ID + "," + TempBalance_Value + "," + TempBalance_ExpiryDate, TempbalanceInput.getBEBUCKETID());
			
			if(CompletedBT_ID.contains(TempbalanceInput.getBEBUCKETID()))
				continue;
			if(TempBalance_ExpiryDate.equals(EXPIRY_DATE) && LoadSubscriberMapping.UniqueBalanceOnlyAMGroupMap.contains(TempBalance_ID))
			{
				AMGroupBTs.put(TempbalanceInput.getBEBUCKETID(), TempBalance_ID + "|" + TempBalance_Value);
			}
		}
		
		
		Map<String,List<String>> AMGroupOfferMap = ComputeAMGroup(AMGroupBTs, CompletedBT_ID);
		
		//Now Populate the MGroup
		if(AMGroupOfferMap.size() != 0)
		{
			for(Entry<String, List<String>> item : AMGroupOfferMap.entrySet())
			{
				String AMGroupName = item.getKey().split("\\|")[0];
				List<String> UniqueBTID = Arrays.asList(item.getKey().split("\\|")[1].split(",")); 
				List<String> ValidAMGroupBalanceOffer = item.getValue();
				
				int i = 1;
				Set<String> CompletedAMBT = new HashSet<>();
				for(String Str : ValidAMGroupBalanceOffer)
				{
					String SourceOffer = Str.split("\\|")[0];
					String TargetOffer = Str.split("\\|")[1];
					if(i <= UniqueBTID.size() && UniqueBTID.contains(SourceOffer.split(";")[2]) && !CompletedAMBT.contains(SourceOffer.split(";")[2]))
					{
						i++;
						if(TargetOffer.split(";")[0].length() != 0)
							BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
									Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],TargetOffer.split(";")[7]));
						CompletedAMBT.add(SourceOffer.split(";")[2]);
						AMCompleted_ID.add(TargetOffer.split(";")[9]);	
					}
					else
					{
						if(LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(SourceOffer.split(";")[2] + "|M") != null)
						{
							String Offer_ID = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(SourceOffer.split(";")[2] + "|M").getOfferID();
							String Offer_Type = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(SourceOffer.split(";")[2] + "|M").getOfferType();
							String Offer_flag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(SourceOffer.split(";")[2] + "|M").getOfferFlag();
							boolean startFlag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(SourceOffer.split(";")[2] + "|M").getOfferStartDate().length() > 0 ? true:false;
							boolean expiryFalg = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(SourceOffer.split(";")[2] + "|M").getOfferExpiryDate().length() > 0 ? true:false;
							String Symbol = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(SourceOffer.split(";")[2] + "|M").getSymbols();
							String BT_VALUE = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(SourceOffer.split(";")[2] + "|M").getBTValue();
							
							if(Symbol.equals(">") && Integer.parseInt(SourceOffer.split(";")[3]) > Integer.parseInt(BT_VALUE))
							{
								BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,TargetOffer.split(";")[4], TargetOffer.split(";")[5],"",Offer_flag));
								trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + SourceOffer.split(";")[2] + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ TargetOffer.split(";")[9]  +":ACTION=Logging");
							}
							if(Symbol.equals(">=") && Integer.parseInt(SourceOffer.split(";")[3]) >= Integer.parseInt(BT_VALUE))
							{
								BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,TargetOffer.split(";")[4], TargetOffer.split(";")[5],"",Offer_flag));
								trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + SourceOffer.split(";")[2] + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ TargetOffer.split(";")[9]  +":ACTION=Logging");
							}
							if(Symbol.equals("=") && Integer.parseInt(SourceOffer.split(";")[3]) == Integer.parseInt(BT_VALUE))
							{
								BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,TargetOffer.split(";")[4], TargetOffer.split(";")[5],"",Offer_flag));
								trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + SourceOffer.split(";")[2] + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ TargetOffer.split(";")[9]  +":ACTION=Logging");
							}
							else
								//onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(TargetOffer.split(";")[2] + "," + TargetOffer.split(";")[3] + "," + SourceOffer.split(";")[5])  +":ACTION=Logging");
								onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + SourceOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + SourceOffer.split(";")[3] + ":BE_BUCKET_ID="+ TargetOffer.split(";")[9]  +":ACTION=Logging");
						}
						AMCompleted_ID.add(TargetOffer.split(";")[9]);
					}
				}													
			}
		}
		else
		{
			if(LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(balance_ID + "|M") != null)
			{
				String Offer_ID = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(balance_ID + "|M").getOfferID();
				String Offer_Type = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(balance_ID + "|M").getOfferType();
				String Offer_flag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(balance_ID + "|M").getOfferFlag();
				boolean startFlag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(balance_ID + "|M").getOfferStartDate().length() > 0 ? true:false;
				boolean expiryFalg = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(balance_ID + "|M").getOfferExpiryDate().length() > 0 ? true:false;
				String Symbol = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(balance_ID + "|M").getSymbols();
				String BT_VALUE = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(balance_ID + "|M").getBTValue();
				
				if(Symbol.equals(">") && Integer.parseInt(balance_Value) > Integer.parseInt(BT_VALUE))
				{
					BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,START_DATE, EXPIRY_DATE,"",Offer_flag));
					trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + balance_ID + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ bebucketid  +":ACTION=Logging");
				}
				if(Symbol.equals(">=") && Integer.parseInt(balance_ID) >= Integer.parseInt(BT_VALUE))
				{
					BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,START_DATE, EXPIRY_DATE,"",Offer_flag));
					trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + balance_ID + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ bebucketid  +":ACTION=Logging");
				}
				if(Symbol.equals("=") && Integer.parseInt(balance_ID) == Integer.parseInt(BT_VALUE))
				{
					BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,START_DATE, EXPIRY_DATE,"",Offer_flag));
					trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + balance_ID + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ bebucketid  +":ACTION=Logging");
				}
				else
					//onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(TargetOffer.split(";")[2] + "," + TargetOffer.split(";")[3] + "," + SourceOffer.split(";")[5])  +":ACTION=Logging");
					onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + balance_ID + ":BE_BUCKET_VALUE=" + balance_Value + ":BE_BUCKET_ID="+ bebucketid  +":ACTION=Logging");
			}
			AMCompleted_ID.add(bebucketid);		
		}
		
		Map<String,List<String>> AMOutputDetails = new HashMap<>();
		if(AMCompleted_ID.size() != 0)
			AMOutputDetails.put("CompletedBT", AMCompleted_ID);
		if(BalanceOfferList.size() != 0)
			AMOutputDetails.put("Offer", BalanceOfferList);
		
		
		GroupOfferMap.put("AMOutputDetails",AMOutputDetails);
		
		return GroupOfferMap;
	}
	
	public String ComputeAGroup(String inputBalance_ID, String inputGroupName, Set<String> CompletedBT_ID) {
		// TODO Auto-generated method stub
		String FinalGroupName ="";
		
		List<String>AllAvailableGroup = new ArrayList<>();
		
		for(Set<String> valueList : LoadSubscriberMapping.BalanceGroupingMap.values()) {					
			if(valueList.contains(inputBalance_ID)){
				AllAvailableGroup.add(LoadSubscriberMapping.getKey(LoadSubscriberMapping.BalanceGroupingMap, valueList));	
			}
		}
		
		Map<String,Set<String>> BestMatch = new ConcurrentHashMap<>(1000, 0.75f, 30);
		for(String A_ID: AllAvailableGroup)
		{
			if(LoadSubscriberMapping.BalanceOnlyAGroupMap.containsKey(A_ID))
			{
				Set<String> A_Items = Arrays.stream(LoadSubscriberMapping.BalanceOnlyAGroupMap.get(A_ID).split(",")).collect(Collectors.toSet());
				int i =0;
				Set<String> A_currentGroup = new HashSet<>();
				for(com.ericsson.jibx.beans.SubscriberXml.SchemasubscriberbalancesdumpInfo balanceInput : SortedBalanceInput)
				{	
					if(CompletedBT_ID.contains(balanceInput.getBEBUCKETID()))
						continue;
					if(A_Items.contains(balanceInput.getBALANCETYPE()))
					{
						i++;
						FinalGroupName = A_ID;
						A_currentGroup.add(balanceInput.getBALANCETYPE());
						continue;
					}
					/*if(A_Items.size() == i)
					{
						FinalGroupName = A_ID;
						break;
					}*/						
				}
				if(A_currentGroup.size() == A_Items.size() && A_Items.containsAll(A_currentGroup))
					return FinalGroupName;
				else
					BestMatch.put(FinalGroupName, A_currentGroup);
			}
		}
		return Collections.max(BestMatch.entrySet(), (entry1, entry2) -> entry1.getValue().size() - entry2.getValue().size()).getKey();
	}
	
	public Map<String,List<String>> ComputeAMGroup(Map<String, String> AMBalanceBT, Set<String> CompletedBT_ID) {
		// TODO Auto-generated method stub
	
		String FinalGroupName ="";
		boolean BestMatchFound = false;
		Map<String,Set<String>> BestMatch = new ConcurrentHashMap<>(1000, 0.75f, 30);
		Set<String> A_currentGroup = new HashSet<>();
		
		Set<Integer> UniqueAMBT = new TreeSet<Integer>();
		
		for(Entry<String,String> item:  AMBalanceBT.entrySet())
		{
			UniqueAMBT.add(Integer.parseInt(item.getValue().split("\\|")[0].trim()));
		}
		// find the AM group	 
		
		List<String> strings = UniqueAMBT.stream().map(Object::toString)
                .collect(Collectors.toList());
		String AMBTValue = String.join(",", strings);
		
		Set<String> AMGroupItems = new HashSet<>();
		AMGroupItems.addAll(LoadSubscriberMapping.getAMGroupKey(LoadSubscriberMapping.BalanceOnlyAMGroupMap,UniqueAMBT));
		
		for(String individualGroup : AMGroupItems)
		{
			//for(com.ericsson.jibx.beans.SubscriberXml.SchemasubscriberbalancesdumpInfo balanceInput : SortedBalanceInput)
			{
				//if(AMBalanceBT.containsKey(balanceInput.getBEBUCKETID()))
				{
					int i = 0;
					for(Map.Entry<String, String> entry : AMBalanceBT.entrySet())
					{
						String BT_ID = entry.getValue().split("\\|")[0];
						String BT_BALANCE = entry.getValue().split("\\|")[1];
						if(LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(BT_ID + "|" + individualGroup) != null)
						{							
							String Symbol = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(BT_ID + "|" + individualGroup).getSymbols();
							String BT_Value = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(BT_ID + "|" + individualGroup).getBTValue();
							
							if(Symbol.equals(">=") && Integer.parseInt(BT_BALANCE) >= Integer.parseInt(BT_Value))
							{
								FinalGroupName = individualGroup;
								continue;
							}
							else if(Symbol.equals(">") && Integer.parseInt(BT_BALANCE) > Integer.parseInt(BT_Value))
							{
								FinalGroupName = individualGroup;
								A_currentGroup.add(BT_ID);
								continue;
							}
							else if(Symbol.equals("=") && Integer.parseInt(BT_BALANCE) == Integer.parseInt(BT_Value))
							{
								FinalGroupName = individualGroup;
								A_currentGroup.add(BT_ID);
								continue;
							}
							else if(Symbol.equals("or"))
							{
								//Integer.parseInt(Balance_Value) == Integer.parseInt(BT_Value)
								String[] values = BT_Value.split("#");											
								if(Arrays.stream(values).anyMatch(BT_ID::equals))
								{
									FinalGroupName = individualGroup;
									A_currentGroup.add(BT_ID);
									continue;
								}																					
							}								
						}						
					}	
				}
			}
			if(A_currentGroup.size() == UniqueAMBT.size())
			{
				BestMatchFound = true;
				break;
			}
			else
				BestMatch.put(FinalGroupName, A_currentGroup);
		}
		
		if(!BestMatchFound && BestMatch.size() > 1)
			FinalGroupName = Collections.max(BestMatch.entrySet(), (entry1, entry2) -> entry1.getValue().size() - entry2.getValue().size()).getKey();
	
		List<String> GroupBalanceOffer = new ArrayList<>();
		Map<String,List<String>> AMGroupOfferMap = new HashMap<>();
		if(FinalGroupName.length() != 0)
		{	
			boolean ExtraOfferFlag = false;
			for(com.ericsson.jibx.beans.SubscriberXml.SchemasubscriberbalancesdumpInfo balanceInput : SortedBalanceInput)
			{
				String TempBalance_ID = balanceInput.getBALANCETYPE();
				if(LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + FinalGroupName) != null)
				{
					if(CompletedBT_ID.contains(balanceInput.getBEBUCKETID()))
						continue;
				
					if(AMBalanceBT.containsKey(balanceInput.getBEBUCKETID()))
					{
						String Offer_ID = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + FinalGroupName).getOfferID();
						String Product_Private = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + FinalGroupName).getProductPrivate();
						String Offer_Flag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + FinalGroupName).getOfferFlag();
						String Offer_Type = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + FinalGroupName).getOfferType();
						String BT_Type = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + FinalGroupName).getBTTYPE();
						boolean startFlag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + FinalGroupName).getOfferStartDate().length() > 0 ? true:false;
						boolean expiryFlag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + FinalGroupName).getOfferExpiryDate().length() > 0 ? true:false;
						String ExtraOffer = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + FinalGroupName).getAddOffer();
						if(!ExtraOffer.isEmpty())
						{
							ExtraOfferFlag = true;
						}
						else
						{
							ExtraOffer = "";
						}
						
						if(Offer_Flag.isEmpty())
						{
							Offer_Flag = LoadSubscriberMapping.CommonConfigMap.get("default_NULL");
						}
						CompletedBT_ID.add(balanceInput.getBEBUCKETID());
						GroupBalanceOffer.add(BT_Type + ";" + balanceInput.getBALANCETYPENAME() + ";" + TempBalance_ID + ";" + balanceInput.getBEBUCKETVALUE() +"|" + Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFlag + ";" + balanceInput.getBEBUCKETSTARTDATE() + ";" + balanceInput.getBEEXPIRY()  + ";" + Product_Private + ";" + Offer_Flag + ";" + ExtraOffer + ";" + balanceInput.getBEBUCKETID());
					}					
				}
			}			
			AMGroupOfferMap.put(FinalGroupName + "|" + AMBTValue, GroupBalanceOffer);
		}
		
		return AMGroupOfferMap;
	}
	
	public Map<String,Map<String,List<String>>>  ComputeASpecialGroup(String inputBalance_ID, Set<String> CompletedBT_ID) {
		// TODO Auto-generated method stub Map<String,List<String>>
		
		List<String> ASGroupName = new ArrayList<>();		
		List<String> GroupBalanceOffer = new ArrayList<>();
		List<String> FinalBalanceOffer = new ArrayList<>();
		Set<String> ASBT_ID = new HashSet<>();
		boolean ExtraOfferFlag = false;
		boolean ASGroupFormed = false;
		Map<String,List<String>> tempGroupBalanceOffer = new HashMap<>();
		
		Map<String,Map<String,List<String>>> ASGroupOfferMap = new HashMap<>();
		ASGroupName = (LoadSubscriberMapping.getASpecialGroupKey(LoadSubscriberMapping.BalanceOnlySpecialAGroupMap,inputBalance_ID));

		//CheckIf A-S-1 is present in the input
		Map<String,Map<String,List<String>>> AS1GroupOfferMap = new HashMap<>();
		AS1GroupOfferMap = CheckifA_S_1Present(CompletedBT_ID);
		
		Map<String,List<String>> OutputDetails = new HashMap<>();
		OutputDetails = ASGroupOfferMap.get("ASOutputDetails");
		if(OutputDetails.containsKey("Offer"))
		{											
			FinalBalanceOffer.addAll(OutputDetails.get("Offer"));											
			CompletedBT_ID.addAll(OutputDetails.get("CompletedBT"));
		}
		
		for(String GroupName : ASGroupName)
		{
			if(!GroupName.startsWith("A-S"))
			{
				GroupBalanceOffer.clear();
				ASBT_ID.clear();
				Set<String> GroupBTItems = LoadSubscriberMapping.BalanceOnlySpecialAGroupMap.get(GroupName);
				for(com.ericsson.jibx.beans.SubscriberXml.SchemasubscriberbalancesdumpInfo TempbalanceInput : SortedBalanceInput)
				{
					String TempBalance_ID = TempbalanceInput.getBALANCETYPE();
					String TempBalance_Value = TempbalanceInput.getBEBUCKETVALUE();
					if(CompletedBT_ID.contains(TempbalanceInput.getBEBUCKETID()))
						continue;
					
					if(GroupBTItems.contains(TempBalance_ID))
					{
						if(LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + GroupName) != null)
						{							
							String Offer_ID = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + GroupName).getOfferID();
							String Symbol = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + GroupName).getSymbols();
							String BT_Value = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + GroupName).getBTValue();
							String Product_Private = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + GroupName).getProductPrivate();
							String Offer_Flag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + GroupName).getOfferFlag();
							String Offer_Type = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + GroupName).getOfferType();
							String BT_Type = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + GroupName).getBTTYPE();
							boolean startFlag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + GroupName).getOfferStartDate().length() > 0 ? true:false;
							boolean expiryFlag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + GroupName).getOfferExpiryDate().length() > 0 ? true:false;
							String ExtraOffer = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + GroupName).getAddOffer();
							if(!ExtraOffer.isEmpty())
							{
								ExtraOfferFlag = true;
							}
							else
							{
								ExtraOffer = "";
							}
							
							if(Offer_Flag.isEmpty())
							{
								Offer_Flag = LoadSubscriberMapping.CommonConfigMap.get("default_NULL");
							}
							ASBT_ID.add(TempbalanceInput.getBEBUCKETID());
							
							if(Symbol.equals(">=") && Integer.parseInt(TempBalance_Value) >= Integer.parseInt(BT_Value))
							{
								GroupBalanceOffer.add(BT_Type + ";" + TempbalanceInput.getBALANCETYPENAME() + ";" + TempBalance_ID + ";" + TempbalanceInput.getBEBUCKETVALUE() +"|" + Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFlag + ";" + TempbalanceInput.getBEBUCKETSTARTDATE() + ";" + TempbalanceInput.getBEEXPIRY()  + ";" + Product_Private + ";" + Offer_Flag + ";" + ExtraOffer + ";" + TempbalanceInput.getBEBUCKETID());
								continue;
							}
							else if(Symbol.equals(">") && Integer.parseInt(TempBalance_Value) > Integer.parseInt(BT_Value))
							{
								GroupBalanceOffer.add(BT_Type + ";" + TempbalanceInput.getBALANCETYPENAME() + ";" + TempBalance_ID + ";" + TempbalanceInput.getBEBUCKETVALUE() +"|" + Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFlag + ";" + TempbalanceInput.getBEBUCKETSTARTDATE() + ";" + TempbalanceInput.getBEEXPIRY()  + ";" + Product_Private + ";" + Offer_Flag + ";" + ExtraOffer + ";" + TempbalanceInput.getBEBUCKETID());						
								continue;
							}
							else if(Symbol.equals("=") && Integer.parseInt(TempBalance_Value) == Integer.parseInt(BT_Value))
							{
								GroupBalanceOffer.add(BT_Type + ";" + TempbalanceInput.getBALANCETYPENAME() + ";" + TempBalance_ID + ";" + TempbalanceInput.getBEBUCKETVALUE() +"|" + Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFlag + ";" + TempbalanceInput.getBEBUCKETSTARTDATE() + ";" + TempbalanceInput.getBEEXPIRY()  + ";" + Product_Private + ";" + Offer_Flag + ";" + ExtraOffer + ";" + TempbalanceInput.getBEBUCKETID());
								continue;
							}
							else if(Symbol.equals("or"))
							{
								//Integer.parseInt(Balance_Value) == Integer.parseInt(BT_Value)
								String[] values = BT_Value.split("#");											
								if(Arrays.stream(values).anyMatch(TempBalance_Value::equals))
								{
									GroupBalanceOffer.add(BT_Type + ";" + TempbalanceInput.getBALANCETYPENAME() + ";" + TempBalance_ID + ";" + TempbalanceInput.getBEBUCKETVALUE() +"|" + Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFlag + ";" + TempbalanceInput.getBEBUCKETSTARTDATE() + ";" + TempbalanceInput.getBEEXPIRY()  + ";" + Product_Private + ";" + Offer_Flag + ";" + ExtraOffer + ";" + TempbalanceInput.getBEBUCKETID());
									continue;
								}																					
							}
							else
							{
								onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TempBalance_ID + ":BE_BUCKET_VALUE=" + TempBalance_Value + ":BE_BUCKET_ID=" + TempbalanceInput.getBEBUCKETID() +":ACTION=Logging");
							}														
						}
						else
						{
							onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TempBalance_ID + ":BE_BUCKET_VALUE=" + TempBalance_Value + ":BE_BUCKET_ID=" + TempbalanceInput.getBEBUCKETID() +":ACTION=Logging");
						}	
					}
				}
				if(GroupBalanceOffer.size() == GroupBTItems.size())
				{
					ASGroupFormed = true;
					break;					
				}
				else
				{
					List<String> temp = new ArrayList<>( GroupBalanceOffer);
					tempGroupBalanceOffer.put(GroupName, temp);
				}
			}
		}
		if(ASGroupFormed)
		{
			String TargetOffer = GroupBalanceOffer.stream().filter(item->item.startsWith("P")).collect(Collectors.toList()).get(0).split("\\|")[1];
			FinalBalanceOffer.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
					Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],TargetOffer.split(";")[7]));
		}
		else
		{
			List<String> ValidGroupBalanceOffer = Collections.max(tempGroupBalanceOffer.entrySet(), (entry1, entry2) -> entry1.getValue().size() - entry2.getValue().size()).getValue();
			
			for(String Str : ValidGroupBalanceOffer)
			{
				String TargetOffer = Str.split("\\|")[0];
				String SourceOffer = Str.split("\\|")[1];
				if(TargetOffer.split(";")[2].equals("1832"))
				{
					for(String GroupName : ASGroupName)
					{
						if(GroupName.startsWith("A-S"))
						{
							if(LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|" + GroupName) != null)
							{
								String Offer_ID = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|" + GroupName).getOfferID();
								String Offer_Type = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|" + GroupName).getOfferType();
								String Offer_flag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|" + GroupName).getOfferFlag();
								boolean startFlag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|" + GroupName).getOfferStartDate().length() > 0 ? true:false;
								boolean expiryFalg = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|" + GroupName).getOfferExpiryDate().length() > 0 ? true:false;
								String Symbol = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|" + GroupName).getSymbols();
								String BT_VALUE = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|" + GroupName).getBTValue();
								
								if(Symbol.equals(">") && Integer.parseInt(TargetOffer.split(";")[3]) > Integer.parseInt(BT_VALUE))
								{
									FinalBalanceOffer.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,SourceOffer.split(";")[4], SourceOffer.split(";")[5],"",Offer_flag));
									trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
								}
								if(Symbol.equals(">=") && Integer.parseInt(TargetOffer.split(";")[3]) >= Integer.parseInt(BT_VALUE))
								{
									FinalBalanceOffer.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,SourceOffer.split(";")[4], SourceOffer.split(";")[5],"",Offer_flag));
									trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
								}
								if(Symbol.equals("=") && Integer.parseInt(TargetOffer.split(";")[3]) == Integer.parseInt(BT_VALUE))
								{
									FinalBalanceOffer.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,SourceOffer.split(";")[4], SourceOffer.split(";")[5],"",Offer_flag));
									trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
								}
							}
								/*else
									//onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(TargetOffer.split(";")[2] + "," + TargetOffer.split(";")[3] + "," + SourceOffer.split(";")[5])  +":ACTION=Logging");
									onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
							}
							else
							{
								//onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(TargetOffer.split(";")[2] + "," + TargetOffer.split(";")[3] + "," + SourceOffer.split(";")[5])  +":ACTION=Logging");
								onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
							}*/
						}
					}
				}
				else
				{
					if(LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M") != null)
					{
						if(TargetOffer.split(";")[2].equals("74"))
						{
							
							List<String> PT_List = Arrays.asList(LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getPTName().split("#"));
							List<String> ValidPT = new ArrayList<>();
							for(String pt : PT_List)
							{
								String PT_Name = pt.split("-")[0];
								String PT_Symbol = pt.split("-")[1];
								String PT_Value = pt.split("-")[2];
								String PT_InputValue = profileTag.GetProfileTagValue(PT_Name);
								if(PT_Symbol.equals("=") && PT_InputValue.equals(PT_Value))
								{
									ValidPT.add(PT_Name);
								}
							}
							if(ValidPT.size() == PT_List.size())
							{
								String Offer_ID = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferID();
								String Offer_Type = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferType();
								String Offer_flag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferFlag();
								boolean startFlag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferStartDate().length() > 0 ? true:false;
								boolean expiryFalg = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferExpiryDate().length() > 0 ? true:false;
								String Symbol = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getSymbols();
								String BT_VALUE = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getBTValue();
								
								if(Symbol.equals(">") && Integer.parseInt(TargetOffer.split(";")[3]) > Integer.parseInt(BT_VALUE))
								{
									FinalBalanceOffer.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,SourceOffer.split(";")[4], SourceOffer.split(";")[5],"",Offer_flag));
									trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
								}
								if(Symbol.equals(">=") && Integer.parseInt(TargetOffer.split(";")[3]) >= Integer.parseInt(BT_VALUE))
								{
									FinalBalanceOffer.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,SourceOffer.split(";")[4], SourceOffer.split(";")[5],"",Offer_flag));
									trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
								}
								if(Symbol.equals("=") && Integer.parseInt(TargetOffer.split(";")[3]) == Integer.parseInt(BT_VALUE))
								{
									FinalBalanceOffer.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,SourceOffer.split(";")[4], SourceOffer.split(";")[5],"",Offer_flag));
									trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
								}
								else
									//onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(TargetOffer.split(";")[2] + "," + TargetOffer.split(";")[3] + "," + SourceOffer.split(";")[5])  +":ACTION=Logging");
									onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
							}
						}
						else
						{						
							String Offer_ID = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferID();
							String Offer_Type = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferType();
							String Offer_flag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferFlag();
							boolean startFlag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferStartDate().length() > 0 ? true:false;
							boolean expiryFalg = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferExpiryDate().length() > 0 ? true:false;
							String Symbol = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getSymbols();
							String BT_VALUE = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getBTValue();
							
							if(Symbol.equals(">") && Integer.parseInt(TargetOffer.split(";")[3]) > Integer.parseInt(BT_VALUE))
							{
								FinalBalanceOffer.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,SourceOffer.split(";")[4], SourceOffer.split(";")[5],"",Offer_flag));
								trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
							}
							if(Symbol.equals(">=") && Integer.parseInt(TargetOffer.split(";")[3]) >= Integer.parseInt(BT_VALUE))
							{
								FinalBalanceOffer.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,SourceOffer.split(";")[4], SourceOffer.split(";")[5],"",Offer_flag));
								trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
							}
							if(Symbol.equals("=") && Integer.parseInt(TargetOffer.split(";")[3]) == Integer.parseInt(BT_VALUE))
							{
								FinalBalanceOffer.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,SourceOffer.split(";")[4], SourceOffer.split(";")[5],"",Offer_flag));
								trackLog.add("INC7001:Master mapping considered:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":OFFER_ID=" + Offer_ID + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
							}
							else
								//onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(TargetOffer.split(";")[2] + "," + TargetOffer.split(";")[3] + "," + SourceOffer.split(";")[5])  +":ACTION=Logging");
								onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
						}
					}
					else
					{
						//onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(TargetOffer.split(";")[2] + "," + TargetOffer.split(";")[3] + "," + SourceOffer.split(";")[5])  +":ACTION=Logging");
						onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ SourceOffer.split(";")[9]  +":ACTION=Logging");
					}
				}
			}
		}
		
		Map<String,List<String>> ASOutputDetails = new HashMap<>();
		if(ASBT_ID.size() != 0)
			ASOutputDetails.put("CompletedBT", new ArrayList<String>(ASBT_ID));
		if(FinalBalanceOffer.size() != 0)
			ASOutputDetails.put("Offer", FinalBalanceOffer);
	
		ASGroupOfferMap.put("ASOutputDetails", ASOutputDetails);
		
		return ASGroupOfferMap;
	}
	
	public void CheckifA_S_1Present(Set<String> CompletedBT_ID)
	{
		boolean ExtraOfferFlag = false;
		List<String> GroupBalanceOffer = new ArrayList<>();
		List<String> FinalBalanceOffer = new ArrayList<>();
		Set<String> ASBT_ID = new HashSet<>();
		Map<String,Map<String,List<String>>> ASGroupOfferMap = new HashMap<>();
		
		for(com.ericsson.jibx.beans.SubscriberXml.SchemasubscriberbalancesdumpInfo balanceInput : SortedBalanceInput)
		{
			String TempBalance_ID = balanceInput.getBALANCETYPE();
			String TempBalance_Value = balanceInput.getBEBUCKETVALUE();
			if(CompletedBT_ID.contains(balanceInput.getBEBUCKETID()))
				continue;
			
			if(TempBalance_ID.equals("1035") && TempBalance_Value.equals("2"))
			{
				String Offer_ID = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|A-S-1").getOfferID();
				String Product_Private = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|A-S-1").getProductPrivate();
				String Offer_Flag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|A-S-1").getOfferFlag();
				String Offer_Type = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|A-S-1").getOfferType();
				String BT_Type = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|A-S-1").getBTTYPE();
				boolean startFlag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|A-S-1").getOfferStartDate().length() > 0 ? true:false;
				boolean expiryFlag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|A-S-1").getOfferExpiryDate().length() > 0 ? true:false;
				String ExtraOffer = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|A-S-1").getAddOffer();
				if(!ExtraOffer.isEmpty())
				{
					ExtraOfferFlag = true;
				}
				else
				{
					ExtraOffer = "";
				}
				
				if(Offer_Flag.isEmpty())
				{
					Offer_Flag = LoadSubscriberMapping.CommonConfigMap.get("default_NULL");
				}
				ASBT_ID.add(balanceInput.getBEBUCKETID());
				GroupBalanceOffer.add(BT_Type + ";" + balanceInput.getBALANCETYPENAME() + ";" + TempBalance_ID + ";" + balanceInput.getBEBUCKETVALUE() +"|" + Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFlag + ";" + balanceInput.getBEBUCKETSTARTDATE() + ";" + balanceInput.getBEEXPIRY()  + ";" + Product_Private + ";" + Offer_Flag + ";" + ExtraOffer + ";" + balanceInput.getBEBUCKETID());
				
			}
			if(TempBalance_ID.equals("74") && Integer.parseInt(TempBalance_Value) >= Integer.parseInt("-999999"))
			{
				String Offer_ID = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|A-S-1").getOfferID();
				String Symbol = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|A-S-1").getSymbols();
				String BT_Value = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|A-S-1").getBTValue();
				String Product_Private = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|A-S-1").getProductPrivate();
				String Offer_Flag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|A-S-1").getOfferFlag();
				String Offer_Type = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|A-S-1").getOfferType();
				String BT_Type = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|A-S-1").getBTTYPE();
				boolean startFlag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|A-S-1").getOfferStartDate().length() > 0 ? true:false;
				boolean expiryFlag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|A-S-1").getOfferExpiryDate().length() > 0 ? true:false;
				String ExtraOffer = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|A-S-1").getAddOffer();
				if(!ExtraOffer.isEmpty())
				{
					ExtraOfferFlag = true;
				}
				else
				{
					ExtraOffer = "";
				}
				
				if(Offer_Flag.isEmpty())
				{
					Offer_Flag = LoadSubscriberMapping.CommonConfigMap.get("default_NULL");
				}
				ASBT_ID.add(balanceInput.getBEBUCKETID());
				GroupBalanceOffer.add(BT_Type + ";" + balanceInput.getBALANCETYPENAME() + ";" + TempBalance_ID + ";" + balanceInput.getBEBUCKETVALUE() +"|" + Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFlag + ";" + balanceInput.getBEBUCKETSTARTDATE() + ";" + balanceInput.getBEEXPIRY()  + ";" + Product_Private + ";" + Offer_Flag + ";" + ExtraOffer + ";" + balanceInput.getBEBUCKETID());
				
			}
		}
		
		if(GroupBalanceOffer.size() == 2)
		{
			if(GroupBalanceOffer.stream().filter(x->x.contains("Blackberry Bundle")).count() == 1 && GroupBalanceOffer.stream().filter(x->x.contains("Blackberry KB")).count() == 1)
			{
				for(String Str : GroupBalanceOffer)
				{
					//M;Blackberry Bundle;1035;2|6014;Timer;false;false;;1970-01-01 00:00:00;Yes;NULL;;752817472
					String TargetOffer = Str.split("\\|")[0];
					String SourceOffer = Str.split("\\|")[1];
					if(!SourceOffer.split(";")[0].isEmpty())
						FinalBalanceOffer.add(PopulateOffer(SourceOffer.split(";")[0],SourceOffer.split(";")[1],Boolean.parseBoolean(SourceOffer.split(";")[2]),Boolean.parseBoolean(SourceOffer.split(";")[3]),SourceOffer.split(";")[4], SourceOffer.split(";")[5],"",""));
				}
			}
		}
		
		Map<String,List<String>> ASOutputDetails = new HashMap<>();
		if(ASBT_ID.size() != 0)
			ASOutputDetails.put("CompletedBT", new ArrayList<String>(ASBT_ID));
		if(FinalBalanceOffer.size() != 0)
			ASOutputDetails.put("Offer", FinalBalanceOffer);
	
		ASGroupOfferMap.put("ASOutputDetails", ASOutputDetails);
		
	}
	
	public String ComputeCGroup(String inputBalance_ID, String inputGroupName , Set<String> CompletedBT_ID) {
		// TODO Auto-generated method stub
		String FinalGroupName ="";
		
		List<String>AllAvailableGroup = new ArrayList<>();
		
		for(Set<String> valueList : LoadSubscriberMapping.BalanceGroupingMap.values()) {					
			if(valueList.contains(inputBalance_ID)){
				AllAvailableGroup.add(LoadSubscriberMapping.getKey(LoadSubscriberMapping.BalanceGroupingMap, valueList));	
			}
		}
		
		Map<String,Set<String>> BestMatch = new ConcurrentHashMap<>(1000, 0.75f, 30);
		for(String A_ID: AllAvailableGroup)
		{
			if(LoadSubscriberMapping.BalanceOnlyCGroupMap.containsKey(A_ID))
			{
				Set<String> A_Items = Arrays.stream(LoadSubscriberMapping.BalanceOnlyCGroupMap.get(A_ID).split(",")).collect(Collectors.toSet());
				int i =0;
				Set<String> A_currentGroup = new HashSet<>();
				for(com.ericsson.jibx.beans.SubscriberXml.SchemasubscriberbalancesdumpInfo balanceInput : SortedBalanceInput)
				{	
					if(CompletedBT_ID.contains(balanceInput.getBEBUCKETID()))
						continue;
					if(A_Items.contains(balanceInput.getBALANCETYPE()))
					{
						i++;
						FinalGroupName = A_ID;
						A_currentGroup.add(balanceInput.getBALANCETYPE());
						continue;
					}
					/*if(A_Items.size() == i)
					{
						FinalGroupName = A_ID;
						break;
					}*/						
				}
				if(A_currentGroup.size() == A_Items.size() && A_Items.containsAll(A_currentGroup))
					return FinalGroupName;
				else
					BestMatch.put(FinalGroupName, A_currentGroup);
			}
		}
		return Collections.max(BestMatch.entrySet(), (entry1, entry2) -> entry1.getValue().size() - entry2.getValue().size()).getKey();

	}
	
	public String ComputeFGroup(String inputBalance_ID, String inputGroupName , Set<String> CompletedBT_ID) {
		// TODO Auto-generated method stub
		String FinalGroupName ="";
		
		List<String>AllAvailableGroup = new ArrayList<>();
		
		for(Set<String> valueList : LoadSubscriberMapping.BalanceGroupingMap.values()) {					
			if(valueList.contains(inputBalance_ID)){
				AllAvailableGroup.add(LoadSubscriberMapping.getKey(LoadSubscriberMapping.BalanceGroupingMap, valueList));	
			}
		}
		
		Map<String,Set<String>> BestMatch = new ConcurrentHashMap<>(1000, 0.75f, 30);
		for(String A_ID: AllAvailableGroup)
		{
			if(LoadSubscriberMapping.BalanceOnlyFGroupMap.containsKey(A_ID))
			{
				Set<String> A_Items = Arrays.stream(LoadSubscriberMapping.BalanceOnlyFGroupMap.get(A_ID).split(",")).collect(Collectors.toSet());
				int i =0;
				Set<String> A_currentGroup = new HashSet<>();
				for(com.ericsson.jibx.beans.SubscriberXml.SchemasubscriberbalancesdumpInfo balanceInput : SortedBalanceInput)
				{
					if(CompletedBT_ID.contains(balanceInput.getBEBUCKETID()))
						continue;
					if(A_Items.contains(balanceInput.getBALANCETYPE()))
					{
						i++;
						FinalGroupName = A_ID;
						A_currentGroup.add(balanceInput.getBALANCETYPE());
						continue;
					}
					/*if(A_Items.size() == i)
					{
						FinalGroupName = A_ID;
						break;
					}*/						
				}
				if(A_currentGroup.size() == A_Items.size() && A_Items.containsAll(A_currentGroup))
					return FinalGroupName;
				else
					BestMatch.put(FinalGroupName, A_currentGroup);
			}
		}
		return Collections.max(BestMatch.entrySet(), (entry1, entry2) -> entry1.getValue().size() - entry2.getValue().size()).getKey();
	}
	
	public String ComputeBGroup(String inputBalance_ID, String inputGroupName , Set<String> CompletedBT_ID) {
		// TODO Auto-generated method stub
		String FinalGroupName ="";
		
		List<String>AllAvailableGroup = new ArrayList<>();
		
		for(Set<String> valueList : LoadSubscriberMapping.BalanceGroupingMap.values()) {					
			if(valueList.contains(inputBalance_ID)){
				AllAvailableGroup.add(LoadSubscriberMapping.getKey(LoadSubscriberMapping.BalanceGroupingMap, valueList));	
			}
		}
		
		Map<String,Set<String>> BestMatch = new ConcurrentHashMap<>(1000, 0.75f, 30);
		for(String A_ID: AllAvailableGroup)
		{
			if(LoadSubscriberMapping.BalanceOnlyBGroupMap.containsKey(A_ID))
			{
				Set<String> A_Items = Arrays.stream(LoadSubscriberMapping.BalanceOnlyBGroupMap.get(A_ID).split(",")).collect(Collectors.toSet());
				int i =0;
				Set<String> A_currentGroup = new HashSet<>();
				for(com.ericsson.jibx.beans.SubscriberXml.SchemasubscriberbalancesdumpInfo balanceInput : SortedBalanceInput)
				{
					if(CompletedBT_ID.contains(balanceInput.getBEBUCKETID()))
						continue;
					if(A_Items.contains(balanceInput.getBALANCETYPE()))
					{
						i++;
						FinalGroupName = A_ID;
						A_currentGroup.add(balanceInput.getBALANCETYPE());
						continue;
					}
					/*if(A_Items.size() == i)
					{
						FinalGroupName = A_ID;
						break;
					}*/						
				}
				if(A_currentGroup.size() == A_Items.size() && A_Items.containsAll(A_currentGroup))
					return FinalGroupName;
				else
					BestMatch.put(FinalGroupName, A_currentGroup);
			}
		}
		return Collections.max(BestMatch.entrySet(), (entry1, entry2) -> entry1.getValue().size() - entry2.getValue().size()).getKey();
	}
	
	public String ComputeDGroup(String inputBalance_ID, String inputGroupName , Set<String> CompletedBT_ID) {
		// TODO Auto-generated method stub
		String FinalGroupName ="";
		
		List<String>AllAvailableGroup = new ArrayList<>();
		
		for(Set<String> valueList : LoadSubscriberMapping.BalanceGroupingMap.values()) {					
			if(valueList.contains(inputBalance_ID)){
				AllAvailableGroup.add(LoadSubscriberMapping.getKey(LoadSubscriberMapping.BalanceGroupingMap, valueList));	
			}
		}
		
		Map<String,Set<String>> BestMatch = new ConcurrentHashMap<>(1000, 0.75f, 30);
		for(String A_ID: AllAvailableGroup)
		{
			if(LoadSubscriberMapping.BalanceOnlyDGroupMap.containsKey(A_ID))
			{
				Set<String> A_Items = Arrays.stream(LoadSubscriberMapping.BalanceOnlyDGroupMap.get(A_ID).split(",")).collect(Collectors.toSet());
				int i =0;
				Set<String> A_currentGroup = new HashSet<>();
				for(com.ericsson.jibx.beans.SubscriberXml.SchemasubscriberbalancesdumpInfo balanceInput : SortedBalanceInput)
				{
					if(CompletedBT_ID.contains(balanceInput.getBEBUCKETID()))
						continue;
					if(A_Items.contains(balanceInput.getBALANCETYPE()))
					{
						i++;
						FinalGroupName = A_ID;
						A_currentGroup.add(balanceInput.getBALANCETYPE());
						continue;
					}
					/*if(A_Items.size() == i)
					{
						FinalGroupName = A_ID;
						break;
					}	*/					
				}
				if(A_currentGroup.size() == A_Items.size() && A_Items.containsAll(A_currentGroup))
					return FinalGroupName;
				else
					BestMatch.put(FinalGroupName, A_currentGroup);
			}
		}
		return Collections.max(BestMatch.entrySet(), (entry1, entry2) -> entry1.getValue().size() - entry2.getValue().size()).getKey();
	}

	private String PopulateOffer(String offer_ID,String Offer_Type, boolean startFlag, boolean expiryFlag, String Balance_StartDate,
			String Balance_ExpiryDate, String Product_Private, String flag) {
		
		
			String Offer_Startdate = "";
			String Offer_StartSec= "";
			String Offer_Expirydate= "";
			String Offer_ExpirySec= "";
			
			if(Balance_StartDate.equals(LoadSubscriberMapping.CommonConfigMap.get("Lifetime_validity_value").toString()))
				Balance_StartDate = "";
			
			if(Balance_ExpiryDate.equals(LoadSubscriberMapping.CommonConfigMap.get("Lifetime_validity_value").toString()))
				Balance_ExpiryDate = "";
			if(Offer_Type.toUpperCase().equals("TIMER"))
			{
				if(!Balance_StartDate.isEmpty() && startFlag)
				{
					Offer_Startdate = CommonUtilities.convertDateToTimerOfferDate(Balance_StartDate)[0].toString();
					Offer_StartSec = CommonUtilities.convertDateToTimerOfferDate(Balance_StartDate)[1].toString();								
				}
				else
				{
					Offer_Startdate = LoadSubscriberMapping.CommonConfigMap.get("default_NULL").toString();
					Offer_StartSec = LoadSubscriberMapping.CommonConfigMap.get("default_NULL").toString();
				}
				if(!Balance_ExpiryDate.isEmpty() && expiryFlag)
				{
					Offer_Expirydate = CommonUtilities.convertDateToTimerOfferDate(Balance_ExpiryDate)[0].toString(); 
					Offer_ExpirySec = CommonUtilities.convertDateToTimerOfferDate(Balance_ExpiryDate)[1].toString(); 
				}
				else
				{
					Offer_Expirydate = LoadSubscriberMapping.CommonConfigMap.get("default_NULL").toString();
					Offer_ExpirySec = LoadSubscriberMapping.CommonConfigMap.get("default_NULL").toString();
				}
			}
			else
			{
				if(!Balance_StartDate.isEmpty())
				{
					Offer_Startdate = CommonUtilities.convertDateToTimerOfferDate(Balance_StartDate)[0].toString();
					Offer_StartSec = LoadSubscriberMapping.CommonConfigMap.get("default_NULL").toString();								
				}
				else
				{
					Offer_Startdate = LoadSubscriberMapping.CommonConfigMap.get("default_NULL").toString();
					Offer_StartSec = LoadSubscriberMapping.CommonConfigMap.get("default_NULL").toString();
				}
				if(!Balance_ExpiryDate.isEmpty())
				{
					Offer_Expirydate = CommonUtilities.convertDateToTimerOfferDate(Balance_ExpiryDate)[0].toString(); 
					Offer_ExpirySec = LoadSubscriberMapping.CommonConfigMap.get("default_NULL").toString(); 
				}
				else
				{
					Offer_Expirydate = LoadSubscriberMapping.CommonConfigMap.get("default_NULL").toString();
					Offer_ExpirySec = LoadSubscriberMapping.CommonConfigMap.get("default_NULL").toString();
				}
			}
			
			
			StringBuffer sb = new StringBuffer();
			sb.append(msisdn).append(",");
			sb.append(offer_ID).append(",");
			sb.append(Offer_Startdate).append(",");
			sb.append(Offer_Expirydate).append(",");
			sb.append(Offer_StartSec).append(",");
			sb.append(Offer_ExpirySec).append(",");
			if(flag.length() == 1)
			{
				sb.append(flag).append(",");
			}
			else
				sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_NULL")).append(",");
			sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_NULL")).append(",");
			sb.append("toBePopulated");
		
		// TODO Auto-generated method stub
		return sb.toString();
	}

}
