package com.ericsson.dm.transform.implementation;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.ExecutionException;
import java.util.stream.Collectors;

import com.ericsson.dm.Utils.CommonUtilities;
import com.ericsson.dm.inititialization.LoadSubscriberMapping;
import com.ericsson.dm.transformation.ExecuteTransformation;
import com.ericsson.jibx.beans.SubscriberXml;
import com.ericsson.jibx.beans.SubscriberXml.SchemasubscriberbalancesdumpInfo;
import com.ericsson.jibx.beans.PROFILETAGLIST.PROFILETAGINFO;

public class Offer implements Comparator<SchemasubscriberbalancesdumpInfo> {
	SubscriberXml subscriber;
	String msisdn;
	String INITIAL_ACTIVATION_DATE;
	String[] ExceptionBalances = {"2112","1387","1219","21","1832","3011","1512","2432"};
	
	Set<String> rejectAndLog;
	Set<String> onlyLog;
	public CopyOnWriteArrayList<SchemasubscriberbalancesdumpInfo> SortedBalanceInput;
	
	public Offer()
	{
		
	}
	 
	public Offer(SubscriberXml subscriber,Set<String> rejectAndLog, Set<String> onlyLog, String INITIAL_ACTIVATION_DATE) {
		// TODO Auto-generated constructor stub
		this.subscriber=subscriber;
		this.rejectAndLog = rejectAndLog;
		this.onlyLog = onlyLog;
		this.INITIAL_ACTIVATION_DATE = INITIAL_ACTIVATION_DATE;
		SortedBalanceInput = new CopyOnWriteArrayList<>();
	}
	public Map<String, List<String>> execute() {
		// TODO Auto-generated method stub
		msisdn = subscriber.getSubscriberInfoMSISDN();
		
		SortedBalanceInput.addAll(subscriber.getBalancesdumpInfoList());
		
		/*System.out.println("--------After sorting----------");
		SortedBalanceInput.forEach(item->{
		System.out.println(item.getBALANCETYPE()+ "#" + item.getBEBUCKETID()+ "#" + item.getBALANCETYPENAME() + "#" + item.getBEEXPIRY());});*/
		
		Collections.sort(SortedBalanceInput,new Offer());
		
		/*System.out.println("--------After sorting----------");
		SortedBalanceInput.forEach(item->{
		System.out.println(item.getBALANCETYPE()+ "#" + item.getBEBUCKETID()+ "#" + item.getBALANCETYPENAME() + "#" + item.getBEEXPIRY());});*/
		
		Map<String,List<String>> map = new HashMap<>();
		map.put("Offer", generateOffers());
		map.put("Pam", generatePam());
		
		SortedBalanceInput.clear();
		return map;
	}
	
	@Override
	public int compare(SchemasubscriberbalancesdumpInfo o1, SchemasubscriberbalancesdumpInfo o2) {
		int value1 = o1.getBEEXPIRY().compareTo(o2.getBEEXPIRY());
        if (value1 == 0) {
        	return o1.getBEBUCKETID().compareTo(o2.getBEBUCKETID());
        }
        return value1;
	}
	
	private List<String> generateOffers(){
		
		List<String> OfferList = new ArrayList<>();	
				
		//offer creation from Balance Mapping sheet
		OfferList.addAll(offerFromBalanceMapping());
				
		//offer creation from Default_Services sheet
		OfferList.addAll(offerFromDefaultService());
		
		//offer creation from Profile_Tags sheet
		OfferList.addAll(offerFromProfileTag());
		
		//offer creation from LifeCycle sheet
		OfferList.addAll(offerFromLifeCycle());
		
		return OfferList;
	}
	
	private List<String> offerFromBalanceMapping()
	{
		/*for(com.ericsson.jibx.beans.SubscriberXml.SchemasubscriberbalancesdumpInfo TempbalanceInput :  subscriber.getBalancesdumpInfoList()){
			System.out.println(TempbalanceInput.getBALANCETYPE() + "********" + TempbalanceInput.getBEBUCKETVALUE());
		}
		LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.forEach((k,v)->System.out.println(v.getBTID() + "++++" + v.getBTGroupIdentifier()));
		*/	

		Date currDate = new Date();
		SimpleDateFormat sdfDaily = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		List<String> BalanceOfferList =new ArrayList<>();
		Set<String> CompletedGroup = new HashSet<>();
		
		Set<String> CompletedBT_ID = new HashSet<>();
		
		
		for(com.ericsson.jibx.beans.SubscriberXml.SchemasubscriberbalancesdumpInfo balanceInput : SortedBalanceInput)
		{			
			String Balance_ID = balanceInput.getBALANCETYPE();
			//System.out.println("Master Balance_ID: " + Balance_ID);
			String Balance_Value = balanceInput.getBEBUCKETVALUE();
			String Balance_StartDate = balanceInput.getBEBUCKETSTARTDATE();
			String Balance_ExpiryDate = balanceInput.getBEEXPIRY();
			
			if(CompletedBT_ID.contains(balanceInput.getBEBUCKETID()))
				continue;
			/*ProfileBalancesID contains the Special BT which is part of Profile_Mapping_Sheet so loading those balances details into
			ProfileBalancesIDDetails Map.*/
			if(LoadSubscriberMapping.ProfileBalancesID.contains(Balance_ID))
			{
				LoadSubscriberMapping.ProfileBalancesIDDetails.put(Balance_ID,Balance_Value+"|"+ Balance_StartDate+"|"+ Balance_ExpiryDate);
			}
			
			if((LoadSubscriberMapping.ProductMappingIgnoreFlag.get(Balance_ID) != null) && LoadSubscriberMapping.ProductMappingIgnoreFlag.get(Balance_ID) == "Y")
			{
				onlyLog.add("INC4003:Balance_Type Ignored:MSISDN=" + msisdn + ":BALANCE_TYPE=" + Balance_ID + ":BE_BUCKET_VALUE=" + Balance_Value +  ":BE_BUCKET_ID=" + balanceInput.getBEBUCKETID() +  ":BE_EXPIRY=" + balanceInput.getBEEXPIRY() + ":ACTION=Logging");
				CompletedBT_ID.add(balanceInput.getBEBUCKETID());
				continue;
			}
			
			/*if(CompletedBT_ID.contains(Balance_ID))
			{
				if(!Balance_ExpiryDate.equals("1970-01-01 00:00:00") && CommonUtilities.convertDateToEpoch(Balance_ExpiryDate) < CommonUtilities.convertDateToEpoch(sdfDaily.format(currDate)))
				{
					//INC4001	Balance_Type expired	MSISDN,BALANCE_TYPE,BE_BUCKET_VALUE,BE_BUCKET_ID,BE_EXPIRY
					onlyLog.add("INC4001:Balance_Type expired:MSISDN=" + msisdn + ":BALANCE_TYPE=" + Balance_ID + ":BE_BUCKET_VALUE=" + Balance_Value +  ":BE_BUCKET_ID=" + balanceInput.getBEBUCKETID() +  ":BE_EXPIRY=" + balanceInput.getBEEXPIRY() + ":ACTION=Logging");
					CompletedBT_ID.add(balanceInput.getBEBUCKETID());
				}
				continue;
			}*/	
			
			
			//Check for expiry Date, log it and proceed further
			if(!Balance_ExpiryDate.equals("1970-01-01 00:00:00") && CommonUtilities.convertDateToEpoch(Balance_ExpiryDate) < CommonUtilities.convertDateToEpoch(sdfDaily.format(currDate)))
			{
				//INC4001	Balance_Type expired	MSISDN,BALANCE_TYPE,BE_BUCKET_VALUE,BE_BUCKET_ID,BE_EXPIRY
				onlyLog.add("INC4001:Balance_Type expired:MSISDN=" + msisdn + ":BALANCE_TYPE=" + Balance_ID + ":BE_BUCKET_VALUE=" + Balance_Value +  ":BE_BUCKET_ID=" + balanceInput.getBEBUCKETID() +  ":BE_EXPIRY=" + balanceInput.getBEEXPIRY() + ":ACTION=Logging");
				CompletedBT_ID.add(balanceInput.getBEBUCKETID());
			}
			else
			{
				if(LoadSubscriberMapping.BalanceEmptyBTGroupIdentifierMap.get(Balance_ID + "|") != null)
				{
					String Offer_ID = LoadSubscriberMapping.BalanceEmptyBTGroupIdentifierMap.get(Balance_ID + "|").getOfferID();
					String Symbol = LoadSubscriberMapping.BalanceEmptyBTGroupIdentifierMap.get(Balance_ID + "|").getSymbols();
					String BT_Value = LoadSubscriberMapping.BalanceEmptyBTGroupIdentifierMap.get(Balance_ID + "|").getBTValue();
					String Product_Private = LoadSubscriberMapping.BalanceEmptyBTGroupIdentifierMap.get(Balance_ID + "|").getProductPrivate();
					String Offer_Type = LoadSubscriberMapping.BalanceEmptyBTGroupIdentifierMap.get(Balance_ID + "|").getOfferType();
					boolean startFlag = LoadSubscriberMapping.BalanceEmptyBTGroupIdentifierMap.get(Balance_ID + "|").getOfferStartDate().length() > 0 ? true:false;
					boolean expiryFalg = LoadSubscriberMapping.BalanceEmptyBTGroupIdentifierMap.get(Balance_ID + "|").getOfferExpiryDate().length() > 0 ? true:false;
									
;					if(!Offer_ID.isEmpty())
					{					
						if(Symbol.isEmpty() && BT_Value.isEmpty())
						{	
							BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate, Product_Private,""));
							CompletedBT_ID.add(balanceInput.getBEBUCKETID());
						}
						else
						{
							if(Symbol.equals(">=") && Integer.parseInt(Balance_Value) >= Integer.parseInt(BT_Value))
								BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,Product_Private,""));
							else if(Symbol.equals(">") && Integer.parseInt(Balance_Value) > Integer.parseInt(BT_Value))
								BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,Product_Private,""));
							else if(Symbol.equals("=") && Integer.parseInt(Balance_Value) == Integer.parseInt(BT_Value))
								BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,Product_Private,""));
							else if(Symbol.equals("or"))
							{
								//Integer.parseInt(Balance_Value) == Integer.parseInt(BT_Value)
								String[] values = BT_Value.split("\\|");
								
								if(Arrays.stream(values).anyMatch(Balance_Value::equals))
								{
									BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,Product_Private,""));
								}
								else
									onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + Balance_ID + ":BE_BUCKET_VALUE=" + Balance_Value + ":BE_BUCKET_ID=" + balanceInput.getBEBUCKETID() +":ACTION=Logging");
							}
							else
								onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + Balance_ID + ":BE_BUCKET_VALUE=" + Balance_Value + ":BE_BUCKET_ID=" + balanceInput.getBEBUCKETID() +":ACTION=Logging");
								//onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + Balance_ID + ":BE_BUCKET_VALUE=" + Balance_Value + ":BE_BUCKET_ID=" + balanceInput.getBEBUCKETID() +":ACTION=Logging");
							CompletedBT_ID.add(balanceInput.getBEBUCKETID());
						}
					}	
				}	
				else
				{	
					if(Arrays.stream(ExceptionBalances).anyMatch(Balance_ID::equals))
					{
						if(Balance_ID.equals("1832") || Balance_ID.equals("1387") || Balance_ID.equals("2112") || Balance_ID.equals("2432"))
						{
							if(LoadSubscriberMapping.SpecialBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + Balance_Value) != null)
							{
								String Offer_ID = LoadSubscriberMapping.SpecialBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + Balance_Value).getOfferID();
								String Offer_Type = LoadSubscriberMapping.SpecialBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + Balance_Value).getOfferType();
								boolean startFlag = LoadSubscriberMapping.SpecialBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + Balance_Value).getOfferStartDate().length() > 0 ? true:false;
								boolean expiryFalg = LoadSubscriberMapping.SpecialBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + Balance_Value).getOfferExpiryDate().length() > 0 ? true:false;
								if(Balance_ID.equals("2112"))
									BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,"",""));
								else
									BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, "","",""));
							}
							else
							{
								onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + Balance_ID + ":BE_BUCKET_VALUE=" + Balance_Value + ":BE_BUCKET_ID=" + balanceInput.getBEBUCKETID() +":ACTION=Logging");
							}
							CompletedBT_ID.add(balanceInput.getBEBUCKETID());
						}
						if(Balance_ID.equals("21"))
						{							
							//LoadSubscriberMapping.MainBalanceGroupingMap.forEach(action->System.out.println(action));Balance_ID + '|' + CCID + '|' + BTGroupIdentifier
							//LoadSubscriberMapping.MainBalanceGroupingList.forEach(BTGrp->
							for (String BTGrp: LoadSubscriberMapping.MainBalanceGroupingList)
							{
								if(LoadSubscriberMapping.MainBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + subscriber.getSubscriberInfoCCSACCTTYPEID() + '|' + BTGrp) != null)
								{
									String Offer_ID = LoadSubscriberMapping.MainBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + subscriber.getSubscriberInfoCCSACCTTYPEID() + '|' + BTGrp).getOfferID();
									String Symbol = LoadSubscriberMapping.MainBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + subscriber.getSubscriberInfoCCSACCTTYPEID() + '|' + BTGrp).getSymbols();
									String Offer_Type = LoadSubscriberMapping.MainBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + subscriber.getSubscriberInfoCCSACCTTYPEID() + '|' + BTGrp).getOfferType();
									boolean startFlag = LoadSubscriberMapping.MainBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + subscriber.getSubscriberInfoCCSACCTTYPEID() + '|' + BTGrp).getOfferStartDate().length() > 0 ? true:false;
									boolean expiryFalg = LoadSubscriberMapping.MainBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + subscriber.getSubscriberInfoCCSACCTTYPEID() + '|' + BTGrp).getOfferExpiryDate().length() > 0 ? true:false;
									String BT_Value = LoadSubscriberMapping.MainBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + subscriber.getSubscriberInfoCCSACCTTYPEID() + '|' + BTGrp).getBTValue();
									CompletedBT_ID.add(balanceInput.getBEBUCKETID());
									
									if(Symbol.equals("<") && Double.parseDouble(Balance_Value) < Double.parseDouble(BT_Value))
									{
										CompletedGroup.add(BTGrp);
										BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,"",""));
									}
									else if(Symbol.equals(">=") && Double.parseDouble(Balance_Value) > Double.parseDouble(BT_Value))
									{
										CompletedGroup.add(BTGrp);
										BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,"",""));
									}
									else if(Symbol.equals("=") && Long.parseLong(Balance_Value) == Long.parseLong(BT_Value))
									{
										CompletedGroup.add(BTGrp);
										BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,"",""));
									}
									else if(Symbol.equals("or"))
									{
										//Integer.parseInt(Balance_Value) == Integer.parseInt(BT_Value)
										String[] values = BT_Value.split("\\|");											
										if(Arrays.stream(values).anyMatch(Balance_Value::equals))
										{
											CompletedGroup.add(BTGrp);
											BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,"",""));
										}
										else
											onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + Balance_ID + ":BE_BUCKET_VALUE=" + Balance_Value + ":BE_BUCKET_ID=" + balanceInput.getBEBUCKETID() +":ACTION=Logging");
									}
									else
									{
										if(Double.parseDouble(Balance_Value) > 120.024 && Double.parseDouble(Balance_Value) < 320.064)
											onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + Balance_ID + ":BE_BUCKET_VALUE=" + Balance_Value + ":BE_BUCKET_ID=" + balanceInput.getBEBUCKETID() +":ACTION=Logging");
									}
								}
							}
						}
						if(Balance_ID.equals("1219"))
						{
							if(LoadSubscriberMapping.SpecialBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + Balance_Value) != null)
							{
								String Offer_ID = LoadSubscriberMapping.SpecialBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + Balance_Value).getOfferID();
								String Offer_Type = LoadSubscriberMapping.SpecialBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + Balance_Value).getOfferType();
								boolean startFlag = LoadSubscriberMapping.SpecialBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + Balance_Value).getOfferStartDate().length() > 0 ? true:false;
								boolean expiryFalg = LoadSubscriberMapping.SpecialBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + Balance_Value).getOfferExpiryDate().length() > 0 ? true:false;
								String StartDate = subscriber.getProfiledumpInfoList().get(0).getPriceShout();
								String CurrectStartDate = "";
								
								if(!StartDate.isEmpty() && StartDate.length() == 14)
									CurrectStartDate = StartDate.substring(0,4) + "-" + StartDate.substring(4,6) + "-" + StartDate.substring(6,8) + " " + StartDate.substring(8,10) + ":" + StartDate.substring(10,12) + ":" + StartDate.substring(12,14);
								
								BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,CurrectStartDate, "","",""));
								
							}
							else
							{
								onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + Balance_ID + ":BE_BUCKET_VALUE=" + Balance_Value + ":BE_BUCKET_ID=" + balanceInput.getBEBUCKETID() +":ACTION=Logging");
							}
							CompletedBT_ID.add(balanceInput.getBEBUCKETID());
						}
						if(Balance_ID.equals("3011"))
						{
							/*3011 is special case in which BT_VALUE is "0|1|2|3|4|5|6|7|8|9|10|11" but from input i will get
							individual value, so i need to find some logic to fix this */
							
							String[] TempBTValue = LoadSubscriberMapping.BT_VALUE_3011.split("\\|");
							
							if(Arrays.stream(TempBTValue).anyMatch(Balance_Value::equals))
							{
								if(LoadSubscriberMapping.SpecialBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + LoadSubscriberMapping.BT_VALUE_3011) != null)
								{
									String Offer_ID = LoadSubscriberMapping.SpecialBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + LoadSubscriberMapping.BT_VALUE_3011).getOfferID();
									String Offer_Type = LoadSubscriberMapping.SpecialBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + LoadSubscriberMapping.BT_VALUE_3011).getOfferType();
									boolean startFlag = LoadSubscriberMapping.SpecialBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + LoadSubscriberMapping.BT_VALUE_3011).getOfferStartDate().length() > 0 ? true:false;
									boolean expiryFalg = LoadSubscriberMapping.SpecialBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + LoadSubscriberMapping.BT_VALUE_3011).getOfferExpiryDate().length() > 0 ? true:false;
									BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,"",""));
									
								}
							}
							else
							{
								onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + Balance_ID + ":BE_BUCKET_VALUE=" + Balance_Value + ":BE_BUCKET_ID=" + balanceInput.getBEBUCKETID() +":ACTION=Logging");
							}
							CompletedBT_ID.add(balanceInput.getBEBUCKETID());
						}
						if(Balance_ID.equals("1512"))
						{
							if(LoadSubscriberMapping.SpecialBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + Balance_Value) != null)
							{
								String Offer_ID = LoadSubscriberMapping.SpecialBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + Balance_Value).getOfferID();
								String Offer_Type = LoadSubscriberMapping.SpecialBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + Balance_Value).getOfferType();
								boolean startFlag = LoadSubscriberMapping.SpecialBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + Balance_Value).getOfferStartDate().length() > 0 ? true:false;
								boolean expiryFalg = LoadSubscriberMapping.SpecialBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + Balance_Value).getOfferExpiryDate().length() > 0 ? true:false;
								BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,INITIAL_ACTIVATION_DATE, "","",""));
							}
							else
							{
								onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + Balance_ID + ":BE_BUCKET_VALUE=" + Balance_Value + ":BE_BUCKET_ID=" + balanceInput.getBEBUCKETID() +":ACTION=Logging");
							}
							CompletedBT_ID.add(balanceInput.getBEBUCKETID());
						}
					}
					else
					{
						String GroupName = "";
						Set<String> CurrentGroupBalance = new HashSet<>();
						List<String> ValidGroupBalanceOffer = new ArrayList<>();
						List<String> FinalOfferList = new ArrayList<>();
						Map<String, String> CurrentGroupBalanceID = new ConcurrentHashMap<>(50, 0.75f, 30);
						boolean ExtraOfferFlag = false;
						for(Set<String> valueList : LoadSubscriberMapping.BalanceGroupingMap.values()) {					
							if(valueList.contains(Balance_ID)){
								GroupName = LoadSubscriberMapping.getKey(LoadSubscriberMapping.BalanceGroupingMap, valueList);
								if(GroupName.startsWith("D-"))
								{
									GroupName = ComputeDGroup(Balance_ID,GroupName);
									CurrentGroupBalance.addAll(LoadSubscriberMapping.BalanceGroupingMap.get(GroupName));
								}
								if(GroupName.startsWith("A-"))
								{
									GroupName = ComputeAGroup(Balance_ID,GroupName);
									CurrentGroupBalance.addAll(LoadSubscriberMapping.BalanceGroupingMap.get(GroupName));
								}
								/*if(GroupName.startsWith("C-"))
								{
									GroupName = ComputeCGroup(Balance_ID,GroupName);
									CurrentGroupBalance.addAll(LoadSubscriberMapping.BalanceGroupingMap.get(GroupName));
								}*/
								if(GroupName.startsWith("F-"))
								{
									GroupName = ComputeFGroup(Balance_ID,GroupName);
									CurrentGroupBalance.addAll(LoadSubscriberMapping.BalanceGroupingMap.get(GroupName));
								}
								else
								{
									CurrentGroupBalance.addAll(valueList);									
								}
								break;
							}
						}	
						
						//if(!CompletedGroup.contains(GroupName))
						{
							//System.out.println(Balance_ID + "----" +GroupName);						
							if(CurrentGroupBalance.size() > 0)
							{
								String FinalGroupName = GroupName;
								//System.out.println(FinalGroupName);	
								for(String id : CurrentGroupBalance)
								{
									//System.out.println(id);
									for(com.ericsson.jibx.beans.SubscriberXml.SchemasubscriberbalancesdumpInfo TempbalanceInput :  SortedBalanceInput){
										String TempBalance_ID = TempbalanceInput.getBALANCETYPE();
										String TempBalance_Name = TempbalanceInput.getBALANCETYPENAME();
										String TempBalance_Value = TempbalanceInput.getBEBUCKETVALUE();
										String TempBalance_StartDate = TempbalanceInput.getBEBUCKETSTARTDATE();
										String TempBalance_ExpiryDate = TempbalanceInput.getBEEXPIRY();
										CurrentGroupBalanceID.put(TempBalance_ID + "," + TempBalance_Value, TempbalanceInput.getBEBUCKETID());
										/*if(!TempBalance_ExpiryDate.equals("1970-01-01 00:00:00") && CommonUtilities.convertDateToEpoch(TempBalance_ExpiryDate) < CommonUtilities.convertDateToEpoch(sdfDaily.format(currDate)))
										{
											//INC4001	Balance_Type expired	MSISDN,BALANCE_TYPE,BE_BUCKET_VALUE,BE_BUCKET_ID,BE_EXPIRY
											onlyLog.add("INC4001:Balance_Type expired:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TempBalance_ID + ":BE_BUCKET_VALUE=" + TempBalance_Value +  ":BE_BUCKET_ID=" + TempbalanceInput.getBEBUCKETID() +  ":BE_EXPIRY=" + TempbalanceInput.getBEEXPIRY() + ":ACTION=Logging");
											CompletedBT_ID.add(balanceInput.getBEBUCKETID());
											continue;
										}*/
										if(CompletedBT_ID.contains(TempbalanceInput.getBEBUCKETID()))
											continue;
										if(id.equals(TempBalance_ID))
										{
											if(LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(id + "|" + FinalGroupName) != null)
											{
												if(!TempBalance_ExpiryDate.equals("1970-01-01 00:00:00") && CommonUtilities.convertDateToEpoch(TempBalance_ExpiryDate) < CommonUtilities.convertDateToEpoch(sdfDaily.format(currDate)))
												{													
													onlyLog.add("INC4001:Balance_Type expired:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TempBalance_ID + ":BE_BUCKET_VALUE=" + TempBalance_Value +  ":BE_BUCKET_ID=" + TempbalanceInput.getBEBUCKETID() +  ":BE_EXPIRY=" + TempbalanceInput.getBEEXPIRY() + ":ACTION=Logging");
													CompletedBT_ID.add(TempbalanceInput.getBEBUCKETID());
													continue;
												}
												String Offer_ID = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + FinalGroupName).getOfferID();
												String Symbol = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + FinalGroupName).getSymbols();
												String BT_Value = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + FinalGroupName).getBTValue();
												String Product_Private = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + FinalGroupName).getProductPrivate();
												String Offer_Flag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + FinalGroupName).getOfferFlag();
												String Offer_Type = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + FinalGroupName).getOfferType();
												String BT_Type = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + FinalGroupName).getBTTYPE();
												boolean startFlag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + FinalGroupName).getOfferStartDate().length() > 0 ? true:false;
												boolean expiryFalg = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + FinalGroupName).getOfferExpiryDate().length() > 0 ? true:false;
												String ExtraOffer = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + FinalGroupName).getAddOffer();
												if(!ExtraOffer.isEmpty())
												{
													ExtraOfferFlag = true;
												}
												else
												{
													ExtraOffer = "";
												}
												
												if(Offer_Flag.isEmpty())
												{
													Offer_Flag = LoadSubscriberMapping.CommonConfigMap.get("default_NULL");
												}
												CompletedBT_ID.add(TempbalanceInput.getBEBUCKETID());
												if(Symbol.equals(">=") && Integer.parseInt(TempBalance_Value) >= Integer.parseInt(BT_Value))
												{
													CompletedGroup.add(FinalGroupName);
													ValidGroupBalanceOffer.add(BT_Type + ";" + TempBalance_Name + ";" + TempBalance_ID + ";" + TempBalance_Value +"|" + Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + TempBalance_StartDate + ";" + TempBalance_ExpiryDate  + ";" + Product_Private + ";" + Offer_Flag + ";" + ExtraOffer);
													if(!Offer_ID.isEmpty())
														FinalOfferList.add(BT_Type + ";" + TempBalance_Name + ";" + TempBalance_ID + ";" + TempBalance_Value +"|" + Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + TempBalance_StartDate + ";" + TempBalance_ExpiryDate  + ";" + Product_Private + ";" + Offer_Flag + ";" + ExtraOffer);
													break;
												}
												else if(Symbol.equals(">") && Integer.parseInt(TempBalance_Value) > Integer.parseInt(BT_Value))
												{
													CompletedGroup.add(FinalGroupName);
													ValidGroupBalanceOffer.add(BT_Type + ";" +TempBalance_Name + ";" + TempBalance_ID + ";" + TempBalance_Value + "|" + Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + TempBalance_StartDate + ";" + TempBalance_ExpiryDate  + ";" + Product_Private + ";" + Offer_Flag + ";" + ExtraOffer);
													if(!Offer_ID.isEmpty())
														FinalOfferList.add(BT_Type + ";" + TempBalance_Name + ";" + TempBalance_ID + ";" + TempBalance_Value +"|" + Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + TempBalance_StartDate + ";" + TempBalance_ExpiryDate  + ";" + Product_Private + ";" + Offer_Flag + ";" + ExtraOffer);
													break;
												}
												else if(Symbol.equals("=") && Integer.parseInt(TempBalance_Value) == Integer.parseInt(BT_Value))
												{
													CompletedGroup.add(FinalGroupName);
													ValidGroupBalanceOffer.add(BT_Type + ";" +TempBalance_Name + ";" + TempBalance_ID + ";" + TempBalance_Value + "|" + Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + TempBalance_StartDate + ";" + TempBalance_ExpiryDate  + ";" + Product_Private + ";" + Offer_Flag + ";" + ExtraOffer);
													if(!Offer_ID.isEmpty())
														FinalOfferList.add(BT_Type + ";" + TempBalance_Name + ";" + TempBalance_ID + ";" + TempBalance_Value +"|" + Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + TempBalance_StartDate + ";" + TempBalance_ExpiryDate  + ";" + Product_Private + ";" + Offer_Flag + ";" + ExtraOffer);
													break;
												}
												else if(Symbol.equals("or"))
												{
													//Integer.parseInt(Balance_Value) == Integer.parseInt(BT_Value)
													String[] values = BT_Value.split("\\|");											
													if(Arrays.stream(values).anyMatch(TempBalance_Value::equals))
													{
														CompletedGroup.add(FinalGroupName);
														ValidGroupBalanceOffer.add(BT_Type + ";" +TempBalance_Name + ";" + TempBalance_ID + ";" + TempBalance_Value + "|" + Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + TempBalance_StartDate + ";" + TempBalance_ExpiryDate  + ";" + Product_Private + ";" + Offer_Flag + ";" + ExtraOffer);
														if(!Offer_ID.isEmpty())
															FinalOfferList.add(BT_Type + ";" + TempBalance_Name + ";" + TempBalance_ID + ";" + TempBalance_Value +"|" + Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + TempBalance_StartDate + ";" + TempBalance_ExpiryDate  + ";" + Product_Private + ";" + Offer_Flag + ";" + ExtraOffer);
														break;
													}
													else
													{
														//CompletedBT_ID.add(TempbalanceInput.getBEBUCKETID());
														onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TempBalance_ID + ":BE_BUCKET_VALUE=" + TempBalance_Value + ":BE_BUCKET_ID=" + TempbalanceInput.getBEBUCKETID() +":ACTION=Logging");
													}														
												}
												else
												{
													//CompletedBT_ID.add(TempbalanceInput.getBEBUCKETID());
													onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TempBalance_ID + ":BE_BUCKET_VALUE=" + TempBalance_Value + ":BE_BUCKET_ID=" + TempbalanceInput.getBEBUCKETID() +":ACTION=Logging");
												}
													
											}
											/*else
											{
												//System.out.println("Discarded Logs: " + id);
												onlyLog.add("INC4004:Balance_Type lookup failed in Product_Mapping:MSISDN=" + msisdn + ":BALANCE_TYPE_ID=" + TempBalance_ID + ":BE_BUCKET_VALUE=" + TempBalance_Value + ":ACTION=Logging");
											}*/
										}
									}
								}
								if(FinalGroupName.startsWith("A-"))
								{
									if(ValidGroupBalanceOffer.size() == CurrentGroupBalance.size())
									{
										String TargetOffer =  ValidGroupBalanceOffer.stream().filter(item->item.startsWith("P")).collect(Collectors.toList()).get(0).split("\\|")[1];
										// Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + Balance_StartDate + ";" + Balance_ExpiryDate  + ";" + Product_Private
										
										BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
												Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],TargetOffer.split(";")[7]));
										
										//CompletedBT_ID.addAll(CurrentGroupBalance);
									}
									else
									{
										//ValidGroupBalanceOffer.stream().filter(item->item.startsWith("P")).count()
										if(ValidGroupBalanceOffer.size() >= 2 && ValidGroupBalanceOffer.stream().filter(item->item.startsWith("P")).count() >=1 && ValidGroupBalanceOffer.stream().filter(item->item.startsWith("M")).count() >=1){
											String TargetOffer =  ValidGroupBalanceOffer.stream().filter(item->item.startsWith("P")).collect(Collectors.toList()).get(0).split("\\|")[1];
											// Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + Balance_StartDate + ";" + Balance_ExpiryDate  + ";" + Product_Private
											
											BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
													Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],TargetOffer.split(";")[7]));
											/*ValidGroupBalanceOffer.forEach(item->{CompletedBT_ID.add(item.split("\\|")[0].split(";")[2]);
											});*/
										}
										else if(ValidGroupBalanceOffer.size() >= 2 &&  ValidGroupBalanceOffer.stream().filter(item->item.startsWith("M")).count() >=1){
										
											for(String Str : ValidGroupBalanceOffer)
											{
												String TargetOffer =  Str.split("\\|")[0];
												if(LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M") != null)
												{
													String Offer_ID = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferID();
													String Offer_Type = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferType();
													String Offer_flag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferFlag();
													boolean startFlag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferStartDate().length() > 0 ? true:false;
													boolean expiryFalg = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferExpiryDate().length() > 0 ? true:false;
													String Symbol = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getSymbols();
													String BT_VALUE = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getBTValue();
													
													if(Symbol.equals(">") && Integer.parseInt(TargetOffer.split(";")[3]) > Integer.parseInt(BT_VALUE))
														BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,"",Offer_flag));
													else
														onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(TargetOffer.split(";")[2] + "," + TargetOffer.split(";")[3])  +":ACTION=Logging");
												}
												else
												{
													onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(TargetOffer.split(";")[2] + "," + TargetOffer.split(";")[3])  +":ACTION=Logging");
												}
											}										
										}
										else if(ValidGroupBalanceOffer.size() == 1)
										{
											//BT_Type + ";" +TempBalance_Name + ";" + TempBalance_ID + ";" + TempBalance_Value + "|" + Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + TempBalance_StartDate + ";" + TempBalance_ExpiryDate  + ";" + Product_Private
											if(ValidGroupBalanceOffer.stream().filter(item->item.startsWith("P")).count() == 1 ){
												String TargetOffer =  ValidGroupBalanceOffer.stream().filter(item->item.startsWith("P")).collect(Collectors.toList()).get(0).split("\\|")[1];
												// Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + Balance_StartDate + ";" + Balance_ExpiryDate  + ";" + Product_Private
												BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
														Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],TargetOffer.split(";")[7]));
											}
											if(ValidGroupBalanceOffer.stream().filter(item->item.startsWith("M")).count() == 1){
												String TargetOffer =  ValidGroupBalanceOffer.get(0).split("\\|")[0];
												if(LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M") != null)
												{
													String Offer_ID = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferID();
													String Offer_Type = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferType();
													String Offer_flag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferFlag();
													boolean startFlag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferStartDate().length() > 0 ? true:false;
													boolean expiryFalg = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferExpiryDate().length() > 0 ? true:false;
													String Symbol = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getSymbols();
													String BT_VALUE = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getBTValue();
													
													if(Symbol.equals(">") && Integer.parseInt(TargetOffer.split(";")[3]) > Integer.parseInt(BT_VALUE))
														BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,"",Offer_flag));
													else
														onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(TargetOffer.split(";")[2] + "," + TargetOffer.split(";")[3])  +":ACTION=Logging");
												}
												else
												{
													onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(TargetOffer.split(";")[2] + "," + TargetOffer.split(";")[3])  +":ACTION=Logging");
												}
											}
											//CompletedBT_ID.addAll(CurrentGroupBalance);
										}
									}								
								}
								if(FinalGroupName.startsWith("B-"))
								{
									if(ValidGroupBalanceOffer.size() == CurrentGroupBalance.size())
									{
										String TargetOffer =  ValidGroupBalanceOffer.stream().filter(item->item.startsWith("C")).collect(Collectors.toList()).get(0).split("\\|")[1];
										// Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + Balance_StartDate + ";" + Balance_ExpiryDate  + ";" + Product_Private
										
										BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
												Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],TargetOffer.split(";")[7]));
										
										//CompletedBT_ID.addAll(CurrentGroupBalance);
									}
									else
									{
										for(String Str : ValidGroupBalanceOffer)
										{
											String TargetOffer =  Str.split("\\|")[0];
											onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(TargetOffer.split(";")[2] + "," + TargetOffer.split(";")[3]) +":ACTION=Logging");
										}							
									}
								}
								
								if(FinalGroupName.startsWith("C-"))
								{
									if(ValidGroupBalanceOffer.size() == CurrentGroupBalance.size())
									{									
										String TargetOffer =  ValidGroupBalanceOffer.stream().filter(item->item.startsWith("P")).collect(Collectors.toList()).get(0).split("\\|")[1];
										// Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + Balance_StartDate + ";" + Balance_ExpiryDate  + ";" + Product_Private
										BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
												Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],TargetOffer.split(";")[7]));
										//CompletedBT_ID.addAll(CurrentGroupBalance);
									}	
									else
									{
										//ValidGroupBalanceOffer.stream().filter(item->item.startsWith("P")).count()
										if(ValidGroupBalanceOffer.size() >= 2 && ValidGroupBalanceOffer.stream().filter(item->item.startsWith("P")).count() >=1 && ValidGroupBalanceOffer.stream().filter(item->item.startsWith("M")).count() >=1){
											String TargetOffer =  ValidGroupBalanceOffer.stream().filter(item->item.startsWith("P")).collect(Collectors.toList()).get(0).split("\\|")[1];
											// Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + Balance_StartDate + ";" + Balance_ExpiryDate  + ";" + Product_Private
											
											BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
													Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],TargetOffer.split(";")[7]));
											
											/*ValidGroupBalanceOffer.forEach(item->{
												CompletedBT_ID.add(item.split("\\|")[0].split(";")[2]);
											});*/
										}
										else if(ValidGroupBalanceOffer.size() >= 2 &&  ValidGroupBalanceOffer.stream().filter(item->item.startsWith("M")).count() >=1){
										
											for(String Str : ValidGroupBalanceOffer)
											{
												String TargetOffer =  Str.split("\\|")[0];
												if(LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M") != null)
												{
													String Offer_ID = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferID();
													String Offer_Type = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferType();
													boolean startFlag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferStartDate().length() > 0 ? true:false;
													boolean expiryFalg = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferExpiryDate().length() > 0 ? true:false;
													String Offer_flag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferFlag();
													String Symbol = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getSymbols();
													String BT_VALUE = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getBTValue();
													
													if(Symbol.equals(">") && Integer.parseInt(TargetOffer.split(";")[3]) > Integer.parseInt(BT_VALUE))
														BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,"",Offer_flag));
													else
														onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(TargetOffer.split(";")[2] + "," + TargetOffer.split(";")[3])  +":ACTION=Logging");
												}
												else
												{
													onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(TargetOffer.split(";")[2] + "," + TargetOffer.split(";")[3])  +":ACTION=Logging");
												}
											}										
										}
										else if(ValidGroupBalanceOffer.size() == 1)
										{
											//BT_Type + ";" +TempBalance_Name + ";" + TempBalance_ID + ";" + TempBalance_Value + "|" + Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + TempBalance_StartDate + ";" + TempBalance_ExpiryDate  + ";" + Product_Private
											if(ValidGroupBalanceOffer.stream().filter(item->item.startsWith("P")).count() == 1 ){
												String TargetOffer =  ValidGroupBalanceOffer.get(0).split("\\|")[0];
												onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(TargetOffer.split(";")[2] + "," + TargetOffer.split(";")[3])  +":ACTION=Logging");
											}
											if(ValidGroupBalanceOffer.stream().filter(item->item.startsWith("M")).count() == 1){
												String TargetOffer =  ValidGroupBalanceOffer.get(0).split("\\|")[0];
												if(LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M") != null)
												{
													String Offer_ID = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferID();
													String Offer_Type = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferType();
													boolean startFlag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferStartDate().length() > 0 ? true:false;
													boolean expiryFalg = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferExpiryDate().length() > 0 ? true:false;
													String Offer_flag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferFlag();
													String Symbol = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getSymbols();
													String BT_VALUE = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getBTValue();
													
													if(Symbol.equals(">") && Integer.parseInt(TargetOffer.split(";")[3]) > Integer.parseInt(BT_VALUE))
														BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,"",Offer_flag));
													else
														onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(TargetOffer.split(";")[2] + "," + TargetOffer.split(";")[3])  +":ACTION=Logging");
												}
												else
												{													
													onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(TargetOffer.split(";")[2] + "," + TargetOffer.split(";")[3])  +":ACTION=Logging");
												}
											}										
										}
										//CompletedBT_ID.addAll(CurrentGroupBalance);
									}								
								}
								if(FinalGroupName.startsWith("D-"))
								{
									if(ValidGroupBalanceOffer.size() == CurrentGroupBalance.size())
									{									
										String TargetOffer =  ValidGroupBalanceOffer.stream().filter(item->item.startsWith("C")).collect(Collectors.toList()).get(0).split("\\|")[1];
										// Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + Balance_StartDate + ";" + Balance_ExpiryDate  + ";" + Product_Private
										BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
												Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],TargetOffer.split(";")[7]));
										//CompletedBT_ID.addAll(CurrentGroupBalance);
									}	
									else
									{
										for(String Str : ValidGroupBalanceOffer)
										{
											String TargetOffer =  Str.split("\\|")[0];
											if(LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M") != null)
											{
												String Offer_ID = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferID();
												String Offer_Type = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferType();
												String Offer_flag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferFlag();
												boolean startFlag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferStartDate().length() > 0 ? true:false;
												boolean expiryFalg = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getOfferExpiryDate().length() > 0 ? true:false;
												String Symbol = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getSymbols();
												String BT_VALUE = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TargetOffer.split(";")[2] + "|M").getBTValue();
												
												if(Symbol.equals(">") && Integer.parseInt(TargetOffer.split(";")[3]) > Integer.parseInt(BT_VALUE))
													BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,"",Offer_flag));
												else
													onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(TargetOffer.split(";")[2] + "," + TargetOffer.split(";")[3])  +":ACTION=Logging");
											}
											else
											{												
												onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(TargetOffer.split(";")[2] + "," + TargetOffer.split(";")[3])  +":ACTION=Logging");
											}
										}		
									}
								}
								if(FinalGroupName.startsWith("F"))
								{
									if(ValidGroupBalanceOffer.size() == CurrentGroupBalance.size())
									{	
										//the reason for putting code in catch is some group doesn't have P so in that group check for M 
										//BT_Type + ";" +TempBalance_Name + ";" + TempBalance_ID + ";" + TempBalance_Value + "|" + Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + TempBalance_StartDate + ";" + TempBalance_ExpiryDate  + ";" + Product_Private + ";" + Offer_Flag + ";" + ExtraOffer
										for(String OfferValue : FinalOfferList)
										{
											String OfferId = OfferValue.split("\\|",-1)[1].split(";",-1)[0];
											if(!OfferId.isEmpty())
											{
												String TargetOffer = OfferValue.split("\\|",-1)[1];
												if(OfferValue.split("\\|",-1)[0].split(";",-1)[0].equals("S"))
												{													
													for(int i = 0; i < Integer.parseInt(OfferValue.split("\\|",-1)[0].split(";",-1)[3]); i++)
													{
														BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
																Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],TargetOffer.split(";")[7]));
														//CompletedBT_ID.addAll(CurrentGroupBalance);
													}
												}
												else
												{
													BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
															Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],TargetOffer.split(";")[7]));
												}
											}
										}										
									}
									else
									{
										String MPresent = ValidGroupBalanceOffer.stream().filter(item->item.startsWith("M")).findFirst().orElse(null);
										if(MPresent != null)
										{
											if(ValidGroupBalanceOffer.size() == 1 && FinalOfferList.size() == 0)
											{
												String GroupLastChar = FinalGroupName.substring(FinalGroupName.length()-1,FinalGroupName.length());
												String MasterGroupName = FinalGroupName.replace(GroupLastChar, "M");
												String BT_ID = MPresent.split("\\|")[0].split(";")[2];
												String SourceBT_Value = MPresent.split("\\|")[0].split(";")[3];
												String BT_StartDate  = MPresent.split("\\|")[1].split(";")[4];
												String BT_ExpiryDate  = MPresent.split("\\|")[1].split(";")[5];
												if(LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(BT_ID + "|" + MasterGroupName) != null)
												{
													String Offer_ID = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(BT_ID + "|" + MasterGroupName).getOfferID();
													String Offer_Type = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(BT_ID + "|" + MasterGroupName).getOfferType();
													String Offer_flag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(BT_ID + "|" + MasterGroupName).getOfferFlag();
													boolean startFlag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(BT_ID + "|" + MasterGroupName).getOfferStartDate().length() > 0 ? true:false;
													boolean expiryFalg = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(BT_ID + "|" + MasterGroupName).getOfferExpiryDate().length() > 0 ? true:false;
													String Symbol = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(BT_ID + "|" + MasterGroupName).getSymbols();
													String BT_VALUE = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(BT_ID + "|" + MasterGroupName).getBTValue();
													String BT_Type = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(BT_ID + "|" + MasterGroupName).getBTTYPE();
													boolean bCreateOffer = false;
													if(Symbol.equals(">=") && Integer.parseInt(SourceBT_Value) >= Integer.parseInt(BT_VALUE))
														bCreateOffer = true;
													else if(Symbol.equals(">") && Integer.parseInt(SourceBT_Value) > Integer.parseInt(BT_VALUE))
														bCreateOffer = true;
													else
													{
														onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + BT_ID + ":BE_BUCKET_VALUE=" + SourceBT_Value + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(BT_ID + "," + SourceBT_Value)  +":ACTION=Logging");
														break;
													}
													if(BT_Type.equals("M") && bCreateOffer)
													{														
														BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,BT_StartDate, BT_ExpiryDate,"",Offer_flag));
													}
													else if(BT_Type.equals("S") && bCreateOffer)
													{
														for(int i = 0; i < Integer.parseInt(SourceBT_Value); i++)
														{
															BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,BT_StartDate, BT_ExpiryDate,"",Offer_flag));
														}
													}
												}
												else
												{												
													onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + BT_ID + ":BE_BUCKET_VALUE=" + SourceBT_Value + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(BT_ID + "," + SourceBT_Value)  +":ACTION=Logging");
												}
												
											}
											else
											{
												String PCPresent = ValidGroupBalanceOffer.stream().filter(item->item.startsWith("P")).findFirst().orElse(null);
												if(PCPresent == null)
												{
													String GroupLastChar = FinalGroupName.substring(FinalGroupName.length()-1,FinalGroupName.length());
													String MasterGroupName = FinalGroupName.replace(GroupLastChar, "M");
													for(String OfferValue : ValidGroupBalanceOffer)
													{
														String BT_ID = OfferValue.split("\\|")[0].split(";")[2];
														String SourceBT_Value = OfferValue.split("\\|")[0].split(";")[3];
														String BT_StartDate  = OfferValue.split("\\|")[1].split(";")[4];
														String BT_ExpiryDate  = OfferValue.split("\\|")[1].split(";")[5];
														if(LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(BT_ID + "|" + MasterGroupName) != null)
														{
															String Offer_ID = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(BT_ID + "|" + MasterGroupName).getOfferID();
															String Offer_Type = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(BT_ID + "|" + MasterGroupName).getOfferType();
															String Offer_flag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(BT_ID + "|" + MasterGroupName).getOfferFlag();
															boolean startFlag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(BT_ID + "|" + MasterGroupName).getOfferStartDate().length() > 0 ? true:false;
															boolean expiryFalg = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(BT_ID + "|" + MasterGroupName).getOfferExpiryDate().length() > 0 ? true:false;
															String Symbol = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(BT_ID + "|" + MasterGroupName).getSymbols();
															String BT_VALUE = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(BT_ID + "|" + MasterGroupName).getBTValue();
															String BT_Type = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(BT_ID + "|" + MasterGroupName).getBTTYPE();
															boolean bCreateOffer = false;
															if(Symbol.equals(">=") && Integer.parseInt(SourceBT_Value) >= Integer.parseInt(BT_VALUE))
																bCreateOffer = true;
															else if(Symbol.equals(">") && Integer.parseInt(SourceBT_Value) > Integer.parseInt(BT_VALUE))
																bCreateOffer = true;
															else
															{
																onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + BT_ID + ":BE_BUCKET_VALUE=" + SourceBT_Value + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(BT_ID + "," + SourceBT_Value)  +":ACTION=Logging");
																break;
															}
															if(BT_Type.equals("M"))
															{														
																BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,BT_StartDate, BT_ExpiryDate,"",Offer_flag));
															}
															else if(BT_Type.equals("S"))
															{
																for(int i = 0; i < Integer.parseInt(SourceBT_Value); i++)
																{
																	BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,BT_StartDate, BT_ExpiryDate,"",Offer_flag));
																}
															}
														}
														else
														{												
															onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + BT_ID + ":BE_BUCKET_VALUE=" + SourceBT_Value + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(BT_ID + "," + SourceBT_Value)  +":ACTION=Logging");
														}
													}
												}
												else
												{												
													for(String OfferValue : FinalOfferList)
													{
														String OfferId = OfferValue.split("\\|",-1)[1].split(";",-1)[0];
														if(!OfferId.isEmpty())
														{
															String TargetOffer = OfferValue.split("\\|",-1)[1];
															if(OfferValue.split("\\|",-1)[0].split(";",-1)[0].equals("S"))
															{													
																for(int i = 0; i < Integer.parseInt(OfferValue.split("\\|",-1)[0].split(";",-1)[3]); i++)
																{
																	BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
																			Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],TargetOffer.split(";")[7]));
																	//CompletedBT_ID.addAll(CurrentGroupBalance);
																}
															}
															else
															{
																BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
																		Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],TargetOffer.split(";")[7]));
															}
														}
													}	
												}
											}											
										}
										else
										{
											for(String OfferValue : FinalOfferList)
											{												
												String TargetOffer = OfferValue.split("\\|",-1)[1];
												onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(TargetOffer.split(";")[2] + "," + TargetOffer.split(";")[3])  +":ACTION=Logging");
											}
										}
									}
								}
								if(FinalGroupName.startsWith("TestF-"))
								{
									if(ValidGroupBalanceOffer.size() == CurrentGroupBalance.size())
									{	
										//the reason for putting code in catch is some group doesn't have P so in that group check for M 
										try
										{
											String TargetOffer =  ValidGroupBalanceOffer.stream().filter(item->item.startsWith("P")).collect(Collectors.toList()).get(0).split("\\|")[1];
											// Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + Balance_StartDate + ";" + Balance_ExpiryDate  + ";" + Product_Private
											BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
													Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],TargetOffer.split(";")[7]));
											//CompletedBT_ID.addAll(CurrentGroupBalance);
										}
										catch (Exception ex)
										{
											String TargetOffer =  ValidGroupBalanceOffer.stream().filter(item->item.startsWith("M")).collect(Collectors.toList()).get(0).split("\\|")[1];
											// Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + Balance_StartDate + ";" + Balance_ExpiryDate  + ";" + Product_Private
											BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
													Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],TargetOffer.split(";")[7]));
											//CompletedBT_ID.addAll(CurrentGroupBalance);
										}
										//this is to take out S and then create x number of offers
										try
										{
											String TargetOffer =  ValidGroupBalanceOffer.stream().filter(item->item.startsWith("S")).collect(Collectors.toList()).get(0).split("\\|")[1];
											for(int i = 0; i<2; i++)
											{
												BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
														Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],TargetOffer.split(";")[7]));
												//CompletedBT_ID.addAll(CurrentGroupBalance);
											}
										}
										catch(Exception ex){				
										}
									}
									else
									{
										
										if(ValidGroupBalanceOffer.size() ==2)
										{
											try
											{
												String TargetOffer1 =  ValidGroupBalanceOffer.stream().filter(item->item.startsWith("P")).collect(Collectors.toList()).get(0).split("\\|")[1];
												String TargetOffer2 =  ValidGroupBalanceOffer.stream().filter(item->item.startsWith("S")).collect(Collectors.toList()).get(0).split("\\|")[1];
												//check if both preset than only add to offer
												BalanceOfferList.add(PopulateOffer(TargetOffer1.split(";")[0],TargetOffer1.split(";")[1],Boolean.parseBoolean(TargetOffer1.split(";")[2]),
														Boolean.parseBoolean(TargetOffer1.split(";")[3]),TargetOffer1.split(";")[4], TargetOffer1.split(";")[5],TargetOffer1.split(";")[6],TargetOffer1.split(";")[7]));
												//CompletedBT_ID.addAll(CurrentGroupBalance);
												
												String SourceOffer = ValidGroupBalanceOffer.stream().filter(item->item.startsWith("S")).collect(Collectors.toList()).get(0).split("\\|")[0];
												for(int i = 0; i < Integer.parseInt(SourceOffer.split(";")[3]); i++)
												{
													BalanceOfferList.add(PopulateOffer(TargetOffer2.split(";")[0],TargetOffer2.split(";")[1],Boolean.parseBoolean(TargetOffer2.split(";")[2]),
															Boolean.parseBoolean(TargetOffer2.split(";")[3]),TargetOffer2.split(";")[4], TargetOffer2.split(";")[5],TargetOffer2.split(";")[6],TargetOffer2.split(";")[7]));
													//CompletedBT_ID.addAll(CurrentGroupBalance);
												}	
											}
											catch(Exception ex)
											{
												try
												{
													String TargetOffer3 =  ValidGroupBalanceOffer.stream().filter(item->item.startsWith("P")).collect(Collectors.toList()).get(0).split("\\|")[1];
													String TargetOffer4 =  ValidGroupBalanceOffer.stream().filter(item->item.startsWith("M")).collect(Collectors.toList()).get(0).split("\\|")[1];
													
													BalanceOfferList.add(PopulateOffer(TargetOffer3.split(";")[0],TargetOffer3.split(";")[1],Boolean.parseBoolean(TargetOffer3.split(";")[2]),
															Boolean.parseBoolean(TargetOffer3.split(";")[3]),TargetOffer3.split(";")[4], TargetOffer3.split(";")[5],TargetOffer3.split(";")[6],TargetOffer3.split(";")[7]));
													//CompletedBT_ID.addAll(CurrentGroupBalance);
													
													
													BalanceOfferList.add(PopulateOffer(TargetOffer4.split(";")[0],TargetOffer4.split(";")[1],Boolean.parseBoolean(TargetOffer4.split(";")[2]),
															Boolean.parseBoolean(TargetOffer4.split(";")[3]),TargetOffer4.split(";")[4], TargetOffer4.split(";")[5],TargetOffer4.split(";")[6],TargetOffer4.split(";")[7]));
													//CompletedBT_ID.addAll(CurrentGroupBalance);
												}
												catch(Exception ex1)
												{		
													String TargetOffer5 =  ValidGroupBalanceOffer.stream().filter(item->item.startsWith("M")).collect(Collectors.toList()).get(0).split("\\|")[1];
													String TargetOffer6 =  ValidGroupBalanceOffer.stream().filter(item->item.startsWith("S")).collect(Collectors.toList()).get(0).split("\\|")[1];
													
													BalanceOfferList.add(PopulateOffer(TargetOffer5.split(";")[0],TargetOffer5.split(";")[1],Boolean.parseBoolean(TargetOffer5.split(";")[2]),
															Boolean.parseBoolean(TargetOffer5.split(";")[3]),TargetOffer5.split(";")[4], TargetOffer5.split(";")[5],TargetOffer5.split(";")[6],TargetOffer5.split(";")[7]));
													//CompletedBT_ID.addAll(CurrentGroupBalance);
													
													
													String SourceOffer = ValidGroupBalanceOffer.stream().filter(item->item.startsWith("S")).collect(Collectors.toList()).get(0).split("\\|")[0];
													for(int i = 0; i < Integer.parseInt(SourceOffer.split(";")[3]); i++)
													{
														BalanceOfferList.add(PopulateOffer(TargetOffer6.split(";")[0],TargetOffer6.split(";")[1],Boolean.parseBoolean(TargetOffer6.split(";")[2]),
																Boolean.parseBoolean(TargetOffer6.split(";")[3]),TargetOffer6.split(";")[4], TargetOffer6.split(";")[5],TargetOffer6.split(";")[6],TargetOffer6.split(";")[7]));
														//CompletedBT_ID.addAll(CurrentGroupBalance);
													}	
												}
											}
										}
										if(ValidGroupBalanceOffer.size() == 1)
										{
											
											try
											{
												String TargetOffer =  ValidGroupBalanceOffer.stream().filter(item->item.startsWith("P")).collect(Collectors.toList()).get(0).split("\\|")[1];
												onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(TargetOffer.split(";")[2] + "," + TargetOffer.split(";")[3])  +":ACTION=Logging");
											}
											catch(Exception ex)
											{
												try
												{
													//The first if is to implement the special group F3
													String TargetOffer =  ValidGroupBalanceOffer.stream().filter(item->item.startsWith("S")).collect(Collectors.toList()).get(0).split("\\|")[1];
													String SourceOffer =  ValidGroupBalanceOffer.stream().filter(item->item.startsWith("S")).collect(Collectors.toList()).get(0).split("\\|")[0];
													if(SourceOffer.startsWith("S;RoamDailyAPurch"))
													{
														//The first if is to implement the special group F3
														BalanceOfferList.add(PopulateOffer("5056",TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
																Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],TargetOffer.split(";")[7]));
														//CompletedBT_ID.addAll(CurrentGroupBalance);
													}
													else
														onlyLog.add("INC4004:Balance_Type match condition failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + TargetOffer.split(";")[2] + ":BE_BUCKET_VALUE=" + TargetOffer.split(";")[3] + ":BE_BUCKET_ID="+ CurrentGroupBalanceID.get(TargetOffer.split(";")[2] + "," + TargetOffer.split(";")[3])  +":ACTION=Logging");
												}
												catch(Exception ex2)
												{
													//The first if is to implement the special group F3
													String TargetOffer =  ValidGroupBalanceOffer.stream().filter(item->item.startsWith("M")).collect(Collectors.toList()).get(0).split("\\|")[1];
													String SourceOffer =  ValidGroupBalanceOffer.stream().filter(item->item.startsWith("M")).collect(Collectors.toList()).get(0).split("\\|")[0];
													String OfferName = SourceOffer.split(";")[1];
													if(OfferName.equals("RoamDataDailyA"))
													{
														BalanceOfferList.add(PopulateOffer("5056",TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
																Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],TargetOffer.split(";")[7]));
														//CompletedBT_ID.addAll(CurrentGroupBalance);
													}												
													else
													{
														BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
															Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],TargetOffer.split(";")[7]));
														//CompletedBT_ID.addAll(CurrentGroupBalance);
													}
												}
											}
										}
									}
								}
								
								if(ExtraOfferFlag)
								{	
									ExtraOfferFlag = false;
									for(String s: ValidGroupBalanceOffer)
									{
										if(s.split("\\|")[1].split(";").length > 8)
										{
											String AddedOffer= s.split("\\|")[1].split(";")[8];
											if(!AddedOffer.isEmpty())
											{
												String[] ListofAddedOffer;
												if(AddedOffer.contains(":"))
													ListofAddedOffer = AddedOffer.split(":")[0].split("\\|");
												else
													ListofAddedOffer = new String[]{AddedOffer};
												
												for(int i = 0; i<ListofAddedOffer.length; i++)
												{
													if(ListofAddedOffer[i].length() > 1)
													{
														String[] OfferValues = ListofAddedOffer[i].split("-");
														//String offer_ID,String Offer_Type, boolean startFlag, boolean expiryFlag, 
														//String Balance_StartDate, String Balance_ExpiryDate, String Product_Private, String flag)
														String Timer = OfferValues[0];
														String Product_Private = OfferValues[1];
														String Offer_ID = OfferValues[2];
														String Start_Date = "";
														String End_Date = "";
														if(OfferValues[3].equals("MIGDATE"))
															Start_Date = sdfDaily.format(currDate);
														
														if(OfferValues[4].startsWith("MIGDATE"))
														{
															int hours2Add = Integer.parseInt(OfferValues[4].replace("MIGDATE+", ""));
															Date NewDate = new Date(currDate.getTime() + hours2Add *3600*1000);
															End_Date = sdfDaily.format(NewDate);
														}														
														BalanceOfferList.add(PopulateOffer(Offer_ID,Timer,true,true ,Start_Date, End_Date,"",""));
													}											 
												}
											}
										}
									}
									ExtraOfferFlag = false;
								}
								
							//need to put code till here
							}
							else
							{
								CompletedBT_ID.add(balanceInput.getBEBUCKETID());
								onlyLog.add("INC4002:Balance_Type lookup failed:MSISDN=" + msisdn + ":BALANCE_TYPE=" + Balance_ID + ":BE_BUCKET_VALUE=" + Balance_Value + ":BE_BUCKET_ID=" + balanceInput.getBEBUCKETID() +":ACTION=Logging");
							}						
						}
					}				
				}
			}
		}		
		//CompletedBT_ID.forEach((k->System.out.println(k)));
		
		//return BalanceOfferList.stream().distinct().collect(Collectors.toList());
		return BalanceOfferList;
	}
		
	
	private String PopulateOffer(String offer_ID,String Offer_Type, boolean startFlag, boolean expiryFlag, String Balance_StartDate,
			String Balance_ExpiryDate, String Product_Private, String flag) {
		
		
			String Offer_Startdate = "";
			String Offer_StartSec= "";
			String Offer_Expirydate= "";
			String Offer_ExpirySec= "";
			
			if(Balance_StartDate.equals("1970-01-01 00:00:00"))
				Balance_StartDate = "";
			
			if(Balance_ExpiryDate.equals("1970-01-01 00:00:00"))
				Balance_ExpiryDate = "";
			if(Offer_Type.toUpperCase().equals("TIMER"))
			{
				if(!Balance_StartDate.isEmpty() && startFlag)
				{
					Offer_Startdate = CommonUtilities.convertDateToTimerOfferDate(Balance_StartDate)[0].toString();
					Offer_StartSec = CommonUtilities.convertDateToTimerOfferDate(Balance_StartDate)[1].toString();								
				}
				else
				{
					Offer_Startdate = LoadSubscriberMapping.CommonConfigMap.get("default_NULL").toString();
					Offer_StartSec = LoadSubscriberMapping.CommonConfigMap.get("default_NULL").toString();
				}
				if(!Balance_ExpiryDate.isEmpty() && expiryFlag)
				{
					Offer_Expirydate = CommonUtilities.convertDateToTimerOfferDate(Balance_ExpiryDate)[0].toString(); 
					Offer_ExpirySec = CommonUtilities.convertDateToTimerOfferDate(Balance_ExpiryDate)[1].toString(); 
				}
				else
				{
					Offer_Expirydate = LoadSubscriberMapping.CommonConfigMap.get("default_NULL").toString();
					Offer_ExpirySec = LoadSubscriberMapping.CommonConfigMap.get("default_NULL").toString();
				}
			}
			else
			{
				if(!Balance_StartDate.isEmpty())
				{
					Offer_Startdate = CommonUtilities.convertDateToTimerOfferDate(Balance_StartDate)[0].toString();
					Offer_StartSec = LoadSubscriberMapping.CommonConfigMap.get("default_NULL").toString();								
				}
				else
				{
					Offer_Startdate = LoadSubscriberMapping.CommonConfigMap.get("default_NULL").toString();
					Offer_StartSec = LoadSubscriberMapping.CommonConfigMap.get("default_NULL").toString();
				}
				if(!Balance_ExpiryDate.isEmpty())
				{
					Offer_Expirydate = CommonUtilities.convertDateToTimerOfferDate(Balance_ExpiryDate)[0].toString(); 
					Offer_ExpirySec = LoadSubscriberMapping.CommonConfigMap.get("default_NULL").toString(); 
				}
				else
				{
					Offer_Expirydate = LoadSubscriberMapping.CommonConfigMap.get("default_NULL").toString();
					Offer_ExpirySec = LoadSubscriberMapping.CommonConfigMap.get("default_NULL").toString();
				}
			}
			
			
			StringBuffer sb = new StringBuffer();
			sb.append(msisdn).append(",");
			sb.append(offer_ID).append(",");
			sb.append(Offer_Startdate).append(",");
			sb.append(Offer_Expirydate).append(",");
			sb.append(Offer_StartSec).append(",");
			sb.append(Offer_ExpirySec).append(",");
			if(flag.length() == 1)
			{
				sb.append(flag).append(",");
			}
			else
				sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_NULL")).append(",");
			sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_NULL")).append(",");
			sb.append("toBePopulated");
		
		// TODO Auto-generated method stub
		return sb.toString();
	}
	private List<String> offerFromLifeCycle()
	{
		List<String> LifeCycleOfferList = new ArrayList<>();
		
		String serviceClass = subscriber.getSubscriberInfoSERVICESTATE();
		String INITIAL_ACTIVATION_DATE_FLAG;
				
		if(INITIAL_ACTIVATION_DATE.length() == 0)
			INITIAL_ACTIVATION_DATE_FLAG = "Y";
		else
			INITIAL_ACTIVATION_DATE_FLAG = "N";
		
		String Offer_ID = "", Offer_Type = "";
				
		if( serviceClass.equals("S") && INITIAL_ACTIVATION_DATE_FLAG == "N")
		{
			Offer_ID = LoadSubscriberMapping.LifeCycleMap.get(serviceClass+"|"+INITIAL_ACTIVATION_DATE_FLAG +"|N").split(",")[11];
			Offer_Type = LoadSubscriberMapping.LifeCycleMap.get(serviceClass+"|"+INITIAL_ACTIVATION_DATE_FLAG +"|N").split(",")[12];
		}
		
		if( serviceClass.equals("F") && INITIAL_ACTIVATION_DATE_FLAG == "N")
		{
			Offer_ID = LoadSubscriberMapping.LifeCycleMap.get(serviceClass+"|"+INITIAL_ACTIVATION_DATE_FLAG +"|N").split(",")[11];
			Offer_Type = LoadSubscriberMapping.LifeCycleMap.get(serviceClass+"|"+INITIAL_ACTIVATION_DATE_FLAG +"|N").split(",")[12];
		}
		
		if( serviceClass.equals("D") && INITIAL_ACTIVATION_DATE_FLAG == "N")
		{
			Offer_ID = LoadSubscriberMapping.LifeCycleMap.get(serviceClass+"|"+INITIAL_ACTIVATION_DATE_FLAG +"|N").split(",")[11];
			Offer_Type = LoadSubscriberMapping.LifeCycleMap.get(serviceClass+"|"+INITIAL_ACTIVATION_DATE_FLAG +"|N").split(",")[12];
		}
		
		if(Offer_ID.length() > 0)
		{
			StringBuffer sb = new StringBuffer();
			sb.append(msisdn).append(",");
			sb.append(Offer_ID).append(",");
			sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_NULL")).append(",");
			sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_NULL")).append(",");
			sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_NULL")).append(",");
			sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_NULL")).append(",");
			sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_NULL")).append(",");
			sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_NULL")).append(",");
			sb.append("toBePopulated");
			
			LifeCycleOfferList.add(sb.toString());
			sb =null;
		}
		
		return LifeCycleOfferList;
	}
	
	private List<String> offerFromProfileTag()
	{
		List<String> ProfileTagOfferList = new ArrayList<>();
		Date currDate = new Date();
		SimpleDateFormat sdfDaily = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		
		if(subscriber.getProfiledumpInfoList().size() == 0)
			return ProfileTagOfferList;
		
		for(String itr : LoadSubscriberMapping.Profile_Tags_Mapping.keySet())
		{
			PROFILETAGINFO profileMappingValue = LoadSubscriberMapping.Profile_Tags_Mapping.get(itr);
			String Symbol = profileMappingValue.getSymbols1();
			String TargetValue = profileMappingValue.getProfileTagValue();
			String IgnoreFlag =  profileMappingValue.getIgnoreFlag();
			if(IgnoreFlag.equals("N"))
			{
				if(itr.equals("TopXCountr1"))
				{
					if(Symbol.equals("=") && TargetValue.equals(subscriber.getProfiledumpInfoList().get(0).getTopXCountr1()))
					{
						ProfileTagOfferList.add(populateProfileOffer(profileMappingValue.getOfferId(),"",""));
					}
				}
				if(itr.equals("TopXCountr2"))
				{
					if(Symbol.equals("=") && TargetValue.equals(subscriber.getProfiledumpInfoList().get(0).getTopXCountr2()))
					{
						ProfileTagOfferList.add(populateProfileOffer(profileMappingValue.getOfferId(),"",""));
					}
				}
				if(itr.equals("TopXCountr3"))
				{
					if(Symbol.equals("=") && TargetValue.equals(subscriber.getProfiledumpInfoList().get(0).getTopXCountr3()))
					{
						ProfileTagOfferList.add(populateProfileOffer(profileMappingValue.getOfferId(),"",""));
					}
				}
				if(itr.equals("TopXCountr4"))
				{
					if(Symbol.equals("=") && TargetValue.equals(subscriber.getProfiledumpInfoList().get(0).getTopXCountr4()))
					{
						ProfileTagOfferList.add(populateProfileOffer(profileMappingValue.getOfferId(),"",""));
					}
				}
				if(itr.equals("Prepaid"))
				{
					if(Symbol.equals("=") && TargetValue.equals(subscriber.getProfiledumpInfoList().get(0).getPrepaid()))
					{
						ProfileTagOfferList.add(populateProfileOffer(profileMappingValue.getOfferId(),"",""));
					}
				}
				if(itr.equals("entBsnssCrclActv"))
				{			   
					if(Symbol.equals("=") && TargetValue.equals(subscriber.getProfiledumpInfoList().get(0).getEntBsnssCrclActv()))
					{
						ProfileTagOfferList.add(populateProfileOffer(profileMappingValue.getOfferId(),"",""));
					}
				}
				if(itr.equals("Plan"))
				{			   
					if(Symbol.equals("=") && TargetValue.equals(subscriber.getProfiledumpInfoList().get(0).getPlan()))
					{
						ProfileTagOfferList.add(populateProfileOffer(profileMappingValue.getOfferId(),"",""));
					}
				}
				if(itr.equals("IDD2Act"))
				{			   
					if(Symbol.equals("=") && TargetValue.equals(subscriber.getProfiledumpInfoList().get(0).getIDD2Act()))
					{
						ProfileTagOfferList.add(populateProfileOffer(profileMappingValue.getOfferId(),"",""));
					}
				}
				if(itr.equals("IDDCutRateAct"))
				{			   
					if(Symbol.equals("=") && TargetValue.equals(subscriber.getProfiledumpInfoList().get(0).getIDDCutRateAct()))
					{			
						//YYYYMMDDHRMMSS to yyyy-MM-dd HH:mm:ss
						String StartDate = subscriber.getProfiledumpInfoList().get(0).getIDDCutRateActDate();
						String CurrectStartDate = "";
						if(!StartDate.isEmpty() && StartDate.length() == 14)
							CurrectStartDate = StartDate.substring(0,4) + "-" + StartDate.substring(4,6) + "-" + StartDate.substring(6,8) + " " + StartDate.substring(8,10) + ":" + StartDate.substring(10,12) + ":" + StartDate.substring(12,14);
						ProfileTagOfferList.add(populateProfileOffer(profileMappingValue.getOfferId(),CurrectStartDate,profileMappingValue.getOfferEnd()));						
					}
				}
				if(itr.equals("EmiratiPlan"))
				{			   
					if(Symbol.equals("=") && TargetValue.equals(subscriber.getProfiledumpInfoList().get(0).getEmiratiPlan()))
					{
						ProfileTagOfferList.add(populateProfileOffer(profileMappingValue.getOfferId(),"",""));
					}
				}
				if(itr.equals("Absher"))
				{			   
					if(Symbol.equals("=") && TargetValue.equals(subscriber.getProfiledumpInfoList().get(0).getAbsher()))
					{
						ProfileTagOfferList.add(populateProfileOffer(profileMappingValue.getOfferId(),"",""));
					}
				}
				if(itr.equals("PAYGMet"))
				{			   
					if(Symbol.equals("=") && TargetValue.equals(subscriber.getProfiledumpInfoList().get(0).getPAYGMet()))
					{
						String BalanceID = profileMappingValue.getBTPERIODICCHARGEID();
						String Symbol2 =  profileMappingValue.getSymbols2();
						if(LoadSubscriberMapping.ProfileBalancesIDDetails.containsKey(BalanceID))
						{
							String BT_Value = LoadSubscriberMapping.ProfileBalancesIDDetails.get(BalanceID).split("\\|")[0];
							String StartDate_Value = LoadSubscriberMapping.ProfileBalancesIDDetails.get(BalanceID).split("\\|")[1];
							String EndDate_Value = LoadSubscriberMapping.ProfileBalancesIDDetails.get(BalanceID).split("\\|")[2];
							
							String referenceBalanceID = profileMappingValue.getPCBTValue();
							if(Symbol2.equals(">=") && Integer.parseInt(BT_Value) >= Integer.parseInt(referenceBalanceID))
								ProfileTagOfferList.add(populateProfileOffer(profileMappingValue.getOfferId(),StartDate_Value,EndDate_Value));
						}						
					}
				}
				if(itr.equals("SmsBndl1Recur"))
				{			   
					if(Symbol.equals("=") && (TargetValue.equals("F") || TargetValue.equals("T")))
					{
						String BalanceID = profileMappingValue.getBTPERIODICCHARGEID();
						String Symbol2 =  profileMappingValue.getSymbols2();
						if(LoadSubscriberMapping.ProfileBalancesIDDetails.containsKey(BalanceID))
						{
							String BT_Value = LoadSubscriberMapping.ProfileBalancesIDDetails.get(BalanceID).split("\\|")[0];
							String StartDate_Value = LoadSubscriberMapping.ProfileBalancesIDDetails.get(BalanceID).split("\\|")[1];
							String EndDate_Value = "";
							if(TargetValue.equals("T"))
							{
								String Date = subscriber.getProfiledumpInfoList().get(0).getSmsExpDate();
								if(!Date.isEmpty() && Date.length() == 14)
									EndDate_Value = Date.substring(0,4) + "-" + Date.substring(4,6) + "-" + Date.substring(6,8) + " " + Date.substring(8,10) + ":" + Date.substring(10,12) + ":" + Date.substring(12,14);
							}
							else
								EndDate_Value = LoadSubscriberMapping.ProfileBalancesIDDetails.get(BalanceID).split("\\|")[2];
							if(Symbol2.equals(">=") && Integer.parseInt(BalanceID) >= Integer.parseInt(BT_Value))
								ProfileTagOfferList.add(populateProfileOffer(profileMappingValue.getOfferId(),StartDate_Value,EndDate_Value));
						}						
					}
				}
				if(itr.equals("SmsBndl2Recur"))
				{			   
					if(Symbol.equals("=") && (TargetValue.equals("F") || TargetValue.equals("T")))
					{
						String BalanceID = profileMappingValue.getBTPERIODICCHARGEID();
						String Symbol2 =  profileMappingValue.getSymbols2();
						if(LoadSubscriberMapping.ProfileBalancesIDDetails.containsKey(BalanceID))
						{
							String BT_Value = LoadSubscriberMapping.ProfileBalancesIDDetails.get(BalanceID).split("\\|")[0];
							String StartDate_Value = LoadSubscriberMapping.ProfileBalancesIDDetails.get(BalanceID).split("\\|")[1];
							String EndDate_Value = "";
							if(TargetValue.equals("T"))
							{
								String Date = subscriber.getProfiledumpInfoList().get(0).getSmsExpDate();
								if(!Date.isEmpty() && Date.length() == 14)
									EndDate_Value = Date.substring(0,4) + "-" + Date.substring(4,6) + "-" + Date.substring(6,8) + " " + Date.substring(8,10) + ":" + Date.substring(10,12) + ":" + Date.substring(12,14);
							}
							else
								EndDate_Value = LoadSubscriberMapping.ProfileBalancesIDDetails.get(BalanceID).split("\\|")[2];
							if(Symbol2.equals(">=") && Integer.parseInt(BalanceID) >= Integer.parseInt(BT_Value))
								ProfileTagOfferList.add(populateProfileOffer(profileMappingValue.getOfferId(),StartDate_Value,EndDate_Value));
						}						
					}
				}
			}
			else
			{
				onlyLog.add("INC6002:Profile_Tags Mapping Ignored:MSISDN=" + msisdn + ":Profile_Tag_Name_NAME=" + itr + ":Profile_Tag_Value=:ACTION=Logging");
				continue;
			}
		}
		
		List<String> CurrentGroup = new ArrayList<>();
		boolean AGroupCompleted = false;
		boolean BGroupCompleted =  false;
		for(String itr : LoadSubscriberMapping.Profile_Tags_MappingWithGroup.keySet())
		{
			PROFILETAGINFO profileMappingValue = LoadSubscriberMapping.Profile_Tags_MappingWithGroup.get(itr);
			String Symbol = profileMappingValue.getSymbols1();
			String TargetName = profileMappingValue.getProfileTagName();
			String TargetValue = profileMappingValue.getProfileTagValue();
			String IgnoreFlag =  profileMappingValue.getIgnoreFlag();
			String GroupName = itr.split(",")[1];
						
			if(IgnoreFlag.equals("N"))
			{
				//******Logic for Group A1 to A4
				if(!AGroupCompleted && TargetName.equals("BusMobPayg50") && TargetValue.equals(subscriber.getProfiledumpInfoList().get(0).getBusMobPayg50()))
				{
					String SecondTagName ="";
					Set<String> valueList = LoadSubscriberMapping.ProfileGroupingMap.get(GroupName);					
					for(String Tag : valueList)
						if(!Tag.equals(TargetName)){
							SecondTagName = Tag; 
							break;
					}
					for(String itr2 : LoadSubscriberMapping.Profile_Tags_MappingWithGroup.keySet())
					{
						PROFILETAGINFO SecondprofileMappingValue = LoadSubscriberMapping.Profile_Tags_MappingWithGroup.get(itr2);
						String SecondTargetName = SecondprofileMappingValue.getProfileTagName();
						String SecondTargetValue = SecondprofileMappingValue.getProfileTagValue();
						String SecondBalanceID = SecondprofileMappingValue.getBTPERIODICCHARGEID();
						if(SecondTagName.equals(SecondTargetName) && SecondTargetValue.equals(subscriber.getProfiledumpInfoList().get(0).getBusMobTopUp()))
						{
							//if(LoadSubscriberMapping.ProfileSpecialGroup.get("BusMobTopUp" + "," + subscriber.getProfiledumpInfoList().get(0).getBusMobTopUp()) != null)
							if(LoadSubscriberMapping.ProfileBalancesIDDetails.containsKey(SecondBalanceID))
							{
								String BT_Value = LoadSubscriberMapping.ProfileBalancesIDDetails.get(SecondBalanceID).split("\\|")[0];
								String Symbol2 = SecondprofileMappingValue.getSymbols2();
								String BT_Reference_Value = SecondprofileMappingValue.getPCBTValue();
								if(Symbol2.equals("or"))
								{
									//Integer.parseInt(Balance_Value) == Integer.parseInt(BT_Value)
									String[] values = BT_Reference_Value.split(",");											
									if(Arrays.stream(values).anyMatch(BT_Value::equals))
									{
										ProfileTagOfferList.add(populateProfileOffer(SecondprofileMappingValue.getOfferId(),"",""));
										CurrentGroup.add(GroupName);
										AGroupCompleted = true;
										break;
									}
									else
									{
										onlyLog.add("INC6001:Profile_Tags Mapping lookup Failed:MSISDN=" + msisdn + ":PROFILE_TAG_NAME=" + SecondBalanceID + ":PROFILE_TAG_VALUE=" + BT_Value +":ACTION=Logging");
									}
								}
							}
						}	
					}
				}
				//******Logic for Group B5 to B7
				if(!BGroupCompleted && TargetName.equals("CVM") && TargetValue.equals(subscriber.getProfiledumpInfoList().get(0).getCVM()))
				{
					String SecondTagName = "CVMCounter";
					String ThirdTagName = "IDDCutRateAct";
					/*Set<String> valueList = LoadSubscriberMapping.ProfileGroupingMap.get(GroupName);					
					for(String Tag : valueList)
						if(!Tag.equals(TargetName)){
							SecondTagName = Tag; 
							if(!Tag.equals(SecondTagName))
								ThirdTagName = Tag;
						}*/
					for(String itr2 : LoadSubscriberMapping.Profile_Tags_MappingWithGroup.keySet())
					{
						PROFILETAGINFO SecondprofileMappingValue = LoadSubscriberMapping.Profile_Tags_MappingWithGroup.get(itr2);
						String SecondTargetName = SecondprofileMappingValue.getProfileTagName();
						String SecondTargetValue = SecondprofileMappingValue.getProfileTagValue();
						String SecondSymbol = SecondprofileMappingValue.getSymbols1();
						if(BGroupCompleted)
							break;
						if(!BGroupCompleted && SecondTagName.equals(SecondTargetName))
						{
							if(subscriber.getProfiledumpInfoList().get(0).getCVMCounter().length() != 0)
							{
								if(SecondSymbol.equals(">") && Integer.parseInt(subscriber.getProfiledumpInfoList().get(0).getCVMCounter()) > Integer.parseInt(SecondTargetValue))
								{
									for(String itr3 : LoadSubscriberMapping.Profile_Tags_MappingWithGroup.keySet())
									{
										PROFILETAGINFO ThirdprofileMappingValue = LoadSubscriberMapping.Profile_Tags_MappingWithGroup.get(itr3);
										String ThirdTargetName = ThirdprofileMappingValue.getProfileTagName();
										String ThirdTargetValue = ThirdprofileMappingValue.getProfileTagValue();
										
										if(subscriber.getProfiledumpInfoList().get(0).getIDDCutRateAct().length() != 0)
										{
											if(ThirdTagName.equals(ThirdTargetName) && ThirdTargetValue.equals(subscriber.getProfiledumpInfoList().get(0).getIDDCutRateAct()))
											{
												ProfileTagOfferList.add(populateProfileOffer(SecondprofileMappingValue.getOfferId(),"",""));
												ProfileTagOfferList.add(populateProfileOffer(profileMappingValue.getOfferId(),"",""));
												ProfileTagOfferList.add(populateProfileOffer(ThirdprofileMappingValue.getOfferId(),"",""));
												CurrentGroup.add(GroupName);
												BGroupCompleted = true;
												break;
											}
											else
											{
												onlyLog.add("INC6001:Profile_Tags Mapping lookup Failed:MSISDN=" + msisdn + ":PROFILE_TAG_NAME=" + ThirdTargetName + ":PROFILE_TAG_VALUE=" + subscriber.getProfiledumpInfoList().get(0).getIDDCutRateAct() +":ACTION=Logging");
											}
										}
									}
								}
								else
								{
									onlyLog.add("INC6001:Profile_Tags Mapping lookup Failed:MSISDN=" + msisdn + ":PROFILE_TAG_NAME=" + "CVMCounter" + ":PROFILE_TAG_VALUE=" + subscriber.getProfiledumpInfoList().get(0).getCVMCounter() +":ACTION=Logging");
								}
							}
						}
					}
				}
				
				
				//***************logic for Dummy1 and dummy2
				
				if(TargetName.equals("BstrVNNRecur") && TargetValue.equals(subscriber.getProfiledumpInfoList().get(0).getBstrVNNRecur()))
				{
					if(!subscriber.getProfiledumpInfoList().get(0).getBstrVceNatNumTree().isEmpty())
					{
						String BstrVceNat = subscriber.getProfiledumpInfoList().get(0).getBstrVceNatNumExp();
						String BstrVceNatDate="";
						if(!BstrVceNat.isEmpty() && BstrVceNat.length() == 14)
							BstrVceNatDate = BstrVceNat.substring(0,4) + "-" + BstrVceNat.substring(4,6) + "-" + BstrVceNat.substring(6,8) + " " + BstrVceNat.substring(8,10) + ":" + BstrVceNat.substring(10,12) + ":" + BstrVceNat.substring(12,14);
						
						if(CommonUtilities.convertDateToEpoch(BstrVceNatDate) < CommonUtilities.convertDateToEpoch(sdfDaily.format(currDate)))
						{
							onlyLog.add("INC6003:National Me and Mine product Expired:MSISDN=" + msisdn + ":PROFILE_TAG_NAME=" + "BstrVceIntNumTree" + ":PROFILE_TAG_VALUE=" + BstrVceNat +":ACTION=Logging");
						}
						else
						{
							if(profileMappingValue.getPTGroupIdentifier().startsWith("DUMMY_1"))
							{
								String StartDate = subscriber.getProfiledumpInfoList().get(0).getBstrVNNConfirmDate();
								String CurrectStartDate = "";
								if(!StartDate.isEmpty() && StartDate.length() == 14)
									CurrectStartDate = StartDate.substring(0,4) + "-" + StartDate.substring(4,6) + "-" + StartDate.substring(6,8) + " " + StartDate.substring(8,10) + ":" + StartDate.substring(10,12) + ":" + StartDate.substring(12,14);
								String EndDate = subscriber.getProfiledumpInfoList().get(0).getBstrVceNatNumExp();
								
								String CurrectEndDate = "";
								if(!EndDate.isEmpty())
									CurrectEndDate = EndDate.substring(0,4) + "-" + EndDate.substring(4,6) + "-" + EndDate.substring(6,8) + " " + EndDate.substring(8,10) + ":" + EndDate.substring(10,12) + ":" + EndDate.substring(12,14);
								
								ProfileTagOfferList.add(populateProfileOffer(profileMappingValue.getOfferId(),CurrectStartDate,CurrectEndDate));
							}
						}
					}
				}
		
				if(TargetName.equals("BstrVINRecur") && TargetValue.equals(subscriber.getProfiledumpInfoList().get(0).getBstrVINRecur()))
				{
					if(!subscriber.getProfiledumpInfoList().get(0).getBstrVceIntNumTree().isEmpty())
					{
						String BstrVceInt = subscriber.getProfiledumpInfoList().get(0).getBstrVceIntNumExp();
						String BstrVceIntDate = "";
						if(!BstrVceInt.isEmpty() && BstrVceInt.length() == 14)
							BstrVceIntDate = BstrVceInt.substring(0,4) + "-" + BstrVceInt.substring(4,6) + "-" + BstrVceInt.substring(6,8) + " " + BstrVceInt.substring(8,10) + ":" + BstrVceInt.substring(10,12) + ":" + BstrVceInt.substring(12,14);
						
						if(CommonUtilities.convertDateToEpoch(BstrVceIntDate) < CommonUtilities.convertDateToEpoch(sdfDaily.format(currDate)))
						{
							onlyLog.add("INC6004:International Me and Mine product Expired:MSISDN=" + msisdn + ":PROFILE_TAG_NAME=" + "BstrVceIntNumTree" + ":PROFILE_TAG_VALUE=" + BstrVceInt +":ACTION=Logging");
						}
						else
						{
							if(profileMappingValue.getPTGroupIdentifier().startsWith("DUMMY_2"))
							{
								String StartDate = subscriber.getProfiledumpInfoList().get(0).getBstrVINConfirmDate();
								String CurrectStartDate = "";
								if(!StartDate.isEmpty())
									CurrectStartDate = StartDate.substring(0,4) + "-" + StartDate.substring(4,6) + "-" + StartDate.substring(6,8) + " " + StartDate.substring(8,10) + ":" + StartDate.substring(10,12) + ":" + StartDate.substring(12,14);
								
								String EndDate = subscriber.getProfiledumpInfoList().get(0).getBstrVceIntNumExp();
								String CurrectEndDate = "";
								if(!EndDate.isEmpty() && EndDate.length() == 14)
									CurrectEndDate = EndDate.substring(0,4) + "-" + EndDate.substring(4,6) + "-" + EndDate.substring(6,8) + " " + EndDate.substring(8,10) + ":" + EndDate.substring(10,12) + ":" + EndDate.substring(12,14);
								
								ProfileTagOfferList.add(populateProfileOffer(profileMappingValue.getOfferId(),CurrectStartDate,CurrectEndDate));
							}					
						}
					}
				}
				
				//**************C1 and D1
										
			if(TargetName.equals("BstrVceNatNumAct") && TargetValue.equals(subscriber.getProfiledumpInfoList().get(0).getBstrVceNatNumAct()))
			{
				if(!subscriber.getProfiledumpInfoList().get(0).getBstrVceNatNumTree().isEmpty())
				{
					String BstrVceNat = subscriber.getProfiledumpInfoList().get(0).getBstrVceNatNumExp();
					String BstrVceNatDate = "";
					if(!BstrVceNat.isEmpty() && BstrVceNat.length() == 14)
						BstrVceNatDate = BstrVceNat.substring(0,4) + "-" + BstrVceNat.substring(4,6) + "-" + BstrVceNat.substring(6,8) + " " + BstrVceNat.substring(8,10) + ":" + BstrVceNat.substring(10,12) + ":" + BstrVceNat.substring(12,14);
					
					if(CommonUtilities.convertDateToEpoch(BstrVceNatDate) < CommonUtilities.convertDateToEpoch(sdfDaily.format(currDate)))
					{
						onlyLog.add("INC6003:National Me and Mine product Expired:MSISDN=" + msisdn + ":PROFILE_TAG_NAME=" + "BstrVceIntNumTree" + ":PROFILE_TAG_VALUE=" + BstrVceNat +":ACTION=Logging");
					}
					else
					{
							String SecondTagName ="";
							Set<String> valueList = LoadSubscriberMapping.ProfileGroupingMap.get(GroupName);					
							for(String Tag : valueList)
							if(!Tag.equals(TargetName)){
								SecondTagName = Tag; 
								break;
							}
							for(String itr2 : LoadSubscriberMapping.Profile_Tags_MappingWithGroup.keySet())
							{
								PROFILETAGINFO SecondprofileMappingValue = LoadSubscriberMapping.Profile_Tags_MappingWithGroup.get(itr2);
								String SecondTargetName = SecondprofileMappingValue.getProfileTagName();
								String SecondTargetValue = SecondprofileMappingValue.getProfileTagValue();
								
								if(SecondTagName.equals(SecondTargetName) && SecondTargetValue.equals(subscriber.getProfiledumpInfoList().get(0).getBstrVNNRecur()))
								{
									String StartDate = subscriber.getProfiledumpInfoList().get(0).getBstrVNNConfirmDate();
									String CurrectStartDate = "";
									if(!StartDate.isEmpty() && StartDate.length() == 14)
										CurrectStartDate = StartDate.substring(0,4) + "-" + StartDate.substring(4,6) + "-" + StartDate.substring(6,8) + " " + StartDate.substring(8,10) + ":" + StartDate.substring(10,12) + ":" + StartDate.substring(12,14);
									
									String EndDate = subscriber.getProfiledumpInfoList().get(0).getBstrVceNatNumExp();
									String CurrectEndDate = "";
									if(!EndDate.isEmpty() && EndDate.length() == 14)
										CurrectEndDate = EndDate.substring(0,4) + "-" + EndDate.substring(4,6) + "-" + EndDate.substring(6,8) + " " + EndDate.substring(8,10) + ":" + EndDate.substring(10,12) + ":" + EndDate.substring(12,14);
									
									ProfileTagOfferList.add(populateProfileOffer(profileMappingValue.getOfferId(),CurrectStartDate,CurrectEndDate));
									break;
								}
							}
						}
					}
				}
		
				if(TargetName.equals("BstrVceIntNumAct") && TargetValue.equals(subscriber.getProfiledumpInfoList().get(0).getBstrVceIntNumAct()))
				{
					if(!subscriber.getProfiledumpInfoList().get(0).getBstrVceIntNumTree().isEmpty())
					{
						String BstrVceInt = subscriber.getProfiledumpInfoList().get(0).getBstrVceIntNumExp();
						String BstrVceIntDate = "";
						if(!BstrVceInt.isEmpty() && BstrVceInt.length() == 14)
							BstrVceIntDate = BstrVceInt.substring(0,4) + "-" + BstrVceInt.substring(4,6) + "-" + BstrVceInt.substring(6,8) + " " + BstrVceInt.substring(8,10) + ":" + BstrVceInt.substring(10,12) + ":" + BstrVceInt.substring(12,14);
						
						if(CommonUtilities.convertDateToEpoch(BstrVceIntDate) < CommonUtilities.convertDateToEpoch(sdfDaily.format(currDate)))
						{
							onlyLog.add("INC6004:International Me and Mine product Expired:MSISDN=" + msisdn + ":PROFILE_TAG_NAME=" + "BstrVceIntNumTree" + ":PROFILE_TAG_VALUE=" + BstrVceInt +":ACTION=Logging");
						}
						else
						{
							String SecondTagName ="";
							Set<String> valueList = LoadSubscriberMapping.ProfileGroupingMap.get(GroupName);					
							for(String Tag : valueList)
							if(!Tag.equals(TargetName)){
								SecondTagName = Tag; 
								break;
							}
							for(String itr2 : LoadSubscriberMapping.Profile_Tags_MappingWithGroup.keySet())
							{
								PROFILETAGINFO SecondprofileMappingValue = LoadSubscriberMapping.Profile_Tags_MappingWithGroup.get(itr2);
								String SecondTargetName = SecondprofileMappingValue.getProfileTagName();
								String SecondTargetValue = SecondprofileMappingValue.getProfileTagValue();
								
								if(SecondTagName.equals(SecondTargetName) && SecondTargetValue.equals(subscriber.getProfiledumpInfoList().get(0).getBstrVINRecur()))
								{
									String StartDate = subscriber.getProfiledumpInfoList().get(0).getBstrVINConfirmDate();
									String CurrectStartDate = "";
									if(!StartDate.isEmpty() && StartDate.length() == 14)
										CurrectStartDate = StartDate.substring(0,4) + "-" + StartDate.substring(4,6) + "-" + StartDate.substring(6,8) + " " + StartDate.substring(8,10) + ":" + StartDate.substring(10,12) + ":" + StartDate.substring(12,14);
									String EndDate = subscriber.getProfiledumpInfoList().get(0).getBstrVceIntNumExp();
									String CurrectEndDate = "";
									if(!EndDate.isEmpty() && EndDate.length() == 14)
										CurrectEndDate = EndDate.substring(0,4) + "-" + EndDate.substring(4,6) + "-" + EndDate.substring(6,8) + " " + EndDate.substring(8,10) + ":" + EndDate.substring(10,12) + ":" + EndDate.substring(12,14);
									
									ProfileTagOfferList.add(populateProfileOffer(profileMappingValue.getOfferId(),CurrectStartDate,CurrectEndDate));
									break;
								}
							}
						}
					}
				}
				//Add code here
			}
			else
			{
				//log for ignore
			}
		}
		return ProfileTagOfferList;
	}
	
	private String populateProfileOffer(String offerId,String Offer_start,String Offer_end) {
		StringBuffer sb = new StringBuffer();
		
		sb.append(msisdn).append(",");
		sb.append(offerId).append(",");
		if(Offer_start.length() > 1)
			sb.append(CommonUtilities.convertDateToTimerOfferDate(Offer_start)[0].toString()).append(",");
		else
			sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_NULL")).append(",");
		if(Offer_end.length() > 1)
			sb.append(CommonUtilities.convertDateToTimerOfferDate(Offer_end)[0].toString()).append(",");
		else
			sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_NULL")).append(",");
		
		if(Offer_start.length() > 1)
			sb.append(CommonUtilities.convertDateToTimerOfferDate(Offer_start)[1].toString()).append(",");
		else
			sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_NULL")).append(",");
		if(Offer_end.length() > 1)
			sb.append(CommonUtilities.convertDateToTimerOfferDate(Offer_end)[1].toString()).append(",");
		else
			sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_NULL")).append(",");
		
		//sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_NULL")).append(",");
		//sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_NULL")).append(",");
		sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_NULL")).append(",");
		sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_NULL")).append(",");
		sb.append("toBePopulated");
		
		return sb.toString();
	}
	private List<String> offerFromDefaultService()
	{
		List<String> defaultOfferList = new ArrayList<>();
		
		LoadSubscriberMapping.DefaultServicesMap.forEach((k,v)->{
			//System.out.println("Item : " + k + " Count : " + v);
			
			if (v.split(",",-1)[1].trim().equals("N"))
			{
				//System.out.println(v);
				if (v.split(",",-1)[9] != "" && v.split(",",-1)[6].length() != 0)
				{
					String Offer_ID = v.split(",",-1)[6];
					
					StringBuffer sb = new StringBuffer();
					sb.append(msisdn).append(",");
					sb.append(Offer_ID).append(",");
					sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_NULL")).append(",");
					sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_NULL")).append(",");
					sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_NULL")).append(",");
					sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_NULL")).append(",");
					sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_NULL")).append(",");
					sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_NULL")).append(",");
					sb.append("toBePopulated");
					
					defaultOfferList.add(sb.toString());
					
					sb = null;
				}
			}			
		});
		
		return defaultOfferList;
	}
		
	
	private List<String> offerAttributeFromDefaultService_old(String msisdn)
	{
		List<String> defaultOfferList = new ArrayList<>();
		
		/*for (String string : LoadSubscriberMapping.DefaultServicesMap.keySet()) 
		{
			
		}*/	
		if(subscriber.getProfiledumpInfoList().size() == 1)
		{
		
			if(subscriber.getProfiledumpInfoList().get(0).getIMEI().length() == 0 || subscriber.getProfiledumpInfoList().get(0).getIMSI().length() == 0 || subscriber.getProfiledumpInfoList().get(0).getHlrAddr().length() == 0 || subscriber.getProfiledumpInfoList().get(0).getLanguageID().length() == 0)
			{
				onlyLog.add("INC2001:Subscriber Profile field Missing:MSISDN=" + msisdn + ":IMEI=" + subscriber.getProfiledumpInfoList().get(0).getIMEI() + ":IMSI=" + subscriber.getProfiledumpInfoList().get(0).getIMSI() + ":HLRAddress=" + subscriber.getProfiledumpInfoList().get(0).getHlrAddr() + ":LanguageID=" + subscriber.getProfiledumpInfoList().get(0).getLanguageID() +":ACTION=Logging");
			}
			LoadSubscriberMapping.DefaultServicesMap.forEach((k,v)->{
				if (v.split(",",-1)[1].trim().equals("N"))
				{
					if (!v.split(",",-1)[9].isEmpty() && v.split(",",-1)[9].length() != 0)
					{
						String OfferAttr_ID = v.split(",",-1)[9];
						String Attr_name = v.split(",",-1)[10];
						String Attr_type = v.split(",",-1)[11];
						
						String Attr_value = "";
						String OfferAttr_Defination = "";
						
						String IMEI = "";
						String IMSI = "";
						String HLRAddress = "";
						
						if(Attr_name.equals("IMEI"))
							Attr_value = IMEI;
						else if(Attr_name.equals("IMSI"))
							Attr_value = IMSI;
						else if(Attr_name.equals("HLRAddress"))
							Attr_value = HLRAddress;
						//else if(Attr_name.equals("CustomerID"))
							//Attr_value = subscriber.getProfiledumpInfoC CustomerID();
						else if(Attr_name.equals("CSBAR"))
							Attr_value = subscriber.getProfiledumpInfoList().get(0).getCSBAR();
						else if(Attr_name.equals("crbtActReqDate"))
							Attr_value = subscriber.getProfiledumpInfoList().get(0).getCrbtActReqDate();
						else if(Attr_name.equals("crtCnfrmd"))
							Attr_value = subscriber.getProfiledumpInfoList().get(0).getCrtCnfrmd();
						else if(Attr_name.equals("crbtActConfirmDate"))
							Attr_value = subscriber.getProfiledumpInfoList().get(0).getCrbtActConfirmDate();
						else if(Attr_name.equals("crbtDeact"))
							Attr_value = subscriber.getProfiledumpInfoList().get(0).getCrbtDeact();	
						else if(Attr_name.equals("crbtDeActReqDate"))
							Attr_value = subscriber.getProfiledumpInfoList().get(0).getCrbtDeActConfirmDate();
						else if(Attr_name.equals("crbtDeActConfirmDate"))
							Attr_value = subscriber.getProfiledumpInfoList().get(0).getCrbtDeActConfirmDate();
						else if(Attr_name.equals("cbActConfirmDate"))
							Attr_value = subscriber.getProfiledumpInfoList().get(0).getCbActConfirmDate();
						else if(Attr_name.equals("cbExpDate"))
							Attr_value = subscriber.getProfiledumpInfoList().get(0).getCbExpDate();
						else if(Attr_name.equals("cbCnfdAct"))
							Attr_value = subscriber.getProfiledumpInfoList().get(0).getCbCnfdAct();
						else if(Attr_name.equals("cbWarn1"))
							Attr_value = subscriber.getProfiledumpInfoList().get(0).getCbWarn1();
						else if(Attr_name.equals("cbWarn2"))
							Attr_value = subscriber.getProfiledumpInfoList().get(0).getCbWarn2();
						else if(Attr_name.equals("cbDeActReqDate"))
							Attr_value = subscriber.getProfiledumpInfoList().get(0).getCbDeActReqDate();
						else if(Attr_name.equals("cbDeActConfirmDate"))
							Attr_value = subscriber.getProfiledumpInfoList().get(0).getCbDeActConfirmDate();
						else if(Attr_name.equals("cfActConfirmDate"))
							Attr_value = subscriber.getProfiledumpInfoList().get(0).getCfActConfirmDate();
						else if(Attr_name.equals("cfConfActive"))
							Attr_value = subscriber.getProfiledumpInfoList().get(0).getCfConfActive();
						else if(Attr_name.equals("cfDeActConfirmDate"))
							Attr_value = subscriber.getProfiledumpInfoList().get(0).getCfDeActConfirmDate();
						else if(Attr_name.equals("cfDeActReqDate"))
							Attr_value = subscriber.getProfiledumpInfoList().get(0).getCfDeActReqDate();
						//else if(Attr_name.equals("cfLastFailddate"))
							//Attr_value = subscriber.getProfiledumpInfoList().get(0).getCfLastFailddate();
						else if(Attr_name.equals("avmActConfirmDate"))
							Attr_value = subscriber.getProfiledumpInfoList().get(0).getAvmActConfirmDate();
						else if(Attr_name.equals("avmCnfrmd"))
							Attr_value = subscriber.getProfiledumpInfoList().get(0).getAvmCnfrmd();
						else if(Attr_name.equals("avmDeActReqDate"))
							Attr_value = subscriber.getProfiledumpInfoList().get(0).getAvmDeActReqDate();
						else if(Attr_name.equals("avmDeActConfirmDate"))
							Attr_value = subscriber.getProfiledumpInfoList().get(0).getAvmDeActConfirmDate();
						else if(Attr_name.equals("SprssNtfctn"))
							Attr_value = subscriber.getProfiledumpInfoList().get(0).getSprssNtfctn();
						else if(Attr_name.equals("avm"))
							Attr_value = subscriber.getProfiledumpInfoList().get(0).getAvm();
						else if(Attr_name.equals("avmActReqDate"))
							Attr_value = subscriber.getProfiledumpInfoList().get(0).getAvmActReqDate();
						else if(Attr_name.equals("MssdCallNot"))
							Attr_value = subscriber.getProfiledumpInfoList().get(0).getMssdCallNot();
						else if(Attr_name.equals("VMCIMEI"))
							Attr_value = subscriber.getProfiledumpInfoList().get(0).getVMCIMEI();
						//else if(Attr_name.equals("VMCName"))
						//	Attr_value = subscriber.getProfiledumpInfoVMCName();
						else if(Attr_name.equals("Acct Active Month"))
							Attr_value = subscriber.getProfiledumpInfoList().get(0).getAcctActiveMonth();
						else if(Attr_name.equals("Acct Active Year"))
							Attr_value = subscriber.getProfiledumpInfoList().get(0).getAcctActiveYear();
						
						if(Integer.parseInt(Attr_type) == 4)
							OfferAttr_Defination = LoadSubscriberMapping.OfferAttrDefMap.get(OfferAttr_ID + ',' + Attr_name);
						
						
						
						StringBuffer sb = new StringBuffer();
						if(Attr_value.length() !=0 && OfferAttr_Defination != null)
						{
							try {	
								sb.append(msisdn).append(",");
								sb.append(OfferAttr_ID).append(",");
								sb.append(OfferAttr_Defination).append(",");
								sb.append(CommonUtilities.toHexadecimal(Attr_value)).append(",");
								sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_ZERO"));
							} catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							defaultOfferList.add(sb.toString());
						}
						
						
						sb = null;
					}
				}			
			});
		}
		
		return defaultOfferList;	
	}
	
	
	private List<String> generatePam(){
		List<String> defaultPAM = new ArrayList<>();
		
		defaultPAM.addAll(offerAttrFromDefaultService(msisdn));
		
		return defaultPAM;
	}
	
	private List<String> offerAttrFromDefaultService(String msisdn)
	{
		List<String> defaultPAMList = new ArrayList<>();
		
		/*for (String string : LoadSubscriberMapping.DefaultServicesMap.keySet()) 
		{
			
		}*/			
		LoadSubscriberMapping.DefaultServicesMap.forEach((k,v)->{
			//System.out.println("Item : " + k + " Count : " + v);
			//PAM_Class_ID	PAM_Service_ID	Schedule_ID	Priority
			//14	15	16	17

			if (v.split(",",-1)[1].trim().equals("N"))
			{
				//System.out.println(v);
				if (v.split(",",-1)[14] != "" && v.split(",",-1)[14].length() != 0)
				{
					String Pam_Class_ID = v.split(",",-1)[14];
					String Pam_Service_ID = v.split(",",-1)[15];
					String Schedule_ID = v.split(",",-1)[16];
					String Priority = v.split(",",-1)[17];
					String Current_PAM_Period = v.split(",",-1)[18];
					Long Last_Evaluation_Date ;
					
					if(Current_PAM_Period.toUpperCase().equals("DAILY PAM"))
					{
						Last_Evaluation_Date = CommonUtilities.getCurrentPamPeriodInDays("Daily");
					}
					else
					{
						Last_Evaluation_Date =CommonUtilities.getCurrentPamPeriodInDays("Monthly");
					}
					
					StringBuffer sb = new StringBuffer();
					
					sb.append(msisdn).append(",");
					sb.append(Pam_Service_ID).append(",");
					sb.append(Pam_Class_ID).append(",");
					sb.append(Schedule_ID).append(",");
					sb.append(Current_PAM_Period).append(",");
					sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_ZERO")).append(",");
					sb.append(Last_Evaluation_Date).append(",");
					sb.append(LoadSubscriberMapping.CommonConfigMap.get("default_ZERO"));
					
					defaultPAMList.add(sb.toString());
					
					sb = null;
				}
			}			
		});
		
		return defaultPAMList.stream().distinct().collect(Collectors.toList());
	}
	
	public String ComputeAGroup(String inputBalance_ID, String inputGroupName) {
		// TODO Auto-generated method stub
		String FinalGroupName ="";
		
		List<String>AllAvailableGroup = new ArrayList<>();
		
		for(Set<String> valueList : LoadSubscriberMapping.BalanceGroupingMap.values()) {					
			if(valueList.contains(inputBalance_ID)){
				AllAvailableGroup.add(LoadSubscriberMapping.getKey(LoadSubscriberMapping.BalanceGroupingMap, valueList));	
			}
		}
		Set<String> A_currentGroup = new HashSet<>();
		Map<String,Set<String>> BestMatch = new HashMap<>();
		for(String A_ID: AllAvailableGroup)
		{
			if(LoadSubscriberMapping.BalanceOnlyAGroupMap.containsKey(A_ID))
			{
				Set<String> A_Items = Arrays.stream(LoadSubscriberMapping.BalanceOnlyAGroupMap.get(A_ID).split(",")).collect(Collectors.toSet());
				int i =0;
				A_currentGroup.clear();
				for(com.ericsson.jibx.beans.SubscriberXml.SchemasubscriberbalancesdumpInfo balanceInput : SortedBalanceInput){
					
					if(A_Items.contains(balanceInput.getBALANCETYPE()))
					{
						i++;
						FinalGroupName = A_ID;
						A_currentGroup.add(balanceInput.getBALANCETYPE());
						continue;
					}
					if(A_Items.size() == i)
					{
						FinalGroupName = A_ID;
						break;
					}						
				}
				if(A_currentGroup.size() == A_Items.size() && A_Items.containsAll(A_currentGroup))
					return FinalGroupName;
				else
					BestMatch.put(A_ID, A_currentGroup);
			}
		}
		int Maxsize;
		for(Map.Entry<String,Set<String>> entry : BestMatch.entrySet())
		{
			Maxsize = entry.getValue().size();
			for(Map.Entry<String,Set<String>> entry1 : BestMatch.entrySet())
			{
				if(entry1.getValue().size() > Maxsize)
					Maxsize = entry1.getValue().size();
			}
		}
		
		
		return;
		//return Collections.max(BestMatch.entrySet(), (entry1, entry2) -> entry1.getValue().size() - entry2.getValue().size()).getKey();
	}
	
	public String ComputeAGroupChanged(String inputBalance_ID, String inputGroupName) {
		// TODO Auto-generated method stub
		String FinalGroupName ="";
		
		//List<String>AllAvailableGroup = new ArrayList<>();
		Map<String, Set<String>> AllAvailableGroup = new HashMap<>();
		for(Set<String> valueList : LoadSubscriberMapping.BalanceGroupingMap.values()) {					
			if(valueList.contains(inputBalance_ID)){
				AllAvailableGroup.put(LoadSubscriberMapping.getKey(LoadSubscriberMapping.BalanceGroupingMap, valueList),valueList);	
			}
		}
		
		//Collections.sort(AllAvailableGroup);
		for(Map.Entry<String,Set<String>> entry : AllAvailableGroup.entrySet())
		{
			String A_ID = entry.getKey();
			Set<String> A_Value = new HashSet<>(entry.getValue());
			Set<String> A_currentGroup = new HashSet<>();
			if(LoadSubscriberMapping.BalanceOnlyAGroupMap.containsKey(A_ID))
			{
				Set<String> A_Items = Arrays.stream(LoadSubscriberMapping.BalanceOnlyAGroupMap.get(A_ID).split(",")).collect(Collectors.toSet());
				int i =0;
				for(com.ericsson.jibx.beans.SubscriberXml.SchemasubscriberbalancesdumpInfo balanceInput : SortedBalanceInput){
					if(A_Items.contains(balanceInput.getBALANCETYPE()))
					{
						i++;
						FinalGroupName = A_ID;
						A_currentGroup.add(balanceInput.getBALANCETYPE());
						continue;
					}
					if(A_Items.size() == i)
					{
						FinalGroupName = A_ID;
						break;
					}						
				}
				if(A_currentGroup.size() == A_Value.size() && A_Value.containsAll(A_currentGroup))
					return FinalGroupName;
			}
		}		
		return FinalGroupName;
	}
	
	public String ComputeCGroup(String inputBalance_ID, String inputGroupName) {
		// TODO Auto-generated method stub
		String FinalGroupName ="";
		
		List<String>AllAvailableGroup = new ArrayList<>();
		
		for(Set<String> valueList : LoadSubscriberMapping.BalanceGroupingMap.values()) {					
			if(valueList.contains(inputBalance_ID)){
				AllAvailableGroup.add(LoadSubscriberMapping.getKey(LoadSubscriberMapping.BalanceGroupingMap, valueList));	
			}
		}
		
		for(String C_ID: AllAvailableGroup)
		{
			if(LoadSubscriberMapping.BalanceOnlyAGroupMap.containsKey(C_ID))
			{
				Set<String> C_Items = Arrays.stream(LoadSubscriberMapping.BalanceOnlyAGroupMap.get(C_ID).split(",")).collect(Collectors.toSet());
				int i =0;
				for(com.ericsson.jibx.beans.SubscriberXml.SchemasubscriberbalancesdumpInfo balanceInput : SortedBalanceInput){
					if(C_Items.contains(balanceInput.getBALANCETYPE()))
					{
						i++;
						FinalGroupName = C_ID;
						continue;
					}
					if(C_Items.size() == i)
					{
						FinalGroupName = C_ID;
						break;
					}						
				}
			}
		}		
		return FinalGroupName;
	}
	
	public String ComputeFGroup(String inputBalance_ID, String inputGroupName) {
		// TODO Auto-generated method stub
		String FinalGroupName ="";
		
		List<String>AllAvailableGroup = new ArrayList<>();
		
		for(Set<String> valueList : LoadSubscriberMapping.BalanceGroupingMap.values()) {					
			if(valueList.contains(inputBalance_ID)){
				AllAvailableGroup.add(LoadSubscriberMapping.getKey(LoadSubscriberMapping.BalanceGroupingMap, valueList));	
			}
		}
		boolean FirstMatchFound = false;
		for(String F_ID: AllAvailableGroup)
		{
			//if(FirstMatchFound)
			//	break;
			if(LoadSubscriberMapping.BalanceOnlyFGroupMap.containsKey(F_ID))
			{
				Set<String> F_Items = Arrays.stream(LoadSubscriberMapping.BalanceOnlyFGroupMap.get(F_ID).split(",")).collect(Collectors.toSet());
				int i =0;
				for(com.ericsson.jibx.beans.SubscriberXml.SchemasubscriberbalancesdumpInfo balanceInput : SortedBalanceInput){
					if(F_Items.contains(balanceInput.getBALANCETYPE()))
					{
						i++;
						FinalGroupName = F_ID;
						continue;
					}
					if(F_Items.size() == i)
					{
						FinalGroupName = F_ID;
						//FirstMatchFound = true;
						break;
					}						
				}
			}
		}		
		return FinalGroupName;
	}
	
	public String ComputeDGroup(String inputBalance_ID, String inputGroupName) {
		// TODO Auto-generated method stub
		String FinalGroupName ="";
		
		List<String>AllAvailableGroup = new ArrayList<>();
		
		for(Set<String> valueList : LoadSubscriberMapping.BalanceGroupingMap.values()) {					
			if(valueList.contains(inputBalance_ID)){
				AllAvailableGroup.add(LoadSubscriberMapping.getKey(LoadSubscriberMapping.BalanceGroupingMap, valueList));	
			}
		}
		
		for(String D_ID: AllAvailableGroup)
		{
			if(LoadSubscriberMapping.BalanceOnlyDGroupMap.containsKey(D_ID))
			{
				Set<String> D_Items = Arrays.stream(LoadSubscriberMapping.BalanceOnlyDGroupMap.get(D_ID).split(",")).collect(Collectors.toSet());
				int i =0;
				for(com.ericsson.jibx.beans.SubscriberXml.SchemasubscriberbalancesdumpInfo balanceInput : SortedBalanceInput){
					if(D_Items.contains(balanceInput.getBALANCETYPE()))
					{
						i++;
						FinalGroupName = D_ID;
						continue;
					}
					if(D_Items.size() == i)
					{
						FinalGroupName = D_ID;
						break;
					}						
				}
			}
		}		
		return FinalGroupName;
	}
	
	/*	private List<String> offerFromBalanceMapping()
	{
		for(com.ericsson.jibx.beans.SubscriberXml.SchemasubscriberbalancesdumpInfo TempbalanceInput :  subscriber.getBalancesdumpInfoList()){
			System.out.println(TempbalanceInput.getBALANCETYPE() + "********" + TempbalanceInput.getBEBUCKETVALUE());
		}
		LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.forEach((k,v)->System.out.println(v.getBTID() + "++++" + v.getBTGroupIdentifier()));
		
		
		Date currDate = new Date();
		SimpleDateFormat sdfDaily = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		List<String> BalanceOfferList =new ArrayList<>();
		Set<String> CompletedGroup = new HashSet<>();
		
		
		for(com.ericsson.jibx.beans.SubscriberXml.SchemasubscriberbalancesdumpInfo balanceInput :  subscriber.getBalancesdumpInfoList())
		{
			String Balance_ID = balanceInput.getBALANCETYPE();
			//System.out.println("Master Balance_ID: " + Balance_ID);
			String Balance_Value = balanceInput.getBEBUCKETVALUE();
			String Balance_StartDate = balanceInput.getBEBUCKETSTARTDATE();
			String Balance_ExpiryDate = balanceInput.getBEEXPIRY();
			if(LoadSubscriberMapping.ProfileBalancesID.contains(Balance_ID))
			{
				LoadSubscriberMapping.ProfileBalancesIDDetails.put(Balance_ID,Balance_Value+"|"+ Balance_StartDate+"|"+ Balance_ExpiryDate);
			}
			
			if(!Balance_ExpiryDate.equals("1970-01-01 00:00:00") && CommonUtilities.convertDateToEpoch(Balance_ExpiryDate) < CommonUtilities.convertDateToEpoch(sdfDaily.format(currDate)))
			{
				onlyLog.add("INC4006:Balance_Type expired:MSISDN=" + msisdn + ":BALANCE_TYPE_ID=" + Balance_ID + ":BE_BUCKET_VALUE=" + Balance_Value + ":ACTION=Logging");
			}
				
			if(LoadSubscriberMapping.BalanceEmptyBTGroupIdentifierMap.get(Balance_ID + "|") != null)
			{
				String Offer_ID = LoadSubscriberMapping.BalanceEmptyBTGroupIdentifierMap.get(Balance_ID + "|").getOfferID();
				String Symbol = LoadSubscriberMapping.BalanceEmptyBTGroupIdentifierMap.get(Balance_ID + "|").getSymbols();
				String BT_Value = LoadSubscriberMapping.BalanceEmptyBTGroupIdentifierMap.get(Balance_ID + "|").getBTValue();
				String Product_Private = LoadSubscriberMapping.BalanceEmptyBTGroupIdentifierMap.get(Balance_ID + "|").getProductPrivate();
				String Offer_Type = LoadSubscriberMapping.BalanceEmptyBTGroupIdentifierMap.get(Balance_ID + "|").getOfferType();
				boolean startFlag = LoadSubscriberMapping.BalanceEmptyBTGroupIdentifierMap.get(Balance_ID + "|").getOfferStartDate().length() > 0 ? true:false;
				boolean expiryFalg = LoadSubscriberMapping.BalanceEmptyBTGroupIdentifierMap.get(Balance_ID + "|").getOfferExpiryDate().length() > 0 ? true:false;
				
				
				if(!Offer_ID.isEmpty())
				{					
					if(Symbol.isEmpty() && BT_Value.isEmpty())
					{	
						BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate, Product_Private,""));
					}
					else
					{
						if(Symbol.equals(">=") && Integer.parseInt(Balance_Value) >= Integer.parseInt(BT_Value))
							BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,Product_Private,""));
						else if(Symbol.equals(">") && Integer.parseInt(Balance_Value) > Integer.parseInt(BT_Value))
							BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,Product_Private,""));
						else if(Symbol.equals("=") && Integer.parseInt(Balance_Value) == Integer.parseInt(BT_Value))
							BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,Product_Private,""));
						else if(Symbol.equals("or"))
						{
							//Integer.parseInt(Balance_Value) == Integer.parseInt(BT_Value)
							String[] values = BT_Value.split(",");
							
							if(Arrays.stream(values).anyMatch(Balance_Value::equals))
								BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,Product_Private,""));
							else
								onlyLog.add("INC4004:Balance_Type lookup failed in Product_Mapping:MSISDN=" + msisdn + ":BALANCE_TYPE_ID=" + Balance_ID + ":BE_BUCKET_VALUE=" + Balance_Value + ":ACTION=Logging");
						}
						else
							onlyLog.add("INC4004:Balance_Type lookup failed in Product_Mapping:MSISDN=" + msisdn + ":BALANCE_TYPE_ID=" + Balance_ID + ":BE_BUCKET_VALUE=" + Balance_Value + ":ACTION=Logging");
					}
				}	
			}	
			else
			{	
				if(Arrays.stream(ExceptionBalances).anyMatch(Balance_ID::equals))
				{
					if(Balance_ID.equals("1832"))
					{
						if(LoadSubscriberMapping.SpecialBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + Balance_Value) != null)
						{
							String Offer_ID = LoadSubscriberMapping.SpecialBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + Balance_Value).getOfferID();
							String Offer_Type = LoadSubscriberMapping.SpecialBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + Balance_Value).getOfferType();
							boolean startFlag = LoadSubscriberMapping.SpecialBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + Balance_Value).getOfferStartDate().length() > 0 ? true:false;
							boolean expiryFalg = LoadSubscriberMapping.SpecialBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + Balance_Value).getOfferExpiryDate().length() > 0 ? true:false;
							BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,"", "","",""));
						}
						else
						{
							onlyLog.add("INC4004:Balance_Type lookup failed in Product_Mapping:MSISDN=" + msisdn + ":BALANCE_TYPE_ID=" + Balance_ID + ":BE_BUCKET_VALUE=" + Balance_Value + ":ACTION=Logging");
						}
					}
					if(Balance_ID.equals("21"))
					{							
						//LoadSubscriberMapping.MainBalanceGroupingMap.forEach(action->System.out.println(action));Balance_ID + '|' + CCID + '|' + BTGroupIdentifier
						//LoadSubscriberMapping.MainBalanceGroupingList.forEach(BTGrp->
						for (String BTGrp: LoadSubscriberMapping.MainBalanceGroupingList)
						{
							if(LoadSubscriberMapping.MainBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + subscriber.getSubscriberInfoCCSACCTTYPEID() + '|' + BTGrp) != null)
							{
								String Offer_ID = LoadSubscriberMapping.MainBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + subscriber.getSubscriberInfoCCSACCTTYPEID() + '|' + BTGrp).getOfferID();
								String Symbol = LoadSubscriberMapping.MainBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + subscriber.getSubscriberInfoCCSACCTTYPEID() + '|' + BTGrp).getSymbols();
								String Offer_Type = LoadSubscriberMapping.MainBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + subscriber.getSubscriberInfoCCSACCTTYPEID() + '|' + BTGrp).getOfferType();
								boolean startFlag = LoadSubscriberMapping.MainBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + subscriber.getSubscriberInfoCCSACCTTYPEID() + '|' + BTGrp).getOfferStartDate().length() > 0 ? true:false;
								boolean expiryFalg = LoadSubscriberMapping.MainBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + subscriber.getSubscriberInfoCCSACCTTYPEID() + '|' + BTGrp).getOfferExpiryDate().length() > 0 ? true:false;
								String BT_Value = LoadSubscriberMapping.MainBalanceNonBTGroupIdentifierMap.get(Balance_ID + "|" + subscriber.getSubscriberInfoCCSACCTTYPEID() + '|' + BTGrp).getBTValue();
								
								
								if(Symbol.equals("<") && Double.parseDouble(Balance_Value) < Double.parseDouble(BT_Value))
								{
									CompletedGroup.add(BTGrp);
									BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,"",""));
									//break;
								}
								else if(Symbol.equals(">") && Double.parseDouble(Balance_Value) > Double.parseDouble(BT_Value))
								{
									CompletedGroup.add(BTGrp);
									BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,"",""));
									//break;
								}
								else if(Symbol.equals("=") && Long.parseLong(Balance_Value) == Long.parseLong(BT_Value))
								{
									CompletedGroup.add(BTGrp);
									BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,"",""));
									//break;
								}
								else if(Symbol.equals("or"))
								{
									//Integer.parseInt(Balance_Value) == Integer.parseInt(BT_Value)
									String[] values = BT_Value.split(",");											
									if(Arrays.stream(values).anyMatch(Balance_Value::equals))
									{
										CompletedGroup.add(BTGrp);
										BalanceOfferList.add(PopulateOffer(Offer_ID,Offer_Type,startFlag,expiryFalg,Balance_StartDate, Balance_ExpiryDate,"",""));
										//break;
									}
									else
										onlyLog.add("INC4004:Balance_Type lookup failed in Product_Mapping:MSISDN=" + msisdn + ":BALANCE_TYPE_ID=" + Balance_ID + ":BE_BUCKET_VALUE=" + Balance_Value + ":ACTION=Logging");
								}
								else
								{
									if(Double.parseDouble(Balance_Value) > 120.024 && Double.parseDouble(Balance_Value) < 320.064)
										onlyLog.add("INC4004:Balance_Type lookup failed in Product_Mapping:MSISDN=" + msisdn + ":BALANCE_TYPE_ID=" + Balance_ID + ":BE_BUCKET_VALUE=" + Balance_Value + ":ACTION=Logging");
									
								}
							}
						}
					}
				}
				else
				{
					String GroupName = "";
					List<String> CurrentGroupBalance = new ArrayList<>();
					List<String> ValidGroupBalanceOffer = new ArrayList<>();
					for(Set<String> valueList : LoadSubscriberMapping.BalanceGroupingMap.values()) {					
						if(valueList.contains(Balance_ID)){
							GroupName = LoadSubscriberMapping.getKey(LoadSubscriberMapping.BalanceGroupingMap, valueList);
							for (String x : valueList)
								CurrentGroupBalance.add(x); 
							break;
						}
					}	
					
					if(!CompletedGroup.contains(GroupName))
					{
						//System.out.println(Balance_ID + "----" +GroupName);
						
						if(CurrentGroupBalance.size() > 0)
						{
							String FinalGroupName = GroupName;
							//System.out.println(FinalGroupName);	
							for(String id : CurrentGroupBalance)
							{
								//System.out.println(id);
								for(com.ericsson.jibx.beans.SubscriberXml.SchemasubscriberbalancesdumpInfo TempbalanceInput :  subscriber.getBalancesdumpInfoList()){
									String TempBalance_ID = TempbalanceInput.getBALANCETYPE();
									String TempBalance_Name = TempbalanceInput.getBALANCETYPENAME();
									String TempBalance_Value = TempbalanceInput.getBEBUCKETVALUE();
									String TempBalance_StartDate = TempbalanceInput.getBEBUCKETSTARTDATE();
									String TempBalance_ExpiryDate = TempbalanceInput.getBEEXPIRY();							
									if(id.equals(TempBalance_ID))
									{
										if(LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(id + "|" + FinalGroupName) != null)
										{
											String Offer_ID = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + FinalGroupName).getOfferID();
											String Symbol = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + FinalGroupName).getSymbols();
											String BT_Value = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + FinalGroupName).getBTValue();
											String Product_Private = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + FinalGroupName).getProductPrivate();
											String Offer_Type = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + FinalGroupName).getOfferType();
											boolean startFlag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + FinalGroupName).getOfferStartDate().length() > 0 ? true:false;
											boolean expiryFalg = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + FinalGroupName).getOfferExpiryDate().length() > 0 ? true:false;
											
											if(Symbol.equals(">=") && Integer.parseInt(TempBalance_Value) >= Integer.parseInt(BT_Value))
											{
												CompletedGroup.add(FinalGroupName);
												ValidGroupBalanceOffer.add(TempBalance_Name + ";" + TempBalance_ID + ";" + TempBalance_Value +"|" + Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + TempBalance_StartDate + ";" + TempBalance_ExpiryDate  + ";" + Product_Private);
												break;
											}
											else if(Symbol.equals(">") && Integer.parseInt(TempBalance_Value) > Integer.parseInt(BT_Value))
											{
												CompletedGroup.add(FinalGroupName);
												ValidGroupBalanceOffer.add(TempBalance_Name + ";" + TempBalance_ID + ";" + TempBalance_Value + "|" + Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + TempBalance_StartDate + ";" + TempBalance_ExpiryDate  + ";" + Product_Private);
												break;
											}
											else if(Symbol.equals("=") && Integer.parseInt(TempBalance_Value) == Integer.parseInt(BT_Value))
											{
												CompletedGroup.add(FinalGroupName);
												ValidGroupBalanceOffer.add(TempBalance_Name + ";" + TempBalance_ID + ";" + TempBalance_Value + "|" + Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + TempBalance_StartDate + ";" + TempBalance_ExpiryDate  + ";" + Product_Private);
												break;
											}
											else if(Symbol.equals("or"))
											{
												//Integer.parseInt(Balance_Value) == Integer.parseInt(BT_Value)
												String[] values = BT_Value.split(",");											
												if(Arrays.stream(values).anyMatch(TempBalance_Value::equals))
												{
													CompletedGroup.add(FinalGroupName);
													ValidGroupBalanceOffer.add(TempBalance_Name + ";" + TempBalance_ID + ";" + TempBalance_Value + "|" + Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + TempBalance_StartDate + ";" + TempBalance_ExpiryDate  + ";" + Product_Private);
													break;
												}
												else
													onlyLog.add("INC4004:Balance_Type lookup failed in Product_Mapping:MSISDN=" + msisdn + ":BALANCE_TYPE_ID=" + TempBalance_ID + ":BE_BUCKET_VALUE=" + TempBalance_Value + ":ACTION=Logging");
											}
											else
												onlyLog.add("INC4004:Balance_Type lookup failed in Product_Mapping:MSISDN=" + msisdn + ":BALANCE_TYPE_ID=" + TempBalance_ID + ":BE_BUCKET_VALUE=" + TempBalance_Value + ":ACTION=Logging");
										}
										else
										{
											//System.out.println("Discarded Logs: " + id);
											onlyLog.add("INC4004:Balance_Type lookup failed in Product_Mapping:MSISDN=" + msisdn + ":BALANCE_TYPE_ID=" + TempBalance_ID + ":BE_BUCKET_VALUE=" + TempBalance_Value + ":ACTION=Logging");
										}
									}
								}
							}
							
							if(FinalGroupName.startsWith("A"))
							{
								if(ValidGroupBalanceOffer.size() == CurrentGroupBalance.size())
								{
									String TargetOffer = ValidGroupBalanceOffer.get(0).split("\\|")[1];
									// Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + Balance_StartDate + ";" + Balance_ExpiryDate  + ";" + Product_Private
									BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
											Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
								}
								else
								{
									if(ValidGroupBalanceOffer.size() > CurrentGroupBalance.size())
									{
										ValidGroupBalanceOffer.forEach(item->{
											String SourceValue = item.split("\\|")[0].split(";")[1];
											String TargetOffer = item.split("\\|")[1];
											String Offer_ID = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(SourceValue + "|" + FinalGroupName.charAt(0) + "M").getOfferID();
											
											BalanceOfferList.add(PopulateOffer(Offer_ID,TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
													Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
										});
									}
									else
									{
										ValidGroupBalanceOffer.forEach(item->{
											String TargetBalanceName = item.split("\\|")[0].split(";")[0];
											if(TargetBalanceName.startsWith("_pc_"))
											{
												String TargetOffer = item.split("\\|")[1];
												BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
														Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
											}
											else if(TargetBalanceName.equals("HardCap Cash"))
											{
												String TargetOffer = item.split("\\|")[1];
												BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
														Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
											}
										});
									}
								}
							}
							if(FinalGroupName.startsWith("B"))
							{
								if(ValidGroupBalanceOffer.size() == CurrentGroupBalance.size())
								{
									String TargetOffer = ValidGroupBalanceOffer.get(0).split("\\|")[1];
									// Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + Balance_StartDate + ";" + Balance_ExpiryDate  + ";" + Product_Private
									BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
											Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
								}
								else
								{
									ValidGroupBalanceOffer.forEach(item->{
										String TargetBalanceID = item.split("\\|")[0].split(";")[1];
										String TargetBalanceValue = item.split("\\|")[0].split(";")[2];
										onlyLog.add("INC4005:Balance_Type Group Member not found.:MSISDN=" + msisdn + ":BALANCE_TYPE_ID=" + TargetBalanceID + ":BE_BUCKET_VALUE=" + TargetBalanceValue + ":ACTION=Logging");
									});
								}
							}
							if(FinalGroupName.startsWith("C"))
							{								
								if(ValidGroupBalanceOffer.size() == CurrentGroupBalance.size())
								{
									String TargetOffer = ValidGroupBalanceOffer.get(0).split("\\|")[1];
									// Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + Balance_StartDate + ";" + Balance_ExpiryDate  + ";" + Product_Private
									BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
											Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
								}
								else
								{
									if(ValidGroupBalanceOffer.size() > CurrentGroupBalance.size())
									{
										ValidGroupBalanceOffer.forEach(item->{
											String SourceValue = item.split("\\|")[0].split(";")[1];
											String TargetOffer = item.split("\\|")[1];
											String Offer_ID = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(SourceValue + "|" + FinalGroupName.charAt(0) + "M").getOfferID();
											
											BalanceOfferList.add(PopulateOffer(Offer_ID,TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
													Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
										});
									}
									else
									{
										ValidGroupBalanceOffer.forEach(item->{
											String TargetBalanceName = item.split("\\|")[0].split(";")[0];
											if(TargetBalanceName.startsWith("_pc_"))
											{	
												String TargetBalanceID = item.split("\\|")[0].split(";")[1];
												String TargetBalanceValue = item.split("\\|")[0].split(";")[2];
												onlyLog.add("INC4005:Balance_Type Group Member not found.:MSISDN=" + msisdn + ":BALANCE_TYPE_ID=" + TargetBalanceID + ":BE_BUCKET_VALUE=" + TargetBalanceValue + ":ACTION=Logging");
											}
											else
											{
												String TargetOffer = item.split("\\|")[1];
												BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[1],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
														Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
											}
										});
									}
								}								
							}
							if(FinalGroupName.startsWith("S") || FinalGroupName.startsWith("T") || FinalGroupName.startsWith("U"))
							{								
								if(ValidGroupBalanceOffer.size() == CurrentGroupBalance.size())
								{
									String TargetOffer = ValidGroupBalanceOffer.get(0).split("\\|")[1];
									// Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + Balance_StartDate + ";" + Balance_ExpiryDate  + ";" + Product_Private
									BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
											Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
								}
								else
								{
									ValidGroupBalanceOffer.forEach(item->{
										String TargetBalanceName = item.split("\\|")[0].split(";")[0];
										if(TargetBalanceName.startsWith("_pc_"))
										{	
											String TargetBalanceID = item.split("\\|")[0].split(";")[1];
											String TargetBalanceValue = item.split("\\|")[0].split(";")[2];
											onlyLog.add("INC4005:Balance_Type Group Member not found.:MSISDN=" + msisdn + ":BALANCE_TYPE_ID=" + TargetBalanceID + ":BE_BUCKET_VALUE=" + TargetBalanceValue + ":ACTION=Logging");
										}
										else
										{
											String TargetOffer = item.split("\\|")[1];
											BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
													Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
										}
									});
								}								
							}
							
							if(FinalGroupName.startsWith("D"))
							{
								if(ValidGroupBalanceOffer.size() == CurrentGroupBalance.size())
								{
									String TargetOffer = ValidGroupBalanceOffer.get(0).split("\\|")[1];
									// Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + Balance_StartDate + ";" + Balance_ExpiryDate  + ";" + Product_Private
									BalanceOfferList.add(PopulateOffer("5010",TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
											Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
								}
								else
								{
									ValidGroupBalanceOffer.forEach(item->{
										String TargetBalanceName = item.split("\\|")[0].split(";")[0];
										if(TargetBalanceName.startsWith("_pc_"))
										{	
											String TargetBalanceID = item.split("\\|")[0].split(";")[1];
											String TargetBalanceValue = item.split("\\|")[0].split(";")[2];
											onlyLog.add("INC4005:Balance_Type Group Member not found.:MSISDN=" + msisdn + ":BALANCE_TYPE_ID=" + TargetBalanceID + ":BE_BUCKET_VALUE=" + TargetBalanceValue + ":ACTION=Logging");
										}
										else
										{											
											String TargetOffer = item.split("\\|")[1];
											BalanceOfferList.add(PopulateOffer("5009",TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
													Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
										}
									});
								}
							}
							if(FinalGroupName.startsWith("3011_1_DUMMY"))
							{
								if(ValidGroupBalanceOffer.size() == CurrentGroupBalance.size())
								{
									String TargetOffer = ValidGroupBalanceOffer.get(0).split("\\|")[1];
									// Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + Balance_StartDate + ";" + Balance_ExpiryDate  + ";" + Product_Private
									BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
											Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
								}
							}
							if(FinalGroupName.startsWith("E"))
							{
								if(ValidGroupBalanceOffer.size() == CurrentGroupBalance.size())
								{
									String TargetOffer = ValidGroupBalanceOffer.get(0).split("\\|")[1];
									// Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + Balance_StartDate + ";" + Balance_ExpiryDate  + ";" + Product_Private
									BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
											Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],"1"));
								}
								else
								{
									String tempGrpName = GroupName.equals("E1") ? "E2": "E1";
									List<String> ValidGroupBalanceOffer4E = new ArrayList<>();
									for(String id: CurrentGroupBalance)
									{
										for(com.ericsson.jibx.beans.SubscriberXml.SchemasubscriberbalancesdumpInfo TempbalanceInput :  subscriber.getBalancesdumpInfoList()){
											String TempBalance_ID = TempbalanceInput.getBALANCETYPE();
											String TempBalance_Name = TempbalanceInput.getBALANCETYPENAME();
											String TempBalance_Value = TempbalanceInput.getBEBUCKETVALUE();
											String TempBalance_StartDate = TempbalanceInput.getBEBUCKETSTARTDATE();
											String TempBalance_ExpiryDate = TempbalanceInput.getBEEXPIRY();							
											if(id.equals(TempBalance_ID))
											{
												if(LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(id + "|" + tempGrpName) != null)
												{
													String Offer_ID = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + tempGrpName).getOfferID();
													String Symbol = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + tempGrpName).getSymbols();
													String BT_Value = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + tempGrpName).getBTValue();
													String Product_Private = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + tempGrpName).getProductPrivate();
													String Offer_Type = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + tempGrpName).getOfferType();
													boolean startFlag = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + tempGrpName).getOfferStartDate().length() > 0 ? true:false;
													boolean expiryFalg = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(TempBalance_ID + "|" + tempGrpName).getOfferExpiryDate().length() > 0 ? true:false;
													
													if(Symbol.equals(">=") && Integer.parseInt(TempBalance_Value) >= Integer.parseInt(BT_Value))
													{
														CompletedGroup.add(FinalGroupName);
														ValidGroupBalanceOffer4E.add(TempBalance_Name + ";" + TempBalance_ID + ";" + TempBalance_Value +"|" + Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + TempBalance_StartDate + ";" + TempBalance_ExpiryDate  + ";" + Product_Private);
														break;
													}
													else if(Symbol.equals(">") && Integer.parseInt(TempBalance_Value) > Integer.parseInt(BT_Value))
													{
														CompletedGroup.add(FinalGroupName);
														ValidGroupBalanceOffer4E.add(TempBalance_Name + ";" + TempBalance_ID + ";" + TempBalance_Value + "|" + Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + TempBalance_StartDate + ";" + TempBalance_ExpiryDate  + ";" + Product_Private);
														break;
													}
													else if(Symbol.equals("=") && Integer.parseInt(TempBalance_Value) == Integer.parseInt(BT_Value))
													{
														CompletedGroup.add(FinalGroupName);
														ValidGroupBalanceOffer4E.add(TempBalance_Name + ";" + TempBalance_ID + ";" + TempBalance_Value + "|" + Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + TempBalance_StartDate + ";" + TempBalance_ExpiryDate  + ";" + Product_Private);
														break;
													}
													else if(Symbol.equals("or"))
													{
														//Integer.parseInt(Balance_Value) == Integer.parseInt(BT_Value)
														String[] values = BT_Value.split(",");											
														if(Arrays.stream(values).anyMatch(TempBalance_Value::equals))
														{
															CompletedGroup.add(FinalGroupName);
															ValidGroupBalanceOffer4E.add(TempBalance_Name + ";" + TempBalance_ID + ";" + TempBalance_Value + "|" + Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + TempBalance_StartDate + ";" + TempBalance_ExpiryDate  + ";" + Product_Private);
															break;
														}
														else
															onlyLog.add("INC4004:Balance_Type lookup failed in Product_Mapping:MSISDN=" + msisdn + ":BALANCE_TYPE_ID=" + TempBalance_ID + ":BE_BUCKET_VALUE=" + TempBalance_Value + ":ACTION=Logging");
													}
													else
														onlyLog.add("INC4004:Balance_Type lookup failed in Product_Mapping:MSISDN=" + msisdn + ":BALANCE_TYPE_ID=" + TempBalance_ID + ":BE_BUCKET_VALUE=" + TempBalance_Value + ":ACTION=Logging");
												}																						
											}
										}
									}
									if(ValidGroupBalanceOffer4E.size() == CurrentGroupBalance.size())
									{
										String TargetOffer = ValidGroupBalanceOffer4E.get(0).split("\\|")[1];
										// Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + Balance_StartDate + ";" + Balance_ExpiryDate  + ";" + Product_Private
										BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
												Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],"1"));
									}
									else
									{
										ValidGroupBalanceOffer4E.forEach(item->{
										String TargetBalanceName = item.split("\\|")[0].split(";")[0];
										if(TargetBalanceName.equals("DataBundleCount"))
										{	
											String TargetOffer = item.split("\\|")[1];
											BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
													Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],"0"));
										}
										else
										{
											String TargetOffer = item.split("\\|")[1];
											BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
													Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],"1"));
										}});
									}
								}
							}
							if(FinalGroupName.startsWith("F"))
							{
								if(ValidGroupBalanceOffer.size() == CurrentGroupBalance.size())
								{
									String TargetOffer = ValidGroupBalanceOffer.get(0).split("\\|")[1];
									// Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + Balance_StartDate + ";" + Balance_ExpiryDate  + ";" + Product_Private
									BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
											Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],"1"));
								}
								else
								{
									ValidGroupBalanceOffer.forEach(item->{
										String TargetBalanceName = item.split("\\|")[0].split(";")[0];
										if(TargetBalanceName.endsWith("Purch"))
										{	
											String TargetBalanceID = item.split("\\|")[0].split(";")[1];
											String TargetBalanceValue = item.split("\\|")[0].split(";")[2];
											onlyLog.add("INC4005:Balance_Type Group Member not found.:MSISDN=" + msisdn + ":BALANCE_TYPE_ID=" + TargetBalanceID + ":BE_BUCKET_VALUE=" + TargetBalanceValue + ":ACTION=Logging");
										}
										else
										{
											String TargetOffer = item.split("\\|")[1];
											BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
													Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
										}
									});
								}
							}
							if(FinalGroupName.startsWith("G"))
							{
								if(ValidGroupBalanceOffer.size() == CurrentGroupBalance.size())
								{
									for(String item : ValidGroupBalanceOffer)
									{
										String TargetBalanceName = item.split("\\|")[0].split(";")[0];
										String TargetOffer = ValidGroupBalanceOffer.get(0).split("\\|")[1];
										if(TargetBalanceName.startsWith("_pc_"))
										{	
											BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
													Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6]));
											
											BalanceOfferList.add(PopulateOffer("4608","TIMER",false,false,"", "",""));
										}
									}
									ValidGroupBalanceOffer.forEach(item->{
										String TargetBalanceName = item.split("\\|")[0].split(";")[0];
										String TargetOffer = ValidGroupBalanceOffer.get(0).split("\\|")[1];
										if(TargetBalanceName.startsWith("_pc_"))
										{	
											BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
													Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
											
											BalanceOfferList.add(PopulateOffer("4608","TIMER",false,false,"", "","",""));
										}});
								}
								else
								{
									int Offer_Created = 0; 
									for (String item : ValidGroupBalanceOffer) {
										String TargetBalanceName = item.split("\\|")[0].split(";")[0];
										if(ValidGroupBalanceOffer.size() == 1 && TargetBalanceName.startsWith("_pc_"))
										{	
											String TargetBalanceID = item.split("\\|")[0].split(";")[1];
											String TargetBalanceValue = item.split("\\|")[0].split(";")[2];
											onlyLog.add("INC4005:Balance_Type Group Member not found.:MSISDN=" + msisdn + ":BALANCE_TYPE_ID=" + TargetBalanceID + ":BE_BUCKET_VALUE=" + TargetBalanceValue + ":ACTION=Logging");
										}
										else if (Offer_Created == 0)
										{
											String TargetOffer = item.split("\\|")[1];
											BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
													Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
											BalanceOfferList.add(PopulateOffer("4608","TIMER",false,false,"", "","",""));
											Offer_Created = 1;
										}							
									}																		
								}
							}
							if(FinalGroupName.startsWith("H"))
							{
								if(ValidGroupBalanceOffer.size() == CurrentGroupBalance.size())
								{
									String TargetOffer = ValidGroupBalanceOffer.get(0).split("\\|")[1];
									// Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + Balance_StartDate + ";" + Balance_ExpiryDate  + ";" + Product_Private
									BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
											Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
									ValidGroupBalanceOffer.forEach(item->{
										if(item.split("\\|")[0].contains("_pc_"))
										{
											String TargetOffer = item.split("\\|")[1];
											BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
												Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
										}
									});
								}
								else
								{
									if(ValidGroupBalanceOffer.size() > CurrentGroupBalance.size())
									{
										ValidGroupBalanceOffer.forEach(item->{
											String SourceValue = item.split("\\|")[0].split(";")[1];
											String TargetOffer = item.split("\\|")[1];
											String Offer_ID = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(SourceValue + "|" + FinalGroupName.substring(0, 3) + "M").getOfferID();
											
											BalanceOfferList.add(PopulateOffer(Offer_ID,TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
													Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
										});
									}
									else
									{
										ValidGroupBalanceOffer.forEach(item->{
											String TargetBalanceName = item.split("\\|")[0].split(";")[0];
											if(TargetBalanceName.endsWith("_pc_"))
											{	
												String TargetBalanceID = item.split("\\|")[0].split(";")[1];
												String TargetBalanceValue = item.split("\\|")[0].split(";")[2];
												onlyLog.add("INC4005:Balance_Type Group Member not found.:MSISDN=" + msisdn + ":BALANCE_TYPE_ID=" + TargetBalanceID + ":BE_BUCKET_VALUE=" + TargetBalanceValue + ":ACTION=Logging");
											}
											else
											{
												String TargetOffer = item.split("\\|")[1];
												BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
														Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
											}
										});
									}
								}
							}
							if(FinalGroupName.startsWith("I"))
							{
								if(ValidGroupBalanceOffer.size() == CurrentGroupBalance.size())
								{
									String TargetOffer = ValidGroupBalanceOffer.get(0).split("\\|")[1];
									BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
											Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
								}
								else
								{
								   boolean MasterTypeFound = false;
								   for(String item: ValidGroupBalanceOffer)
								   {
										if (item.split("\\|")[0].split(";")[0].startsWith("DlySocBndl"))
										{
											MasterTypeFound = true;
											break;
										}																					
								   }
								   if(MasterTypeFound)
								   {
									   ValidGroupBalanceOffer.forEach(item->{
											String TargetBalanceName = item.split("\\|")[0].split(";")[0];
											
											if(ValidGroupBalanceOffer.size() == 1 && TargetBalanceName.startsWith("_pc_"))
											{	
												String TargetBalanceID = item.split("\\|")[0].split(";")[1];
												String TargetBalanceValue = item.split("\\|")[0].split(";")[2];
												onlyLog.add("INC4005:Balance_Type Group Member not found.:MSISDN=" + msisdn + ":BALANCE_TYPE_ID=" + TargetBalanceID + ":BE_BUCKET_VALUE=" + TargetBalanceValue + ":ACTION=Logging");
											}
											else
											{
												String TargetOffer = item.split("\\|")[1];											
												BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
														Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
											}
										});		
								   }
								   else
								   {
									   if(CurrentGroupBalance.contains("3287"))
										   onlyLog.add("INC4005:Balance_Type Group Member not found.:MSISDN=" + msisdn + ":BALANCE_TYPE_ID=3287:BE_BUCKET_VALUE=0:ACTION=Logging");
									   if(CurrentGroupBalance.contains("3282"))
										   onlyLog.add("INC4005:Balance_Type Group Member not found.:MSISDN=" + msisdn + ":BALANCE_TYPE_ID=3282:BE_BUCKET_VALUE=0:ACTION=Logging");
									   if(CurrentGroupBalance.contains("3283"))
										   onlyLog.add("INC4005:Balance_Type Group Member not found.:MSISDN=" + msisdn + ":BALANCE_TYPE_ID=3283:BE_BUCKET_VALUE=0:ACTION=Logging");
								   }
								}
							}
							if(FinalGroupName.startsWith("J"))
							{
								if(ValidGroupBalanceOffer.size() == CurrentGroupBalance.size())
								{
									String TargetOffer = ValidGroupBalanceOffer.get(0).split("\\|")[1];
									// Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + Balance_StartDate + ";" + Balance_ExpiryDate  + ";" + Product_Private
									BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
											Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
								}
								else
								{
									ValidGroupBalanceOffer.forEach(item->{											
										String TargetOffer = item.split("\\|")[1];
										if(CurrentGroupBalance.contains(TargetOffer.split(";")[0]))
										{
											BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
													Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
										}
										else
										{
											String TargetBalanceID = item.split("\\|")[0].split(";")[1];
											String TargetBalanceValue = item.split("\\|")[0].split(";")[2];
											onlyLog.add("INC4005:Balance_Type Group Member not found.:MSISDN=" + msisdn + ":BALANCE_TYPE_ID=" + TargetBalanceID + ":BE_BUCKET_VALUE=" + TargetBalanceValue + ":ACTION=Logging");
										}
									});
								}
							}
							if(FinalGroupName.startsWith("K") || FinalGroupName.startsWith("M"))
							{
								if(ValidGroupBalanceOffer.size() == CurrentGroupBalance.size())
								{
									String TargetOffer = ValidGroupBalanceOffer.get(0).split("\\|")[1];
									// Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + Balance_StartDate + ";" + Balance_ExpiryDate  + ";" + Product_Private
									BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
											Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
									if(FinalGroupName.startsWith("K"))
										BalanceOfferList.add(PopulateOffer("4007",TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
											Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
									
									if(FinalGroupName.startsWith("M"))
										BalanceOfferList.add(PopulateOffer("4008",TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
												Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
								}
								else
								{
									ValidGroupBalanceOffer.forEach(item->{											
										String TargetOffer = item.split("\\|")[1];
										if(CurrentGroupBalance.contains(TargetOffer.split(";")[0]))
										{											
											BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
													Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
											if(FinalGroupName.startsWith("K"))
												BalanceOfferList.add(PopulateOffer("4007",TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
													Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
											
											if(FinalGroupName.startsWith("M"))
												BalanceOfferList.add(PopulateOffer("4008",TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
														Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
										}
										else
										{
											String TargetBalanceID = item.split("\\|")[0].split(";")[1];
											String TargetBalanceValue = item.split("\\|")[0].split(";")[2];
											onlyLog.add("INC4005:Balance_Type Group Member not found.:MSISDN=" + msisdn + ":BALANCE_TYPE_ID=" + TargetBalanceID + ":BE_BUCKET_VALUE=" + TargetBalanceValue + ":ACTION=Logging");
										}
									});
								}
								
							}
							if(FinalGroupName.startsWith("N") || FinalGroupName.startsWith("V") || FinalGroupName.startsWith("W") || FinalGroupName.startsWith("X") || FinalGroupName.startsWith("Y"))
							{
								if(ValidGroupBalanceOffer.size() == CurrentGroupBalance.size())
								{
									String TargetOffer = ValidGroupBalanceOffer.get(0).split("\\|")[1];
									// Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + Balance_StartDate + ";" + Balance_ExpiryDate  + ";" + Product_Private
									BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
											Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
								}
								else
								{
									if(ValidGroupBalanceOffer.size() > CurrentGroupBalance.size())
									{
										ValidGroupBalanceOffer.forEach(item->{
											String SourceValue = item.split("\\|")[0].split(";")[1];
											String TargetOffer = item.split("\\|")[1];
											String Offer_ID = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(SourceValue + "|" + FinalGroupName.charAt(0) + "M").getOfferID();
											
											BalanceOfferList.add(PopulateOffer(Offer_ID,TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
													Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
										});
									}
									else
									{
										ValidGroupBalanceOffer.forEach(item->{
											String TargetOffer = item.split("\\|")[1];
											if(CurrentGroupBalance.contains(TargetOffer.split(";")[0]))
											{											
												BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
														Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
											}
											else
											{
												String TargetBalanceID = item.split("\\|")[0].split(";")[1];
												String TargetBalanceValue = item.split("\\|")[0].split(";")[2];
												onlyLog.add("INC4005:Balance_Type Group Member not found.:MSISDN=" + msisdn + ":BALANCE_TYPE_ID=" + TargetBalanceID + ":BE_BUCKET_VALUE=" + TargetBalanceValue + ":ACTION=Logging");
											}											
										});
									}
								}
							}
							if(FinalGroupName.startsWith("1AB"))
							{
								if(ValidGroupBalanceOffer.size() == CurrentGroupBalance.size())
								{
									String TargetOffer = ValidGroupBalanceOffer.get(0).split("\\|")[1];
									// Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + Balance_StartDate + ";" + Balance_ExpiryDate  + ";" + Product_Private
									BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
											Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
								}
								else
								{
									if(ValidGroupBalanceOffer.size() > CurrentGroupBalance.size())
									{
										ValidGroupBalanceOffer.forEach(item->{
											String SourceValue = item.split("\\|")[0].split(";")[1];
											String TargetOffer = item.split("\\|")[1];
											String Offer_ID = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(SourceValue + "|" + FinalGroupName.substring(0, 3) + "M").getOfferID();
											
											BalanceOfferList.add(PopulateOffer(Offer_ID,TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
													Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
										});
									}
									else
									{
										ValidGroupBalanceOffer.forEach(item->{
											String TargetBalanceName = item.split("\\|")[0].split(";")[0];
											if(TargetBalanceName.startsWith("_pc_"))
											{
												String TargetOffer = item.split("\\|")[1];
												BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
														Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
											}
											else
											{
												String TargetOffer = item.split("\\|")[1];
												BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
														Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
											}
										});
										
									}
								}
							}
							if(FinalGroupName.startsWith("1AD") || FinalGroupName.startsWith("1AC") || FinalGroupName.startsWith("1AC") || FinalGroupName.startsWith("1AE") || FinalGroupName.startsWith("1AF") || FinalGroupName.startsWith("1AG") 
									|| FinalGroupName.startsWith("1AI") || FinalGroupName.startsWith("1AJ") || FinalGroupName.startsWith("1AK") || FinalGroupName.startsWith("1AL"))
							{
								if(ValidGroupBalanceOffer.size() == CurrentGroupBalance.size())
								{
									ValidGroupBalanceOffer.forEach(item->{
										if(item.split("\\|")[0].contains("_pc_"))
										{
											String TargetOffer = item.split("\\|")[1];
											BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
												Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
										}
									});
								}
								else
								{
									if(ValidGroupBalanceOffer.size() > CurrentGroupBalance.size())
									{
										ValidGroupBalanceOffer.forEach(item->{
											String SourceValue = item.split("\\|")[0].split(";")[1];
											String TargetOffer = item.split("\\|")[1];
											String Offer_ID = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(SourceValue + "|" + FinalGroupName.substring(0, 3) + "M").getOfferID();
											
											BalanceOfferList.add(PopulateOffer(Offer_ID,TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
													Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
										});
									}
									else
									{
										ValidGroupBalanceOffer.forEach(item->{
											String TargetBalanceName = item.split("\\|")[0].split(";")[0];
											if(TargetBalanceName.startsWith("_pc_"))
											{
												String TargetOffer = item.split("\\|")[1];
												BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
														Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
											}
											else
											{
												String TargetOffer = item.split("\\|")[1];
												BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
														Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
											}
										});										
									}
								}
							}
							if(FinalGroupName.startsWith("1AN") || FinalGroupName.startsWith("1AO"))
							{
								if(ValidGroupBalanceOffer.size() == CurrentGroupBalance.size())
								{
									String TargetOffer = ValidGroupBalanceOffer.get(0).split("\\|")[1];
									// Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + Balance_StartDate + ";" + Balance_ExpiryDate  + ";" + Product_Private
									BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
											Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
								}
								else
								{
									if(ValidGroupBalanceOffer.size() > CurrentGroupBalance.size())
									{
										ValidGroupBalanceOffer.forEach(item->{
											String SourceValue = item.split("\\|")[0].split(";")[1];
											String TargetOffer = item.split("\\|")[1];
											String Offer_ID = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(SourceValue + "|" + FinalGroupName.substring(0, 3) + "M").getOfferID();
											
											BalanceOfferList.add(PopulateOffer(Offer_ID,TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
													Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
										});
									}
									else
									{
										ValidGroupBalanceOffer.forEach(item->{
											String TargetBalanceName = item.split("\\|")[0].split(";")[0];
											if(TargetBalanceName.startsWith("_pc_"))
											{
												String TargetOffer = item.split("\\|")[1];
												BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
														Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
											}
											else
											{
												String TargetOffer = item.split("\\|")[1];
												BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
														Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
											}
										});										
									}
								}
							}
							if(FinalGroupName.startsWith("O"))
							{
								if(ValidGroupBalanceOffer.size() == CurrentGroupBalance.size())
								{
									String TargetOffer = ValidGroupBalanceOffer.get(0).split("\\|")[1];
									// Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + Balance_StartDate + ";" + Balance_ExpiryDate  + ";" + Product_Private
									BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
											Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
									BalanceOfferList.add(PopulateOffer("4003",TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
											Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
								}
								else
								{									
									if(ValidGroupBalanceOffer.size() > CurrentGroupBalance.size())
									{
										ValidGroupBalanceOffer.forEach(item->{
											String SourceValue = item.split("\\|")[0].split(";")[1];
											String TargetOffer = item.split("\\|")[1];
											String Offer_ID = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(SourceValue + "|NM").getOfferID();
											
											BalanceOfferList.add(PopulateOffer(Offer_ID,TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
													Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
										
											BalanceOfferList.add(PopulateOffer("4003",TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
													Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
										});
									}
									else
									{
										ValidGroupBalanceOffer.forEach(item->{											
											String TargetOffer = item.split("\\|")[1];
											if(CurrentGroupBalance.contains(TargetOffer.split(";")[0]))
											{
												BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
														Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
												BalanceOfferList.add(PopulateOffer("4003",TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
														Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
											}
											else
											{
												String TargetBalanceID = item.split("\\|")[0].split(";")[1];
												String TargetBalanceValue = item.split("\\|")[0].split(";")[2];
												onlyLog.add("INC4005:Balance_Type Group Member not found.:MSISDN=" + msisdn + ":BALANCE_TYPE_ID=" + TargetBalanceID + ":BE_BUCKET_VALUE=" + TargetBalanceValue + ":ACTION=Logging");
											}
										});
									}
								}
							}
							if(FinalGroupName.startsWith("P"))
							{
								if(ValidGroupBalanceOffer.size() == CurrentGroupBalance.size())
								{
									String TargetOffer = ValidGroupBalanceOffer.get(0).split("\\|")[1];
									// Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + Balance_StartDate + ";" + Balance_ExpiryDate  + ";" + Product_Private
									BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
											Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
								}
								else
								{									
									ValidGroupBalanceOffer.forEach(item->{											
										String TargetOffer = item.split("\\|")[1];
										if(CurrentGroupBalance.contains(TargetOffer.split(";")[0]))
										{
											BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
													Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
										}
										else
										{
											String TargetBalanceID = item.split("\\|")[0].split(";")[1];
											String TargetBalanceValue = item.split("\\|")[0].split(";")[2];
											onlyLog.add("INC4005:Balance_Type Group Member not found.:MSISDN=" + msisdn + ":BALANCE_TYPE_ID=" + TargetBalanceID + ":BE_BUCKET_VALUE=" + TargetBalanceValue + ":ACTION=Logging");
										}
									});
								}
							}
							if(FinalGroupName.startsWith("Q"))
							{
								if(ValidGroupBalanceOffer.size() == CurrentGroupBalance.size())
								{
									String TargetOffer = ValidGroupBalanceOffer.get(0).split("\\|")[1];
									// Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + Balance_StartDate + ";" + Balance_ExpiryDate  + ";" + Product_Private
									BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
											Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
									BalanceOfferList.add(PopulateOffer("4607",TargetOffer.split(";")[1],false,false,TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
								}
								else
								{
									if(ValidGroupBalanceOffer.size() > CurrentGroupBalance.size())
									{
										ValidGroupBalanceOffer.forEach(item->{
											String SourceValue = item.split("\\|")[0].split(";")[1];
											String TargetOffer = item.split("\\|")[1];
											String Offer_ID = LoadSubscriberMapping.BalanceNonEmptyBTGroupIdentifierMap.get(SourceValue + "|QM").getOfferID();
											BalanceOfferList.add(PopulateOffer(Offer_ID,TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
													Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
										
											BalanceOfferList.add(PopulateOffer("4607",TargetOffer.split(";")[1],false,false,TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
										});
									}
									else
									{
										ValidGroupBalanceOffer.forEach(item->{											
											String TargetOffer = item.split("\\|")[1];
											if(CurrentGroupBalance.contains(TargetOffer.split(";")[0]))
											{
												BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
														Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
												BalanceOfferList.add(PopulateOffer("4607",TargetOffer.split(";")[1],false,false,TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
											}
											else
											{
												String TargetBalanceID = item.split("\\|")[0].split(";")[1];
												String TargetBalanceValue = item.split("\\|")[0].split(";")[2];
												onlyLog.add("INC4005:Balance_Type Group Member not found.:MSISDN=" + msisdn + ":BALANCE_TYPE_ID=" + TargetBalanceID + ":BE_BUCKET_VALUE=" + TargetBalanceValue + ":ACTION=Logging");
											}
										});
									}
								}
							}
							if(FinalGroupName.startsWith("R"))
							{
								if(ValidGroupBalanceOffer.size() == CurrentGroupBalance.size())
								{
									String TargetOffer = ValidGroupBalanceOffer.get(0).split("\\|")[1];
									// Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + Balance_StartDate + ";" + Balance_ExpiryDate  + ";" + Product_Private
									BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
											Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
								}
								else
								{
									ValidGroupBalanceOffer.forEach(item->{											
										String TargetOffer = item.split("\\|")[1];
										if(CurrentGroupBalance.contains(TargetOffer.split(";")[0]))
										{
											BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
													Boolean.parseBoolean(TargetOffer.split(";")[3]),TargetOffer.split(";")[4], TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
										}
										else
										{
											String TargetBalanceID = item.split("\\|")[0].split(";")[1];
											String TargetBalanceValue = item.split("\\|")[0].split(";")[2];
											onlyLog.add("INC4005:Balance_Type Group Member not found.:MSISDN=" + msisdn + ":BALANCE_TYPE_ID=" + TargetBalanceID + ":BE_BUCKET_VALUE=" + TargetBalanceValue + ":ACTION=Logging");
										}
									});
								}
							}
						
							if(FinalGroupName.startsWith("Z"))
							{
								if(ValidGroupBalanceOffer.size() == CurrentGroupBalance.size())
								{									
									String TargetOffer = ValidGroupBalanceOffer.get(0).split("\\|")[1];
									// Offer_ID + ";" + Offer_Type + ";" + startFlag + ";" + expiryFalg + ";" + Balance_StartDate + ";" + Balance_ExpiryDate  + ";" + Product_Private
									BalanceOfferList.add(PopulateOffer(TargetOffer.split(";")[0],TargetOffer.split(";")[1],Boolean.parseBoolean(TargetOffer.split(";")[2]),
											Boolean.parseBoolean(TargetOffer.split(";")[3]),INITIAL_ACTIVATION_DATE, TargetOffer.split(";")[5],TargetOffer.split(";")[6],""));
								}
							}
						//need to put code till here
						}
						else
						{
							onlyLog.add("INC4004:Balance_Type lookup failed in Product_Mapping:MSISDN=" + msisdn + ":BALANCE_TYPE_ID=" + Balance_ID + ":BE_BUCKET_VALUE=" + Balance_Value + ":ACTION=Logging");
						}						
					}
				}
			}
		}		
		return BalanceOfferList.stream().distinct().collect(Collectors.toList());
	}*/


}
