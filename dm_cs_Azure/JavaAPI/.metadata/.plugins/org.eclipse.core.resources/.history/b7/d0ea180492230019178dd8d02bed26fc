package com.ericsson.dm.inititialization;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Random;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;

import org.apache.commons.io.FileUtils;
import org.apache.log4j.Logger;
import org.jibx.runtime.BindingDirectory;
import org.jibx.runtime.IBindingFactory;
import org.jibx.runtime.IUnmarshallingContext;
import org.jibx.runtime.JiBXException;

import com.ericsson.jibx.beans.BALANCEMAPPINGLIST;
import com.ericsson.jibx.beans.BALANCEMAPPINGLIST.BALANCEMAPPINGINFO;
import com.ericsson.jibx.beans.CISONCEOFFLIST;
import com.ericsson.jibx.beans.CISONCEOFFLIST.CISONCEOFFINFO;
import com.ericsson.jibx.beans.CISRENEWALLIST;
import com.ericsson.jibx.beans.CISRENEWALLIST.CISRENEWALINFO;
import com.ericsson.jibx.beans.COMMUNITYMAPPINGLIST;
import com.ericsson.jibx.beans.COMMUNITYMAPPINGLIST.COMMUNITYMAPPINGINFO;
import com.ericsson.jibx.beans.PROFILETAGLIST;
import com.ericsson.jibx.beans.PROFILETAGLIST.PROFILETAGINFO;

public class LoadSubscriberMapping {
	
	public static final Map<String, String> LanguageMap = new ConcurrentHashMap<>(50, 0.75f, 30);
	public static final Map<String, String> CommonConfigMap = new ConcurrentHashMap<>(100, 0.75f, 30);
	public static final Map<String, String> CommonFactorMap = new ConcurrentHashMap<>(100, 0.75f, 30);
	public static final Map<String, String> ConversionLogicMap = new ConcurrentHashMap<>(100, 0.75f, 30);
	public static final Map<String, String> LoggingMap = new ConcurrentHashMap<>(50, 0.75f, 30);
	public static final Map<String, String> OutputFilesMap = new ConcurrentHashMap<>(50, 0.75f, 30);
	public static final Map<String, String> sdp_ftp_ranges = new ConcurrentHashMap<>(1000, 0.75f, 30);	
	public static final Map<String, String> sdp_distribution = new ConcurrentHashMap<>(100, 0.75f, 30);	
	public static final Map<String, String> ServiceClassMap = new ConcurrentHashMap<>(100, 0.75f, 30);
	//public static final Map<String, String> ProfileTagMap = new ConcurrentHashMap<>(100, 0.75f, 30);
	public static final Map<String, String> OfferAttrDefMap = new ConcurrentHashMap<>(100, 0.75f, 30);
	
	public static final Map<String, PROFILETAGINFO> Profile_Tags_Mapping = new ConcurrentHashMap<>(10000, 0.75f, 100);
	public static final Map<String, PROFILETAGINFO> Profile_Tags_MappingWithGroup = new ConcurrentHashMap<>(10000, 0.75f, 100);
	public static final Map<String, Set<String>> ProfileGroupingMap = new ConcurrentHashMap<>(1000, 0.75f, 30);
	public static final Map<String, PROFILETAGINFO> ProfileSpecialGroup = new ConcurrentHashMap<>(1000, 0.75f, 30);
	public static final Set<String> ProfileBalancesID = new HashSet<>();
	public static final Map<String, String> ProfileBalancesIDDetails = new ConcurrentHashMap<>(10000, 0.75f, 100);
	
	
	public static final Map<String, Set<String>> BalanceGroupingMap = new ConcurrentHashMap<>(1000, 0.75f, 30);	
	public static final Map<String, String> BalanceOnlyAGroupMap = new ConcurrentHashMap<>(1000, 0.75f, 30);
	public static final Map<String, String> BalanceOnlyDGroupMap = new ConcurrentHashMap<>(1000, 0.75f, 30);	
	public static final Map<String, String> BalanceOnlyCGroupMap = new ConcurrentHashMap<>(1000, 0.75f, 30);
	public static final Map<String, String> BalanceOnlyFGroupMap = new ConcurrentHashMap<>(1000, 0.75f, 30);	
	
	public static final Map<String, Set<String>> BalanceGroupingMapForDA = new ConcurrentHashMap<>(1000, 0.75f, 30);	
	public static final List<String> MainBalanceGroupingList = new ArrayList<>();	
	public static final Map<String, String> DefaultServicesMap = new ConcurrentHashMap<>(1000, 0.75f, 30);	
	public static final Map<String, String> LifeCycleMap = new ConcurrentHashMap<>(100, 0.75f, 30);	
	public static final Map<String, String> CommunityMap = new ConcurrentHashMap<>(1000, 0.75f, 30);

	public static final Set<String> DefaultOfferAttributes = new HashSet<>();
	
	public static final Set<String> OfferIgnoreFlag = new HashSet<>();
	
	/* CIS Mapping variable for all possible outputs*/
	public static final Map<String, CISRENEWALINFO> CIS_Renewal_Mapping = new ConcurrentHashMap<>(10000, 0.75f, 100);
	public static final Map<String, CISONCEOFFINFO> CIS_OnceOff_Mapping = new ConcurrentHashMap<>(10000, 0.75f, 100);	
	
	public static String BT_VALUE_3011 = "";
	
	/* Balance Mapping variable for all possible outputs*/
	public static final Map<String, BALANCEMAPPINGINFO> BalanceEmptyBTGroupIdentifierMap = new ConcurrentHashMap<>(10000, 0.75f, 100);
	public static final Map<String, BALANCEMAPPINGINFO> BalanceNonEmptyBTGroupIdentifierMap = new ConcurrentHashMap<>(10000, 0.75f, 100);
	
	public static final Map<String, BALANCEMAPPINGINFO> SpecialBalanceNonBTGroupIdentifierMap = new ConcurrentHashMap<>(10000, 0.75f, 100);
	public static final Map<String, BALANCEMAPPINGINFO> MainBalanceNonBTGroupIdentifierMap = new ConcurrentHashMap<>(10000, 0.75f, 100);
	
	public static final Map<String, BALANCEMAPPINGINFO> BalanceEmptyBTGroupIdentifierMapForDA = new ConcurrentHashMap<>(10000, 0.75f, 100);
	public static final Map<String, BALANCEMAPPINGINFO> BalanceNonEmptyBTGroupIdentifierMapForDA = new ConcurrentHashMap<>(10000, 0.75f, 100);

	public static final Map<String, BALANCEMAPPINGINFO> SpecialBalanceNonBTGroupIdentifierMapForDA = new ConcurrentHashMap<>(10000, 0.75f, 100);
	public static final Map<String, BALANCEMAPPINGINFO> MainBalanceNonBTGroupIdentifierMapForDA = new ConcurrentHashMap<>(10000, 0.75f, 100);
	
	public static final Map<String, BALANCEMAPPINGINFO> BalanceNonEmptyBTGroupIdentifierMapForUC = new ConcurrentHashMap<>(10000, 0.75f, 100);
	
	public static final Map<String, BALANCEMAPPINGINFO> BalanceEmptyBTGroupIdentifierMapForOffAttr = new ConcurrentHashMap<>(10000, 0.75f, 100);
	public static final Map<String, BALANCEMAPPINGINFO> BalanceNonEmptyBTGroupIdentifierMapForOffAttr = new ConcurrentHashMap<>(10000, 0.75f, 100);
	
	public static final Map<String, BALANCEMAPPINGINFO> BalanceEmptyBTGroupIdentifierMapForAcc = new ConcurrentHashMap<>(10000, 0.75f, 100);
	public static final Map<String, BALANCEMAPPINGINFO> BalanceNonEmptyBTGroupIdentifierMapForAcc = new ConcurrentHashMap<>(10000, 0.75f, 100);
	
	public static final Map<String, Map<String,List<String>>> BalanceProductID = new ConcurrentHashMap<>(10000, 0.75f, 100);
	
	//public static final Set<String> ProductIDForOffer = ConcurrentHashMap.newKeySet(BalanceProductID.size());
	//public static final Set<String> ProductIDForDA = ConcurrentHashMap.newKeySet(BalanceProductID.size());
	//public static final Set<String> ProductIDForUC = ConcurrentHashMap.newKeySet(BalanceProductID.size());
	
	final static Logger LOG = Logger.getLogger(LoadSubscriberMapping.class);
	
	public static Random rand = new Random();
	
	private void LoadlanguageMap(String dataFolderPath) throws IOException {
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new FileReader(dataFolderPath + "/LanguageMapping.txt"));
		String line;
		while ((line = br.readLine()) != null) {
			String datas[] = line.split(",");
			LoadSubscriberMapping.LanguageMap.put(datas[0], datas[1]);
		}
		br.close();
	}
	
	private void LoadCommonConfigMap(String dataFolderPath) throws IOException {
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new FileReader(dataFolderPath + "/CommonConfigMapping.txt"));
		String line;
		while ((line = br.readLine()) != null) {
			String datas[] = line.split(",");
			LoadSubscriberMapping.CommonConfigMap.put(datas[0], datas[1]);
		}
		br.close();
	}
	
	private void LoadConversionFactorMap(String dataFolderPath) throws IOException {
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new FileReader(dataFolderPath + "/CommonFactorMapping.txt"));
		String line;
		while ((line = br.readLine()) != null) {
			String datas[] = line.split(",");
			LoadSubscriberMapping.CommonFactorMap.put(datas[0], datas[2]);
		}
		br.close();
	}
		
	private void LoadConversionLogicMap(String dataFolderPath) throws IOException {
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new FileReader(dataFolderPath + "/ConversionLogicMapping.txt"));
		String line;
		while ((line = br.readLine()) != null) {
			String datas[] = line.split(",",-1);
			LoadSubscriberMapping.ConversionLogicMap.put(datas[0], datas[1] + '|' + datas[2] + '|' + datas[3]);
		}
		br.close();
	}
	
	private void LoadLoggingMap(String dataFolderPath) throws IOException {
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new FileReader(dataFolderPath + "/LoggingMapping.txt"));
		String line;
		while ((line = br.readLine()) != null) {
			String datas[] = line.split("\\|");
			LoadSubscriberMapping.LoggingMap.put(datas[0], datas[2] + '|' + datas[3] + '|' + datas[5]);
		}
		br.close();
	}
	
	private void LoadOutputFilesMap(String dataFolderPath) throws IOException {
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new FileReader(dataFolderPath + "/OutputFilesMapping.txt"));
		String line;
		while ((line = br.readLine()) != null) {
			String datas[] = line.split(",");
			LoadSubscriberMapping.OutputFilesMap.put(datas[0], datas[1] );
		}
		br.close();
	}
	
	private void LoadSdpDistributionMap(String dataFolderPath) throws IOException {
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new FileReader(dataFolderPath + "/sdp_distribution.txt"));
		String line;
		while ((line = br.readLine()) != null) {
			String datas[] = line.split(",");
			LoadSubscriberMapping.sdp_distribution.put(datas[0], datas[1] + '|' + datas[2] );
		}
		br.close();
	}
	private void LoadCommunityMap(String dataFolderPath) throws IOException {
		IBindingFactory bindingFactoryBalance = null;
		IUnmarshallingContext unmarshallingContextBalance;
		try {
			bindingFactoryBalance = BindingDirectory.getFactory(com.ericsson.jibx.beans.COMMUNITYMAPPINGLIST.class);
			unmarshallingContextBalance = bindingFactoryBalance.createUnmarshallingContext();
			COMMUNITYMAPPINGLIST CommunityList = (com.ericsson.jibx.beans.COMMUNITYMAPPINGLIST) unmarshallingContextBalance
					.unmarshalDocument(new ByteArrayInputStream(
							FileUtils.readFileToByteArray(new File(dataFolderPath + "/CommunityMapping.xml"))), null);
			
			for (COMMUNITYMAPPINGINFO communityInfo : CommunityList.getCOMMUNITYMAPPINGINFOList()) {
				LoadSubscriberMapping.CommunityMap.put(communityInfo.getCUGNAME(), communityInfo.getCommunityID());
			}
		}
		catch (JiBXException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		/*// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new FileReader(dataFolderPath + "/sdp_distribution.txt"));
		String line;
		while ((line = br.readLine()) != null) {
			String datas[] = line.split(",");
			LoadSubscriberMapping.sdp_distribution.put(datas[0], datas[1] + '|' + datas[2] );
		}
		br.close();*/
	}
	
	private void LoadFTPRangesMap(String dataFolderPath) throws IOException {
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new FileReader(dataFolderPath + "/sdp_ftp_ranges.txt"));
		String line;
		while ((line = br.readLine()) != null) {
			String datas[] = line.split(",");
			LoadSubscriberMapping.sdp_ftp_ranges.put(datas[0], line );
		}
		br.close();
	}
	
/*	private void LoadProfileTagMap(String dataFolderPath) throws IOException {
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new FileReader(dataFolderPath + "/ProfileTagMapping.txt"));
		String line;
		while ((line = br.readLine()) != null) {
			String datas[] = line.split("\\|");
			LoadSubscriberMapping.ProfileTagMap.put(datas[0] + ';' + datas[1] + ';' + datas[2],line);
		}
		br.close();
	}*/
	
	private void LoadServiceClassMap(String dataFolderPath) throws IOException {
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new FileReader(dataFolderPath + "/ServiceClassMapping.txt"));
		String line;
		while ((line = br.readLine()) != null) {
			String datas[] = line.split(",");
			LoadSubscriberMapping.ServiceClassMap.put(datas[1], datas[2] +'|' + datas[3] +'|' + datas[4] );
		}
		br.close();
	}
	
	private void LoadLifeCycleMap(String dataFolderPath) throws IOException {
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new FileReader(dataFolderPath + "/LifeCycleMapping.txt"));
		String line;
		while ((line = br.readLine()) != null) {
			String datas[] = line.split(",");
			LoadSubscriberMapping.LifeCycleMap.put(datas[0] + '|' + datas[1] + '|' + datas[2], line );
		}
		br.close();
	}
	
	private void LoadDefaultServicesMap(String dataFolderPath) throws IOException {
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new FileReader(dataFolderPath + "/DefaultServicesMapping.txt"));
		String line;
		while ((line = br.readLine()) != null) {
			String datas[] = line.split(",",-1);
			LoadSubscriberMapping.DefaultServicesMap.put(datas[0] + '|' + datas[1], line );
			
			if(datas[10].length() >1)
			{
				DefaultOfferAttributes.add(datas[10]);
			}
		}
		br.close();
	}
	
	private void LoadOfferAttrDefMap(String dataFolderPath) throws IOException {
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new FileReader(dataFolderPath + "/Offer_Attribute_Defination.txt"));
		String line;
		while ((line = br.readLine()) != null) {
			String datas[] = line.split(",");
			LoadSubscriberMapping.OfferAttrDefMap.put(datas[0]+ ',' + datas[1], datas[2] );
		}
		br.close();
	}
	
	private void LoadCISRenewalMap(String dataFolderPath)
	{
		IBindingFactory bindingFactoryCIS = null;
		IUnmarshallingContext unmarshallingContextCIS;
		
		try {
			bindingFactoryCIS = BindingDirectory.getFactory(com.ericsson.jibx.beans.CISRENEWALLIST.class);
			unmarshallingContextCIS = bindingFactoryCIS.createUnmarshallingContext();
			CISRENEWALLIST CISRenewallist = (com.ericsson.jibx.beans.CISRENEWALLIST) unmarshallingContextCIS
					.unmarshalDocument(new ByteArrayInputStream(
							FileUtils.readFileToByteArray(new File(dataFolderPath + "/CIS_Renewal_Mapping.xml"))), null);
			
			for (CISRENEWALINFO cisRenewalInfo : CISRenewallist.getCISRENEWALINFOList()) {
				String BT_ID =  cisRenewalInfo.getBTID();
				String Offer_ID =  cisRenewalInfo.getOfferID();
				if(BT_ID.length() != 0)
				{
					CIS_Renewal_Mapping.put(BT_ID+","+Offer_ID, cisRenewalInfo);
				}	
			}
		} catch (JiBXException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	private void LoadCISOnceOffMap(String dataFolderPath)
	{
		IBindingFactory bindingFactoryCIS = null;
		IUnmarshallingContext unmarshallingContextCIS;
		
		try {
			bindingFactoryCIS = BindingDirectory.getFactory(com.ericsson.jibx.beans.CISONCEOFFLIST.class);
			unmarshallingContextCIS = bindingFactoryCIS.createUnmarshallingContext();
			CISONCEOFFLIST CISOncelist = (com.ericsson.jibx.beans.CISONCEOFFLIST) unmarshallingContextCIS
					.unmarshalDocument(new ByteArrayInputStream(
							FileUtils.readFileToByteArray(new File(dataFolderPath + "/CIS_OnceOff_Mapping.xml"))), null);
			
			for (CISONCEOFFINFO cisOnceInfo : CISOncelist.getCISONCEOFFINFOList()) {
				String BT_ID =  cisOnceInfo.getBTID();
				String Offer_ID =  cisOnceInfo.getOfferId();
				if(BT_ID.length() != 0)
				{
					CIS_OnceOff_Mapping.put(BT_ID+","+Offer_ID, cisOnceInfo);
				}			
			}
		} catch (JiBXException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	private void LoadProfileTagsMap(String dataFolderPath)
	{
		IBindingFactory bindingFactoryProfile = null;
		IUnmarshallingContext unmarshallingContextProfile;
		
		try {
			bindingFactoryProfile = BindingDirectory.getFactory(com.ericsson.jibx.beans.PROFILETAGLIST.class);
			unmarshallingContextProfile = bindingFactoryProfile.createUnmarshallingContext();
			PROFILETAGLIST ProfileList = (com.ericsson.jibx.beans.PROFILETAGLIST) unmarshallingContextProfile
					.unmarshalDocument(new ByteArrayInputStream(
							FileUtils.readFileToByteArray(new File(dataFolderPath + "/ProfileTagMapping.xml"))), null);
			
			for (PROFILETAGINFO profileInfo : ProfileList.getPROFILETAGINFOList()) {
				String Profile_Tag_Name =  profileInfo.getProfileTagName();
				String PT_Group_Identifier =  profileInfo.getPTGroupIdentifier();
				if(Profile_Tag_Name.length() != 0 && PT_Group_Identifier.length() != 0)
				{
					Profile_Tags_MappingWithGroup.put(Profile_Tag_Name + "," + PT_Group_Identifier, profileInfo);
					if(Profile_Tag_Name.equals("BusMobTopUp") && profileInfo.getBTPERIODICCHARGEID().length() > 1)
					{
						ProfileSpecialGroup.put(Profile_Tag_Name + "," + profileInfo.getProfileTagValue(), profileInfo);
						ProfileBalancesID.add(profileInfo.getBTPERIODICCHARGEID());
					}					
				}	
				else
				{
					Profile_Tags_Mapping.put(Profile_Tag_Name, profileInfo);					
				}
				
				for (PROFILETAGINFO TempprofileInfo : ProfileList.getPROFILETAGINFOList()) {
					String TempPT_Group_Identifier =  profileInfo.getPTGroupIdentifier();
					String TempProfile_Tag_Name = profileInfo.getProfileTagName();
					if(TempPT_Group_Identifier.length() > 0)
					{
						if(TempPT_Group_Identifier.equals(PT_Group_Identifier))
						{
							String TempProfileTag = TempprofileInfo.getProfileTagName();
							if(ProfileGroupingMap.containsKey(TempPT_Group_Identifier))
							{									
								Set<String> result = new HashSet<>();
								result.addAll(ProfileGroupingMap.get(TempPT_Group_Identifier));
								result.add(Profile_Tag_Name);
								ProfileGroupingMap.put(TempPT_Group_Identifier, result);									
							}
							else
							{
								Set<String> result = new HashSet<>();
								result.add(Profile_Tag_Name);
								result.add(TempProfile_Tag_Name);
								ProfileGroupingMap.put(TempPT_Group_Identifier, result);
							}
						}	
					}
				}
			}
		} catch (JiBXException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}	
	
	private void LoadxmlBalanceMappingMap(String dataFolderPath)
	{
		IBindingFactory bindingFactoryBalance = null;
		IUnmarshallingContext unmarshallingContextBalance;
		
		try {
			bindingFactoryBalance = BindingDirectory.getFactory(com.ericsson.jibx.beans.BALANCEMAPPINGLIST.class);
			unmarshallingContextBalance = bindingFactoryBalance.createUnmarshallingContext();
			BALANCEMAPPINGLIST balancelist = (com.ericsson.jibx.beans.BALANCEMAPPINGLIST) unmarshallingContextBalance
					.unmarshalDocument(new ByteArrayInputStream(
							FileUtils.readFileToByteArray(new File(dataFolderPath + "/BalanceMapping.xml"))), null);
			
			for (BALANCEMAPPINGINFO balanceInfo : balancelist.getBALANCEMAPPINGINFOList()) {
								
				String Balance_ID = balanceInfo.getBTID();
				/*String Offer_Value = balanceInfo.getOfferID();
				String DA_Value = balanceInfo.getDAID();
				String UC_Value = balanceInfo.getUCID();
				String OfferAttr_Value = balanceInfo.getAttrOfferId();
				String Acc_Value = balanceInfo.getUAID();*/
				String Product_Private = balanceInfo.getProductPrivate().trim();
				if(Product_Private.equals("Yes"))
				{	
					Set<String> UAList = new HashSet<>();
					Set<String> DAList = new HashSet<>();
					Set<String> OffAttrList = new HashSet<>();
					
					for (BALANCEMAPPINGINFO Temp:  balancelist.getBALANCEMAPPINGINFOList())
					{
						if (balanceInfo.getOfferID().equals(Temp.getOfferID()))
						{
							if(!Temp.getUCID().isEmpty())
								UAList.add(Temp.getUCID());
							if(!Temp.getDAID().isEmpty())
								DAList.add(Temp.getDAID());
							if(!Temp.getAttrOfferId().isEmpty())
								OffAttrList.add(Temp.getAttrOfferId());
						}						
					}
					
					Map<String,List<String>> MapValue = new HashMap<>(); 
					MapValue.put("UCValue",new ArrayList<>(UAList));
					MapValue.put("DAValue",new ArrayList<>(DAList));
					MapValue.put("OffAttrValue",new ArrayList<>(OffAttrList));
					if(!balanceInfo.getOfferID().isEmpty())
						BalanceProductID.put(balanceInfo.getOfferID(),MapValue);
					
				}
				if (!Balance_ID.isEmpty())
				{					
					String BTGroupIdentifier = balanceInfo.getBTGroupIdentifier();
					String CCID = balanceInfo.getRPID();
					String BalanceKey = Balance_ID + '|' + BTGroupIdentifier ;
					if (BTGroupIdentifier.length() == 0)
					{		
						BalanceEmptyBTGroupIdentifierMap.put(BalanceKey, balanceInfo);
						/*if(!Offer_Value.isEmpty())
							BalanceEmptyBTGroupIdentifierMap.put(BalanceKey, balanceInfo);
						if(!DA_Value.isEmpty())
							BalanceEmptyBTGroupIdentifierMapForDA.put(BalanceKey, balanceInfo);
						if(!Acc_Value.isEmpty())
							BalanceEmptyBTGroupIdentifierMapForAcc.put(BalanceKey, balanceInfo);
						if(!OfferAttr_Value.isEmpty())
							BalanceEmptyBTGroupIdentifierMapForOffAttr.put(BalanceKey, balanceInfo);*/
					}
					else
					{							
						if(BTGroupIdentifier.startsWith("DUMMY") && CCID.length() == 0)
						{
							SpecialBalanceNonBTGroupIdentifierMap.put(Balance_ID + '|' + balanceInfo.getBTValue() , balanceInfo);
							
							/*if(!Offer_Value.isEmpty() && !DA_Value.isEmpty())
							{
								SpecialBalanceNonBTGroupIdentifierMap.put(Balance_ID + '|' + balanceInfo.getBTValue() , balanceInfo);
								SpecialBalanceNonBTGroupIdentifierMapForDA.put(Balance_ID + '|' + balanceInfo.getBTValue() , balanceInfo);
							}
							else if(!Offer_Value.isEmpty())
								SpecialBalanceNonBTGroupIdentifierMap.put(Balance_ID + '|' + balanceInfo.getBTValue() , balanceInfo);
							else if(!DA_Value.isEmpty())
								SpecialBalanceNonBTGroupIdentifierMapForDA.put(Balance_ID + '|' + balanceInfo.getBTValue() , balanceInfo);*/
							if(Balance_ID.equals("3011"))
							{
								BT_VALUE_3011 = balanceInfo.getBTValue();
							}
						}
						else if(BTGroupIdentifier.startsWith("DUMMY") && CCID.length() != 0)
						{							
							MainBalanceGroupingList.add(BTGroupIdentifier);
							MainBalanceNonBTGroupIdentifierMap.put(Balance_ID + '|' + CCID + '|' + BTGroupIdentifier, balanceInfo);
							
							/*if(!Offer_Value.isEmpty() && !DA_Value.isEmpty())
							{
								MainBalanceNonBTGroupIdentifierMap.put(Balance_ID + '|' + CCID + '|' + BTGroupIdentifier, balanceInfo);
								MainBalanceNonBTGroupIdentifierMapForDA.put(Balance_ID + '|' + CCID + '|' + BTGroupIdentifier, balanceInfo);
							}
							else if(!Offer_Value.isEmpty())
								MainBalanceNonBTGroupIdentifierMap.put(Balance_ID + '|' + CCID + '|' + BTGroupIdentifier, balanceInfo);
							else if(!DA_Value.isEmpty())
								MainBalanceNonBTGroupIdentifierMapForDA.put(Balance_ID + '|' + CCID + '|' + BTGroupIdentifier, balanceInfo);*/
							
						}
						//if(!Offer_Value.isEmpty())
							BalanceNonEmptyBTGroupIdentifierMap.put(BalanceKey, balanceInfo);
						//if(!DA_Value.isEmpty())
						//	BalanceNonEmptyBTGroupIdentifierMapForDA.put(BalanceKey, balanceInfo);
						//if(!UC_Value.isEmpty())
						//	BalanceNonEmptyBTGroupIdentifierMapForUC.put(BalanceKey, balanceInfo);
						//if(!Acc_Value.isEmpty())
						//	BalanceNonEmptyBTGroupIdentifierMapForAcc.put(BalanceKey, balanceInfo);
						//if(!OfferAttr_Value.isEmpty())
						//	BalanceNonEmptyBTGroupIdentifierMapForOffAttr.put(BalanceKey, balanceInfo);
						
						for (BALANCEMAPPINGINFO tempbalanceInfo : balancelist.getBALANCEMAPPINGINFOList()) {
							String BTGroupIdentifierTemp = tempbalanceInfo.getBTGroupIdentifier();
							if(BTGroupIdentifierTemp.equals(BTGroupIdentifier) && !BTGroupIdentifier.equals("M"))
							{
								String Balance_IDTemp = tempbalanceInfo.getBTID();
								if(BalanceGroupingMap.containsKey(BTGroupIdentifierTemp))
								{									
									Set<String> result = new HashSet<>();
									result.addAll(BalanceGroupingMap.get(BTGroupIdentifierTemp));
									result.add(Balance_IDTemp);
									BalanceGroupingMap.put(BTGroupIdentifier, result);									
								}
								else
								{
									Set<String> result = new HashSet<>();
									result.add(Balance_ID);
									result.add(Balance_IDTemp);
									BalanceGroupingMap.put(BTGroupIdentifier, result);
								}
							}							
						}
					}					
				}
			}
			
			//BalanceEmptyBTGroupIdentifierMap.forEach((k,v)->System.out.println(k));
			//System.out.println("------------------------");
			//BalanceNonEmptyBTGroupIdentifierMapForOffAttr.forEach((k,v)->System.out.println(k));
			
			//BalanceProductID.keySet().forEach(action->System.out.println(action));
			//System.out.println("------------------------");
			//BalanceProductID.forEach((k,v)->System.out.println(k+"----"+v));
			
		} catch (JiBXException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public static <K, V> K getKey(Map<K, V> map, V value) {
		return map.keySet()
						.stream()
						.filter(key -> value.equals(map.get(key)))
						.findFirst().get();
	}
	
	public LoadSubscriberMapping(String sdpid, String configPath, String dataFolderPath, String workingMode) {

		try {
			LoadLoggingMap(dataFolderPath);
			LoadSdpDistributionMap(dataFolderPath);
			LoadFTPRangesMap(dataFolderPath);
			LoadCommonConfigMap(dataFolderPath);
			LoadConversionLogicMap(dataFolderPath);
			LoadConversionFactorMap(dataFolderPath);
			LoadOutputFilesMap(dataFolderPath);
			LoadLifeCycleMap(dataFolderPath);
			LoadServiceClassMap(dataFolderPath);
			LoadlanguageMap(dataFolderPath);
			LoadxmlBalanceMappingMap(dataFolderPath);
			LoadDefaultServicesMap(dataFolderPath);
			LoadCommunityMap(dataFolderPath);
			//LoadProfileTagMap(dataFolderPath);
			LoadOfferAttrDefMap(dataFolderPath);
			LoadProfileTagsMap(dataFolderPath);
			LoadCISOnceOffMap(dataFolderPath);
			LoadCISRenewalMap(dataFolderPath);
			
			 for (String GroupName : BalanceGroupingMap.keySet())
			 {
				 if(GroupName.startsWith("D-"))
				 {
					 Set<String> tempSet = BalanceGroupingMap.get(GroupName);
					 String ResultString = String.join(",", tempSet);
					 BalanceOnlyDGroupMap.put(GroupName, ResultString);
				 }
			 }
			 
			 for (String GroupName : BalanceGroupingMap.keySet())
			 {
				 if(GroupName.startsWith("A-"))
				 {
					 Set<String> tempSet = BalanceGroupingMap.get(GroupName);
					 String ResultString = String.join(",", tempSet);
					 BalanceOnlyAGroupMap.put(GroupName, ResultString);
				 }
			 }
			 
			/* for (String GroupName : BalanceGroupingMap.keySet())
			 {
				 if(GroupName.startsWith("A-"))
				 {
					 Set<String> tempSet = BalanceGroupingMap.get(GroupName);
					 String ResultString = String.join(",", tempSet);
					 BalanceOnlyAGroupMap.put(GroupName, ResultString);
				 }
			 }*/
			 
			 for (String GroupName : BalanceGroupingMap.keySet())
			 {
				 if(GroupName.startsWith("C-"))
				 {
					 Set<String> tempSet = BalanceGroupingMap.get(GroupName);
					 String ResultString = String.join(",", tempSet);
					 BalanceOnlyCGroupMap.put(GroupName, ResultString);
				 }
			 }
			 
			 for (String GroupName : BalanceGroupingMap.keySet())
			 {
				 if(GroupName.startsWith("F-"))
				 {
					 Set<String> tempSet = BalanceGroupingMap.get(GroupName);
					 String ResultString = String.join(",", tempSet);
					 BalanceOnlyFGroupMap.put(GroupName, ResultString);
				 }
			 }
			
			System.out.println("----------Count of Mapping Data for Offer------------");
			System.out.println("Empty-BT-GroupIdentifier: " + BalanceEmptyBTGroupIdentifierMap.size());
			System.out.println("NonEmpty-BTGroupIdentifier: " + BalanceNonEmptyBTGroupIdentifierMap.size());
			System.out.println("Special NonEmpty-BTGroupIdentifier: " + SpecialBalanceNonBTGroupIdentifierMap.size());
			System.out.println("MainBalance NonEmpty-BTGroupIdentifier: " + MainBalanceNonBTGroupIdentifierMap.size());

			/*System.out.println("----------Count of Mapping Data for Dedicated Account------------");
			System.out.println("Empty-BT-GroupIdentifier for DA: " + BalanceEmptyBTGroupIdentifierMapForDA.size());
			System.out.println("NonEmpty-BTGroupIdentifier for DA: " + BalanceNonEmptyBTGroupIdentifierMapForDA.size());
			System.out.println("Special NonEmpty-BTGroupIdentifier for DA: " + SpecialBalanceNonBTGroupIdentifierMapForDA.size());
			System.out.println("MainBalance NonEmpty-BTGroupIdentifier for DA: " + MainBalanceNonBTGroupIdentifierMapForDA.size());
			
			System.out.println("----------Count of Mapping Data for Usage Counter------------");
			System.out.println("Empty-BT-GroupIdentifier for UC: " + BalanceNonEmptyBTGroupIdentifierMapForUC.size());
			
			System.out.println("----------Count of Mapping Data for Accumulator------------");
			System.out.println("Empty-BT-GroupIdentifier for Acc: " + BalanceEmptyBTGroupIdentifierMapForAcc.size());
			System.out.println("NonEmpty-BT-GroupIdentifier for Acc: " + BalanceNonEmptyBTGroupIdentifierMapForAcc.size());
			
			System.out.println("----------Count of Mapping Data for Usage Counter------------");
			System.out.println("Empty-BT-GroupIdentifier for UC: " + BalanceEmptyBTGroupIdentifierMapForOffAttr.size());
			System.out.println("NonEmpty-BT-GroupIdentifier for UC: " + BalanceNonEmptyBTGroupIdentifierMapForOffAttr.size());*/
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			LOG.error("Exception occured ", e);
		}
	}
	
	

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		String sdpid, configPath, dataFolderPath, workingMode = null;
		
		dataFolderPath = "C:\\Ericsson\\MyWorkingProject\\Charging_System\\dm_cs_2018_du_dubai\\dev\\src\\data";
		configPath = "C:\\Ericsson\\MyWorkingProject\\Charging_System\\dm_cs_2018_du_dubai\\dev\\src\\config\\config";
		workingMode = "C:\\Ericsson\\MyWorkingProject\\Charging_System\\dm_cs_2018_du_dubai\\dev\\src\\working";
		//String filesToBeInserted = "INFILE_Subscriber_Balances.csv.gz,INFILE_Subscriber_cug_cli.csv.gz,INFILE_Subscriber_USMS.csv.gz";
		//String filesToBeInserted = "sdp01_subscriber_balances_dump.csv.gz,sdp01_subscriber_cugcli_dump.csv.gz,sdp01_subscriber_usms_dump.csv.gz";
		sdpid = "LOAD_MAPPING";
		
		LoadSubscriberMapping lsm = new LoadSubscriberMapping(sdpid, configPath, dataFolderPath, workingMode);
		
		System.out.println("----------Count of Mapping Data for Offer------------");
		System.out.println("Empty-BT-GroupIdentifier: " + BalanceEmptyBTGroupIdentifierMap.size());
		System.out.println("NonEmpty-BTGroupIdentifier: " + BalanceNonEmptyBTGroupIdentifierMap.size());
		System.out.println("Special NonEmpty-BTGroupIdentifier: " + SpecialBalanceNonBTGroupIdentifierMap.size());
		System.out.println("MainBalance NonEmpty-BTGroupIdentifier: " + MainBalanceNonBTGroupIdentifierMap.size());

		/*System.out.println("----------Count of Mapping Data for Dedicated Account------------");
		System.out.println("Empty-BT-GroupIdentifier for DA: " + BalanceEmptyBTGroupIdentifierMapForDA.size());
		System.out.println("NonEmpty-BTGroupIdentifier for DA: " + BalanceNonEmptyBTGroupIdentifierMapForDA.size());
		System.out.println("Special NonEmpty-BTGroupIdentifier for DA: " + SpecialBalanceNonBTGroupIdentifierMapForDA.size());
		System.out.println("MainBalance NonEmpty-BTGroupIdentifier for DA: " + MainBalanceNonBTGroupIdentifierMapForDA.size());
		
		System.out.println("----------Count of Mapping Data for Usage Counter------------");
		System.out.println("Empty-BT-GroupIdentifier for UC: " + BalanceNonEmptyBTGroupIdentifierMapForUC.size());
		
		System.out.println("----------Count of Mapping Data for Accumulator------------");
		System.out.println("Empty-BT-GroupIdentifier for Acc: " + BalanceEmptyBTGroupIdentifierMapForAcc.size());
		System.out.println("NonEmpty-BT-GroupIdentifier for Acc: " + BalanceNonEmptyBTGroupIdentifierMapForAcc.size());
		
		System.out.println("----------Count of Mapping Data for Usage Counter------------");
		System.out.println("Empty-BT-GroupIdentifier for UC: " + BalanceEmptyBTGroupIdentifierMapForOffAttr.size());
		System.out.println("NonEmpty-BT-GroupIdentifier for UC: " + BalanceNonEmptyBTGroupIdentifierMapForOffAttr.size());*/
		/*for(Set<String> valueList : LoadSubscriberMapping.BalanceGroupingMap.values()) {
			System.out.println(LoadSubscriberMapping.getKey(LoadSubscriberMapping.BalanceGroupingMap, valueList));
			System.out.println(valueList);

		}*/
		
		//BalanceProductID.forEach((k,v)->System.out.println(k+"----"+v));
		//Map<String,List<String>>DA_ProductID = new HashMap<>();
		//DA_ProductID.putAll(BalanceProductID.get("DAValue"));
		//System.out.println("8888888888888888888888" + DA_ProductID.size());
		//DA_ProductID.forEach((k,v)->System.out.println(k+"----"+v));
		
	}

}
